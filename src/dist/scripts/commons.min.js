var App;
(function (App) {
    "use strict";
    var BaseService = /** @class */ (function () {
        function BaseService($q, urlService, webService) {
            this.q = $q;
            this.url = urlService;
            this.web = webService;
        }
        return BaseService;
    }());
    App.BaseService = BaseService;
})(App || (App = {}));

var App;
(function (App) {
    var LocalConfigController = /** @class */ (function () {
        function LocalConfigController(storageService) {
            console.log('I am in storage Controller');
            this.storageService = storageService;
            this.showOrderNumberAfterSave = this.storageService.get(App.LocalStorageKeys.ShowOrderNumberAfterSave);
            this.addToCartIfResultIsOne = this.storageService.get(App.LocalStorageKeys.AddToCartIfResultIsOne);
            this.deliveryChargeAmount = this.storageService.get(App.LocalStorageKeys.DeliveryChargeAmount);
            this.receiptName = this.storageService.get2(App.LocalStorageKeys.ReceiptName);
            this.chalanName = this.storageService.get2(App.LocalStorageKeys.ChalanName);
            this.defaultWarehouse = this.storageService.get2(App.LocalStorageKeys.DefaultWarehouse);
            this.dealerPriceChange = this.storageService.get2(App.LocalStorageKeys.DealerPriceChange);
        }
        LocalConfigController.prototype.$onInit = function () { console.log('on init LocalConfigController'); };
        LocalConfigController.prototype.valueChanged = function (key, value) {
            console.log(key, value);
            this.storageService.save2(key, value);
        };
        LocalConfigController.$inject = ["LocalStorageService"];
        return LocalConfigController;
    }());
    App.LocalConfigController = LocalConfigController;
    angular.module('app').controller('LocalConfigController', LocalConfigController);
})(App || (App = {}));

var App;
(function (App) {
    var LocalStorageService = /** @class */ (function () {
        function LocalStorageService(localStorageService) {
            this.localStorageService = localStorageService;
        }
        LocalStorageService.prototype.getStorageKey = function (key) {
            var storageKey = LocalStorageKeys[key].toString();
            return storageKey;
        };
        //save(key: LocalStorageKeys, value: any): void {
        //    let type: StorageType = StorageType.localStorage;
        //    let storageType = this.localStorageService.getStorageType();
        //    if (storageType != null) {
        //        type = storageType === 'localStorage' ? StorageType.localStorage : StorageType.sessionStorage;
        //    }
        //    this.save(key, value, type);
        //}
        LocalStorageService.prototype.save = function (key, value, type) {
            var storageKey = this.getStorageKey(key);
            var storageValue = JSON.stringify(value);
            var storageType = this.localStorageService.getStorageType();
            if (type != null) {
                storageType = type === StorageType.localStorage ? 'localStorage' : 'sessionStorage';
            }
            var service = this.localStorageService;
            service.set(storageKey, storageValue, storageType);
        };
        LocalStorageService.prototype.save2 = function (key, value, type) {
            var storageKey = this.getStorageKey(key);
            var storageType = this.localStorageService.getStorageType();
            if (type != null) {
                storageType = type === StorageType.localStorage ? 'localStorage' : 'sessionStorage';
            }
            var service = this.localStorageService;
            service.set(storageKey, value, storageType);
        };
        LocalStorageService.prototype.get = function (key) {
            var storageKey = this.getStorageKey(key);
            var strItem = this.localStorageService.get(storageKey);
            var item = JSON.parse(strItem);
            return item;
        };
        LocalStorageService.prototype.get2 = function (key) {
            var storageKey = this.getStorageKey(key);
            var strItem = this.localStorageService.get(storageKey);
            return strItem;
        };
        LocalStorageService.prototype.remove = function (key) {
            var storageKey = this.getStorageKey(key);
            this.localStorageService.remove(storageKey);
        };
        LocalStorageService.$inject = ["localStorageService"];
        return LocalStorageService;
    }());
    App.LocalStorageService = LocalStorageService;
    angular.module('app').service('LocalStorageService', LocalStorageService);
    var LocalStorageKeys;
    (function (LocalStorageKeys) {
        LocalStorageKeys[LocalStorageKeys["ShowOrderNumberAfterSave"] = 0] = "ShowOrderNumberAfterSave";
        LocalStorageKeys[LocalStorageKeys["AddToCartIfResultIsOne"] = 1] = "AddToCartIfResultIsOne";
        LocalStorageKeys[LocalStorageKeys["DeliveryChargeAmount"] = 2] = "DeliveryChargeAmount";
        LocalStorageKeys[LocalStorageKeys["ReceiptName"] = 3] = "ReceiptName";
        LocalStorageKeys[LocalStorageKeys["ChalanName"] = 4] = "ChalanName";
        LocalStorageKeys[LocalStorageKeys["CustomerListPageNo"] = 5] = "CustomerListPageNo";
        LocalStorageKeys[LocalStorageKeys["DefaultWarehouse"] = 6] = "DefaultWarehouse";
        LocalStorageKeys[LocalStorageKeys["DealerPriceChange"] = 7] = "DealerPriceChange";
        LocalStorageKeys[LocalStorageKeys["SaleListPageNo"] = 8] = "SaleListPageNo";
        LocalStorageKeys[LocalStorageKeys["DueSaleListPageNo"] = 9] = "DueSaleListPageNo";
        LocalStorageKeys[LocalStorageKeys["PendingSaleListPageNo"] = 10] = "PendingSaleListPageNo";
        LocalStorageKeys[LocalStorageKeys["CreatedSaleListPageNo"] = 11] = "CreatedSaleListPageNo";
        LocalStorageKeys[LocalStorageKeys["ReadyToDepartureSaleListPageNo"] = 12] = "ReadyToDepartureSaleListPageNo";
        LocalStorageKeys[LocalStorageKeys["OnTheWaySaleListPageNo"] = 13] = "OnTheWaySaleListPageNo";
        LocalStorageKeys[LocalStorageKeys["DeliveredSaleListPageNo"] = 14] = "DeliveredSaleListPageNo";
        LocalStorageKeys[LocalStorageKeys["CompletedSaleListPageNo"] = 15] = "CompletedSaleListPageNo";
        LocalStorageKeys[LocalStorageKeys["ProductGroupListPageNo"] = 16] = "ProductGroupListPageNo";
        LocalStorageKeys[LocalStorageKeys["ProductCategoryListPageNo"] = 17] = "ProductCategoryListPageNo";
        LocalStorageKeys[LocalStorageKeys["ProductDetailsListPageNo"] = 18] = "ProductDetailsListPageNo";
        LocalStorageKeys[LocalStorageKeys["OrderState"] = 19] = "OrderState";
        LocalStorageKeys[LocalStorageKeys["DueOrderState"] = 20] = "DueOrderState";
        LocalStorageKeys[LocalStorageKeys["SaleListGridKeys"] = 21] = "SaleListGridKeys";
        LocalStorageKeys[LocalStorageKeys["SearchKeyword"] = 22] = "SearchKeyword";
        LocalStorageKeys[LocalStorageKeys["OrderByKeyword"] = 23] = "OrderByKeyword";
        LocalStorageKeys[LocalStorageKeys["IsAscendingValue"] = 24] = "IsAscendingValue";
        LocalStorageKeys[LocalStorageKeys["IsTaggedSale"] = 25] = "IsTaggedSale";
        LocalStorageKeys[LocalStorageKeys["SaleTag"] = 26] = "SaleTag";
        LocalStorageKeys[LocalStorageKeys["SaleFrom"] = 27] = "SaleFrom";
        LocalStorageKeys[LocalStorageKeys["SearchDate"] = 28] = "SearchDate";
        LocalStorageKeys[LocalStorageKeys["IsOnlyDues"] = 29] = "IsOnlyDues";
        LocalStorageKeys[LocalStorageKeys["startDate"] = 30] = "startDate";
        LocalStorageKeys[LocalStorageKeys["endDate"] = 31] = "endDate";
        LocalStorageKeys[LocalStorageKeys["WarehouseId"] = 32] = "WarehouseId";
        LocalStorageKeys[LocalStorageKeys["CustomerName"] = 33] = "CustomerName";
    })(LocalStorageKeys = App.LocalStorageKeys || (App.LocalStorageKeys = {}));
    var StorageType;
    (function (StorageType) {
        StorageType[StorageType["localStorage"] = 0] = "localStorage";
        StorageType[StorageType["sessionStorage"] = 1] = "sessionStorage";
    })(StorageType = App.StorageType || (App.StorageType = {}));
})(App || (App = {}));

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var App;
(function (App) {
    "use strict";
    var Entity = /** @class */ (function () {
        function Entity() {
            this.id = "00000000-0000-0000-0000-000000000000";
            this.created = new Date().toJSON();
            this.modified = new Date().toJSON();
            this.createdBy = "1";
            this.modifiedBy = "1";
            this.shopId = "1";
            this.createdFrom = "Browser";
        }
        return Entity;
    }());
    App.Entity = Entity;
    var PermissionRequest = /** @class */ (function () {
        function PermissionRequest(name) {
            this.name = name;
        }
        return PermissionRequest;
    }());
    App.PermissionRequest = PermissionRequest;
    var Notification = /** @class */ (function () {
        function Notification() {
        }
        return Notification;
    }());
    App.Notification = Notification;
    var DataRequest = /** @class */ (function () {
        function DataRequest() {
        }
        return DataRequest;
    }());
    App.DataRequest = DataRequest;
    var SearchRequest = /** @class */ (function (_super) {
        __extends(SearchRequest, _super);
        function SearchRequest(keyword, orderBy, isAsc, parentId) {
            if (keyword === void 0) { keyword = ""; }
            if (orderBy === void 0) { orderBy = "Modified"; }
            if (isAsc === void 0) { isAsc = "false"; }
            if (parentId === void 0) { parentId = ""; }
            var _this = _super.call(this) || this;
            _this.keyword = keyword;
            _this.orderBy = orderBy;
            _this.isAscending = isAsc;
            _this.parentId = parentId;
            _this.page = 1;
            return _this;
        }
        return SearchRequest;
    }(DataRequest));
    App.SearchRequest = SearchRequest;
    var PartnerCommunicationSearchRequest = /** @class */ (function (_super) {
        __extends(PartnerCommunicationSearchRequest, _super);
        function PartnerCommunicationSearchRequest(keyword, orderBy, isAsc, parentId) {
            var _this = _super.call(this, keyword, orderBy, isAsc) || this;
            _this.keyword = keyword;
            _this.orderBy = orderBy;
            _this.isAscending = isAsc;
            _this.parentId = parentId;
            _this.page = 1;
            return _this;
        }
        return PartnerCommunicationSearchRequest;
    }(SearchRequest));
    App.PartnerCommunicationSearchRequest = PartnerCommunicationSearchRequest;
    var DetailRequest = /** @class */ (function (_super) {
        __extends(DetailRequest, _super);
        function DetailRequest(id) {
            var _this = _super.call(this) || this;
            _this.id = id;
            return _this;
        }
        DetailRequest.prototype.GetQueryString = function () {
            return "?id=" + this.id;
        };
        return DetailRequest;
    }(DataRequest));
    App.DetailRequest = DetailRequest;
    var PurchaseHistorySearchRequest = /** @class */ (function (_super) {
        __extends(PurchaseHistorySearchRequest, _super);
        function PurchaseHistorySearchRequest(keyword, orderBy, isAsc) {
            return _super.call(this, keyword, orderBy, isAsc) || this;
        }
        return PurchaseHistorySearchRequest;
    }(SearchRequest));
    App.PurchaseHistorySearchRequest = PurchaseHistorySearchRequest;
    var ProductHistorySearchRequest = /** @class */ (function (_super) {
        __extends(ProductHistorySearchRequest, _super);
        function ProductHistorySearchRequest(keyword, orderBy, isAsc) {
            return _super.call(this, keyword, orderBy, isAsc) || this;
        }
        return ProductHistorySearchRequest;
    }(SearchRequest));
    App.ProductHistorySearchRequest = ProductHistorySearchRequest;
    var ProductVarianceSearchRequest = /** @class */ (function (_super) {
        __extends(ProductVarianceSearchRequest, _super);
        function ProductVarianceSearchRequest(keyword, orderBy, isAsc, parentId, partnerShopId) {
            var _this = _super.call(this, keyword, orderBy, isAsc, parentId) || this;
            _this.partnerShopId = partnerShopId;
            return _this;
        }
        return ProductVarianceSearchRequest;
    }(SearchRequest));
    App.ProductVarianceSearchRequest = ProductVarianceSearchRequest;
})(App || (App = {}));

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var App;
(function (App) {
    "use strict";
    var BaseResponse = /** @class */ (function () {
        function BaseResponse(isSuccess, data, message) {
            this.isSuccess = isSuccess;
            this.data = data;
            this.message = message == null ? "Success" : message;
        }
        return BaseResponse;
    }());
    App.BaseResponse = BaseResponse;
    var PermissionResponse = /** @class */ (function (_super) {
        __extends(PermissionResponse, _super);
        function PermissionResponse() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return PermissionResponse;
    }(BaseResponse));
    App.PermissionResponse = PermissionResponse;
    var ErrorResponse = /** @class */ (function (_super) {
        __extends(ErrorResponse, _super);
        function ErrorResponse() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return ErrorResponse;
    }(BaseResponse));
    App.ErrorResponse = ErrorResponse;
    var SearchResponse = /** @class */ (function (_super) {
        __extends(SearchResponse, _super);
        function SearchResponse(data) {
            var _this = _super.call(this, true, data, "Success") || this;
            _this.Models = data.item1;
            _this.Count = data.item2;
            return _this;
        }
        return SearchResponse;
    }(BaseResponse));
    App.SearchResponse = SearchResponse;
})(App || (App = {}));

// Install the angularjs.TypeScript.DefinitelyTyped NuGet package
var App;
(function (App) {
    "use strict";
    var SaveService = /** @class */ (function () {
        function SaveService($q, urlService, webService, auth) {
            this.q = $q;
            this.url = urlService;
            this.web = webService;
            this.auth = auth;
        }
        SaveService.prototype.save = function (data, url) {
            var self = this;
            var deferred = self.q.defer();
            data.created = new Date().toDateString();
            data.modified = new Date().toDateString();
            data.createdBy = self.auth.accountInfo.userName;
            data.createdFrom = "Browser";
            data.modifiedBy = self.auth.accountInfo.userName;
            data.id = "1";
            data.shopId = data.shopId != null ? data.shopId : "1";
            self.web.post(url, data).then(function (result) {
                var response = new App.BaseResponse(true, result.data, "Success");
                deferred.resolve(response);
            }, function (error) {
                deferred.reject(error);
            });
            return deferred.promise;
        };
        SaveService.prototype.update = function (data, url) {
            var self = this;
            var deffered = self.q.defer();
            data.modified = new Date().toDateString();
            data.modifiedBy = self.auth.accountInfo.userName;
            data.shopId = data.shopId != null ? data.shopId : "1";
            self.web.put(url, data).then(function (result) {
                var response = new App.BaseResponse(true, result.data, "Success");
                deffered.resolve(response);
            }, function (error) {
                deffered.reject(error);
            });
            return deffered.promise;
        };
        SaveService.prototype.updateMultiple = function (data, url) {
            var self = this;
            var deffered = self.q.defer();
            for (var i = 0; i < data.length; i++) {
                data[i].modified = new Date().toDateString();
                data[i].modifiedBy = self.auth.accountInfo.userName;
                data[i].shopId = data[i].shopId != null ? data[i].shopId : "1";
            }
            self.web.put(url, data).then(function (result) {
                var response = new App.BaseResponse(true, result.data, "Success");
                deffered.resolve(response);
            }, function (error) {
                deffered.reject(error);
            });
            return deffered.promise;
        };
        SaveService.prototype.delete = function (id, url) {
            var self = this;
            var deffered = self.q.defer();
            self.web.delete(url + "?id=" + id).then(function (result) {
                var response = new App.BaseResponse(true, result.data, "Success");
                deffered.resolve(response);
            }, function (error) {
                deffered.reject(error);
            });
            return deffered.promise;
        };
        SaveService.prototype.upload = function (url, form) {
            var self = this;
            var deferred = self.q.defer();
            var config = {
                headers: { 'Content-Type': undefined },
                transformRequest: angular.identity,
            };
            self.web.upload(url, form, config).then(function (result) {
                var response = new App.BaseResponse(true, result.data, "Success");
                deferred.resolve(response);
            }, function (error) {
                deferred.reject(error);
            });
            return deferred.promise;
        };
        SaveService.$inject = ["$q", "UrlService", "WebService", "AuthService"];
        return SaveService;
    }());
    App.SaveService = SaveService;
    angular.module("app").service("SaveService", SaveService);
})(App || (App = {}));

// Install the angularjs.TypeScript.DefinitelyTyped NuGet package
var App;
(function (App) {
    "use strict";
    var SearchService = /** @class */ (function () {
        function SearchService($q, urlService, webService) {
            this.q = $q;
            this.url = urlService;
            this.web = webService;
            this.id = undefined;
        }
        SearchService.prototype.search = function (request, url) {
            var self = this;
            var deffered = self.q.defer();
            self.web.post(url, request).then(function (result) {
                var response = new App.SearchResponse(result.data);
                deffered.resolve(response);
            }, function (error) {
                deffered.reject(error);
            });
            return deffered.promise;
        };
        SearchService.prototype.get = function (url) {
            var self = this;
            var deffered = self.q.defer();
            self.web.get(url).then(function (result) {
                var response = result.data;
                deffered.resolve(response);
            }, function (error) {
                deffered.reject(error);
            });
            return deffered.promise;
        };
        SearchService.prototype.download = function (url) {
            var self = this;
            var deffered = self.q.defer();
            self.web.get(url).then(function (result) {
                deffered.resolve(result);
            }, function (error) {
                deffered.reject(error);
            });
            return deffered.promise;
        };
        SearchService.$inject = ["$q", "UrlService", "WebService"];
        return SearchService;
    }());
    App.SearchService = SearchService;
    angular.module("app").service("SearchService", SearchService);
})(App || (App = {}));

var App;
(function (App) {
    var SigninController = /** @class */ (function () {
        function SigninController(authService, $state, $rootScope) {
            console.log('i m in signincontroller');
            this.user = new App.SigninRequest("admin@demo1.com", "123456");
            this.authService = authService;
            this.stateService = $state;
            this.rootScopeService = $rootScope;
            var acc = this.authService.accountInfo;
            if (acc && acc.isAuth) {
                if (acc.defaultRoute) {
                    this.stateService.go(acc.defaultRoute);
                }
                else {
                    this.stateService.go("root.home");
                }
            }
        }
        SigninController.prototype.$onInit = function () { console.log('on init signin controller'); };
        SigninController.prototype.signin = function () {
            var _this = this;
            var self = this;
            var signinSuccess = function (response) {
                self.authService.accountInfo = response;
                var acc = response;
                if (acc && acc.isAuth) {
                    if (acc.defaultRoute) {
                        _this.stateService.go(acc.defaultRoute);
                    }
                    else {
                        _this.stateService.go("root.home");
                    }
                }
                self.rootScopeService.$broadcast("SignedIn");
            };
            var signinError = function (error) {
                console.log(error);
                if (error.data.error_description) {
                    alert(error.data.error_description);
                }
                else {
                    alert('Unknown error occurred. Please contact support. Thanks.');
                }
                self.showErrorMessage = true;
            };
            self.authService.signin(new App.SigninRequest(self.user.email, self.user.password)).then(signinSuccess, signinError);
        };
        SigninController.$inject = ["AuthService", "$state", "$rootScope"];
        return SigninController;
    }());
    App.SigninController = SigninController;
    angular.module("app").controller("SigninController", SigninController);
    var NavController = /** @class */ (function () {
        function NavController(authService, $state, $rootScope, url) {
            var self = this;
            self.authService = authService;
            self.stateService = $state;
            self.rootScopeService = $rootScope;
            self.urlService = url;
            var acc = self.authService.accountInfo;
            if (acc && acc.isAuth) {
                self.loadUser();
            }
            else {
                self.isSignedIn = false;
            }
            self.rootScopeService.$on("SignedIn", function (event, args) {
                self.loadUser();
            });
        }
        NavController.prototype.$onInit = function () { };
        NavController.prototype.loadUser = function () {
            var self = this;
            self.user = this.authService.accountInfo;
            self.isSignedIn = this.authService.isSignedIn();
        };
        NavController.prototype.signout = function () {
            var self = this;
            self.authService.signout();
            self.loadUser();
            self.stateService.go("root.signin");
            self.rootScopeService.$broadcast("SignedOut");
        };
        NavController.$inject = ["AuthService", "$state", "$rootScope", "UrlService"];
        return NavController;
    }());
    App.NavController = NavController;
    angular.module("app").controller("NavController", NavController);
    //export class RegisterController {
    //    private authService: AuthService;
    //    user: RegisterRequest;
    //    private stateService: angular.ui.IStateService;
    //    notification: Notification;
    //    isDisabled: boolean;
    //    static $inject = ["AuthService", "$state"];
    //    constructor(
    //        authService: AuthService, $state: angular.ui.IStateService) {
    //        this.authService = authService;
    //        this.stateService = $state;
    //        var acc = this.authService.accountInfo;
    //        if (acc && acc.isAuth) {
    //            this.stateService.go("root.home");
    //        }
    //        this.notification = new Notification();
    //        this.notification.isError = false;
    //        this.notification.isInfo = false;
    //        this.isDisabled = false;
    //    }
    //    register(): void {
    //        var self = this;
    //        self.isDisabled = true;
    //        var successCallback = (response: RegisterResponse): any => {
    //            self.stateService.go("root.signin");
    //            // console.log(response);
    //            self.isDisabled = false;
    //            return response;
    //        };
    //        var errorCallback = (errorResponse: any): any => {
    //            self.isDisabled = false;
    //            console.log(errorResponse);
    //            self.notification.isError = true;
    //            if (errorResponse.status === 500) {
    //                self.notification.message = errorResponse.data.ExceptionMessage;
    //            } else {
    //                if (errorResponse.status === 400 && errorResponse.data.ModelState["model.Password"]) {
    //                    self.notification.message = errorResponse.data.ModelState["model.Password"][0];
    //                } else {
    //                    if (errorResponse.status === 400 && errorResponse.data.ModelState["model.Phone"]) {
    //                        self.notification.message = errorResponse.data.ModelState["model.Phone"][0];
    //                    } else {
    //                        if (errorResponse.status === 400 && errorResponse.data.ModelState[""]) {
    //                            if (errorResponse.data.ModelState[""].length > 1) {
    //                                self.notification.message = errorResponse.data.ModelState[""][1];
    //                            } else
    //                                self.notification.message = errorResponse.data.ModelState[""][0];
    //                        }
    //                        else self.notification.message = errorResponse.data.Message;
    //                    }
    //                }
    //            }
    //        };
    //        self.authService.register(self.user).then(successCallback, errorCallback);
    //    }
    //}
    //angular.module("app").controller("RegisterController", RegisterController);
})(App || (App = {}));

angular.module('app').service("authInterceptorService",
[
    "$q", "$injector", function($q, $injector) {

        var authInterceptorServiceFactory = {};

        var request = function(config) {
            var authService = $injector.get("AuthService");
            config.headers = config.headers || {};
            //  config.headers.Mama = 'mamamama';
            var authData = authService.accountInfo;
            // console.log(authData);
            //var authData = localStorageService.get("authorizationData");
            if (authData) {
                config.headers.Authorization = "Bearer " + authData.accessToken;
                config.headers.ConnectionId = authData.connectionId;
            }

            return config;
        };
        var responseError = function(rejection) {
            if (rejection.status === 401 || rejection.status === 403) {
                console.log('permission rejection');
                console.log(rejection);
                
                var $state  = $injector.get("$state");
                $state.go("root.signin");
            }
            return $q.reject(rejection);
        };

        var response = function (response) {
            console.log(response.headers('content-length'));
            return $q.resolve(response);
        }


        authInterceptorServiceFactory["request"] = request;
        //authInterceptorServiceFactory['response'] = response;
        authInterceptorServiceFactory["responseError"] = responseError;

        return authInterceptorServiceFactory;
    }
]);
angular.module("app").config([
    '$httpProvider', function($httpProvider) {
        $httpProvider.interceptors.push("authInterceptorService");
    }
]);

angular.module("app").service('loaderHttpInterceptor', ["$q","$rootScope",function ($q, $rootScope) {

        var numLoadings = 0;

        return {
            request: function (config) {

                numLoadings++;

                // Show loader
                $rootScope.$broadcast("loader_show");
                return config || $q.when(config);

            },
            response: function (response) {

                if ((--numLoadings) === 0) {
                    // Hide loader
                    $rootScope.$broadcast("loader_hide");
                }

                return response || $q.when(response);

            },
            responseError: function (response) {

                if (!(--numLoadings)) {
                    // Hide loader
                    $rootScope.$broadcast("loader_hide");
                }

                return $q.reject(response);
            }
        };
    }]);
angular.module("app").config([
    '$httpProvider', function ($httpProvider) {
        $httpProvider.interceptors.push("loaderHttpInterceptor");
    }
]);

angular.module("app").directive("loader",
    function ($rootScope) {
        return function ($scope, element, attrs) {
            $scope.$on("loader_show",
                function () {
                    return element.show();
                });
            return $scope.$on("loader_hide",
                function () {
                    return element.hide();
                });
        };
    }
);

angular.module("app").run([
    "AuthService", 
    function(authService){
        if (authService.isSignedIn()) {
            // authService.Signout();
        }
        authService.fillAuthData();
    }
]);



angular.module("app").run([
    "$rootScope", "$state", "permissionService", "AuthService",
    function($rootScope, $state, permissionService, authService) {
        $rootScope.$on('$viewContentLoaded', function (event) {
            var element = jQuery("#toggleButtonHtla");
            var active = element.hasClass('is-active');
            var visible = element.is(":visible");
            if (active && visible) {
                element.click();
            }
        });
    }
]);
var App;
(function (App) {
    var SigninRequest = /** @class */ (function () {
        function SigninRequest(email, password) {
            this.email = email;
            this.password = password;
        }
        return SigninRequest;
    }());
    App.SigninRequest = SigninRequest;
    var RegisterRequest = /** @class */ (function () {
        function RegisterRequest(email, password, confirmPassword, firstName, lastName, phone) {
            this.email = email;
            this.password = password;
            this.confirmPassword = confirmPassword;
            this.firstName = firstName;
            this.lastName = lastName;
            this.phone = phone;
        }
        return RegisterRequest;
    }());
    App.RegisterRequest = RegisterRequest;
    var UserInfo = /** @class */ (function () {
        function UserInfo() {
        }
        return UserInfo;
    }());
    App.UserInfo = UserInfo;
    var RegisterResponse = /** @class */ (function () {
        function RegisterResponse(isSuccess, data, message) {
            this.isSuccess = isSuccess;
            this.data = data;
            this.message = message == null ? "Success" : message;
        }
        return RegisterResponse;
    }());
    App.RegisterResponse = RegisterResponse;
    var Resource = /** @class */ (function () {
        function Resource() {
        }
        return Resource;
    }());
    App.Resource = Resource;
})(App || (App = {}));

var App;
(function (App) {
    var AuthService = /** @class */ (function () {
        function AuthService($q, localStorageService, urlService, webService) {
            this.q = $q;
            this.url = urlService;
            this.web = webService;
            this.localStorageService = localStorageService;
        }
        AuthService.prototype.signin = function (request) {
            var self = this;
            self.signout();
            var deffered = self.q.defer();
            var data = "username=" + request.email + "&password=" + request.password + "&grant_type=password";
            self.web.postUrlencodedForm(self.url.signinUrl, data).then(function (result) {
                self.accountInfo = new App.UserInfo();
                self.accountInfo.userName = result.data.userName;
                self.accountInfo.id = result.data.id;
                self.accountInfo.role = result.data.role;
                self.accountInfo.authToken = result.data.AuthToken;
                self.accountInfo.accessToken = result.data.access_token;
                self.accountInfo.isAuth = true;
                self.accountInfo.connectionId = "";
                self.accountInfo.shopId = result.data.shopId;
                self.accountInfo.warehouseId = result.data.warehouseId;
                self.accountInfo.resources = JSON.parse(result.data.resources);
                self.accountInfo.defaultRoute = result.data.defaultRoute;
                self.localStorageService.set("authorizationData", self.accountInfo);
                self.localStorageService.set("ChalanName", result.data.ChalanName);
                self.localStorageService.set("ReceiptName", result.data.ReceiptName);
                self.localStorageService.set("ShowOrderNumberAfterSave", (result.data.ShowOrderNumberAfterSave === 'True') ? true : false);
                self.localStorageService.set("AddToCartIfResultIsOne", (result.data.AddToCartIfResultIsOne === 'True') ? true : false);
                self.localStorageService.set("DeliveryChargeAmount", parseInt(result.data.DeliveryChargeAmount));
                deffered.resolve(self.accountInfo);
                //self.web.get(self.url.sideMenuUrl).then(result => {
                //    console.log(result);
                //    self.accountInfo.routes = result.data;
                //    deffered.resolve(self.accountInfo);
                //}, error => {
                //    console.log(error);
                //});               
            }, function (error) {
                deffered.reject(error);
            });
            return deffered.promise;
        };
        AuthService.prototype.signinCore = function (request) {
            var self = this;
            self.signout();
            var deffered = self.q.defer();
            var data = {
                'username': request.email,
                'password': request.password
            };
            self.web.post(self.url.signinUrl, data).then(function (result) {
                console.log(result);
                self.accountInfo = new App.UserInfo();
                self.accountInfo.userName = result.data.userName;
                self.accountInfo.id = result.data.id;
                self.accountInfo.role = result.data.role;
                self.accountInfo.authToken = result.data.AuthToken;
                self.accountInfo.accessToken = result.data.access_token;
                self.accountInfo.isAuth = true;
                self.accountInfo.connectionId = "";
                self.accountInfo.shopId = result.data.shopId;
                self.accountInfo.warehouseId = result.data.warehouseId;
                self.accountInfo.resources = JSON.parse(result.data.resources);
                self.accountInfo.defaultRoute = result.data.defaultRoute;
                self.localStorageService.set("authorizationData", self.accountInfo);
                deffered.resolve(self.accountInfo);
            }, function (error) {
                deffered.reject(error);
            });
            return deffered.promise;
        };
        AuthService.prototype.signout = function () {
            this.localStorageService.remove("authorizationData");
            this.accountInfo = null;
        };
        AuthService.prototype.updateUserInfo = function () {
            this.localStorageService.set("authorizationData", this.accountInfo);
            this.fillAuthData();
        };
        AuthService.prototype.fillAuthData = function () {
            var authData = this.localStorageService.get("authorizationData");
            if (authData) {
                this.accountInfo = (authData);
            }
        };
        AuthService.prototype.isSignedIn = function () {
            if (this.accountInfo == null) {
                return false;
            }
            return this.accountInfo.isAuth;
        };
        //loadMenu(): void {
        //    var self = this;
        //    //self.UserInfo.Routes = result.data.Routes;
        //    self.web.get(self.url.sideMenuUrl).then(result => {
        //        console.log(result);
        //        self.accountInfo.routes = result.data;
        //    }, error => {
        //        console.log(error);
        //    });
        //}
        AuthService.prototype.register = function (request) {
            var self = this;
            self.signout();
            var deffered = self.q.defer();
            self.web.post(self.url.registerUrl, request).then(function (result) {
                var response = new App.RegisterResponse(true, result.data, "Success");
                response.userName = result.data.userName;
                response.isRegistered = true;
                deffered.resolve(response);
            }, function (error) {
                deffered.reject(error);
            });
            return deffered.promise;
        };
        AuthService.prototype.setDefaultPassword = function (data) {
            var self = this;
            var deffered = self.q.defer();
            self.web.post(self.url.setDefaultPasswordUrl, data).then(function (result) {
                deffered.resolve(result);
            }, function (error) {
                deffered.reject(error);
            });
            return deffered.promise;
        };
        AuthService.$inject = ["$q", "localStorageService", "UrlService", "WebService"];
        return AuthService;
    }());
    App.AuthService = AuthService;
    angular.module("app").service("AuthService", AuthService);
    var PermissionService = /** @class */ (function () {
        function PermissionService($q, securityUrlService, webService) {
            this.q = $q;
            this.securityUrlService = securityUrlService;
            this.web = webService;
        }
        PermissionService.$inject = ["$q", "UrlService", "WebService"];
        return PermissionService;
    }());
    App.PermissionService = PermissionService;
    angular.module("app").service("permissionService", PermissionService);
})(App || (App = {}));

var App;
(function (App) {
    "use strict";
    var UrlService = /** @class */ (function () {
        function UrlService() {
            this.clientSubFolder = "";
            var identitySuffix = "";
            var inventorySuffix = "";
            var clientSuffix = "";
            var host = document.location.host;
            this.setServers2();
            //this.setLocalhost(); 
            //this.setLocalhostCore();
            //this.setServerCore();
            //this.setLocalIIS(identitySuffix,inventorySuffix);
            this.signalrUrl = this.signalrBaseUrl + "/signalr";
            this.registerUrl = this.identityBaseApi + "/Account/Register";
            this.setDefaultPasswordUrl = this.identityBaseApi + "/Account/SetDefaultPassword";
            // this.sideMenuUrl = this.identityBaseApi + "/SideMenu" + "/Get";
            this.profileUrl = this.identityBaseApi + "/Profile/Details";
            this.changePasswordUrl = this.identityBaseApi + "/Account/ChangePassword";
            this.applicationRoles = this.identityBaseApi + "/ApplicationRoles";
            this.applicationRoleQuery = this.identityBaseApi + "/ApplicationRoleQuery";
            this.applicationRoleQueryData = this.applicationRoleQuery + "/Data";
            this.roleDropdown = this.applicationRoleQuery + "/RoleDropdown";
            this.applicationUsers = this.identityBaseApi + "/ApplicationUsers";
            this.applicationUserQuery = this.identityBaseApi + "/ApplicationUserQuery";
            this.applicationUserQueryData = this.applicationUserQuery + "/Data";
            this.applicationUserRoles = this.identityBaseApi + "/ApplicationUserRoles";
            this.applicationUserRoleQuery = this.identityBaseApi + "/ApplicationUserRoleQuery";
            this.applicationUserRoleQueryData = this.applicationUserRoleQuery + "/Data";
            this.applicationResources = this.identityBaseApi + "/ApplicationResources";
            this.applicationResourceQuery = this.identityBaseApi + "/ApplicationResourceQuery";
            this.applicationResourceQueryData = this.applicationResourceQuery + "/Data";
            this.resourceDropdown = this.applicationResourceQuery + "/ResourceDropdown";
            this.applicationPermissions = this.identityBaseApi + "/ApplicationPermissions";
            this.applicationPermissionQuery = this.identityBaseApi + "/ApplicationPermissionQuery";
            this.applicationPermissionQueryData = this.applicationPermissionQuery + "/Data";
            // employees
            this.employee = this.identityBaseApi + "/Employee";
            this.employeeQuery = this.identityBaseApi + "/EmployeeQuery";
            this.employeeQueryReport = this.employeeQuery + "/Report";
            // shops
            this.shop = this.identityBaseApi + "/Shop";
            this.shopQuery = this.identityBaseApi + "/ShopQuery";
            this.shopQueryDropdown = this.inventoryBaseApi + "/ShopQuery" + "/Dropdown";
            // inventory
            this.dashboard = this.inventoryBaseApi + "/DashboardQuery";
            //Sms
            this.sms = this.inventoryBaseApi + "/Sms";
            this.smsQuery = this.inventoryBaseApi + "/SmsQuery";
            //HookDetail
            this.hookDetail = this.inventoryBaseApi + "/HookDetail";
            this.hookDetailQuery = this.inventoryBaseApi + "/HookDetailQuery";
            //SmsHook
            this.smsHook = this.inventoryBaseApi + "/SmsHook";
            this.smsHookQuery = this.inventoryBaseApi + "/SmsHookQuery";
            //Sms History
            this.smsHistory = this.inventoryBaseApi + "/SmsHistory";
            this.smsHistoryQuery = this.inventoryBaseApi + "/SmsHistoryQuery";
            // product group
            this.productGroup = this.inventoryBaseApi + "/ProductGroup";
            this.productGroupQuery = this.inventoryBaseApi + "/ProductGroupQuery";
            this.productGroupQueryData = this.productGroupQuery + "/Data";
            this.productGroupQueryReport = this.productGroupQuery + "/Report";
            // product category
            this.barcodeImage = this.inventoryBaseApi + "/BarcodeImage";
            this.product = this.inventoryBaseApi + "/ProductCategory";
            this.productQuery = this.inventoryBaseApi + "/ProductCategoryQuery";
            this.productQueryData = this.productQuery + "/Data";
            this.productQueryReport = this.productQuery + "/Report";
            // product detail
            this.productDetail = this.inventoryBaseApi + "/ProductDetail";
            this.productDetailQuery = this.inventoryBaseApi + "/ProductDetailQuery";
            this.productDetailQueryReport = this.productDetailQuery + "/Report";
            this.productDetailQueryBarcode = this.productDetailQuery + "/Barcode";
            // supplier
            this.supplierQuery = this.inventoryBaseApi + "/SupplierQuery";
            this.supplier = this.inventoryBaseApi + "/Supplier";
            this.supplierQueryData = this.supplierQuery + "/Data";
            this.supplierQueryReport = this.supplierQuery + "/Report";
            // purchase
            this.purchase = this.inventoryBaseApi + "/Purchase";
            this.purchaseQuery = this.inventoryBaseApi + "/PurchaseQuery";
            this.purchaseQueryData = this.purchaseQuery + "/Data";
            this.purchaseQueryReport = this.purchaseQuery + "/Report";
            // sale
            this.sale = this.inventoryBaseApi + "/Sale";
            this.saleQuery = this.inventoryBaseApi + "/SaleQuery";
            this.saleQueryData = this.saleQuery + "/Data";
            this.saleQueryReport = this.saleQuery + "/Report";
            this.saleDetailQuery = this.inventoryBaseApi + "/SaleDetailQuery";
            // customer
            this.customer = this.inventoryBaseApi + "/Customer";
            this.customerQuery = this.inventoryBaseApi + "/CustomerQuery";
            this.customerQueryBarcode = this.customerQuery + "/Barcode";
            this.customerQueryReport = this.customerQuery + "/Report";
            this.customerAddress = this.inventoryBaseApi + "/CustomerAddress";
            this.customerAddressQuery = this.inventoryBaseApi + "/CustomerAddressQuery";
            this.customerFeedback = this.inventoryBaseApi + "/CustomerFeedback";
            this.customerFeedbackQuery = this.inventoryBaseApi + "/CustomerFeedbackQuery";
            // brand
            this.brand = this.inventoryBaseApi + "/Brand";
            this.brandQuery = this.inventoryBaseApi + "/BrandQuery";
            this.brandQueryReport = this.brandQuery + "/Report";
            // operation
            this.operationLog = this.inventoryBaseApi + "/OperationLog";
            this.operationLogsQuery = this.inventoryBaseApi + "/OperationLogQuery";
            this.operationLogDetail = this.inventoryBaseApi + "/OperationLogDetail";
            this.operationLogDetailQuery = this.inventoryBaseApi + "/OperationLogDetailQuery";
            // myshop
            this.myShop = this.inventoryBaseApi + "/MyShop";
            this.myShopQuery = this.inventoryBaseApi + "/MyShopQuery";
            this.accountHead = this.inventoryBaseApi + "/AccountHead";
            this.accountHeadQuery = this.inventoryBaseApi + "/AccountHeadQuery";
            this.accountHeadQueryReport = this.accountHeadQuery + "/Report";
            // new url pattern
            this.transaction = this.inventoryBaseApi + "/Transaction";
            this.transactionQuery = this.inventoryBaseApi + "/TransactionQuery";
            this.transactionQueryReport = this.transactionQuery + "/Report";
            //dealer:
            this.dealer = this.inventoryBaseApi + "/Dealer";
            this.dealerQuery = this.inventoryBaseApi + "/DealerQuery";
            //courier
            this.courier = this.inventoryBaseApi + "/Courier";
            this.courierQuery = this.inventoryBaseApi + "/CourierQuery";
            //accountInfo
            this.accountInfo = this.inventoryBaseApi + "/AccountInfo";
            this.accountInfoQuery = this.inventoryBaseApi + "/AccountInfoQuery";
            this.dealerProduct = this.inventoryBaseApi + "/DealerProduct";
            this.dealerProductQuery = this.inventoryBaseApi + "/DealerProductQuery";
            //employeeInfo
            this.employeeInfo = this.inventoryBaseApi + "/EmployeeInfo";
            this.employeeInfoQuery = this.inventoryBaseApi + "/EmployeeInfoQuery";
            this.supplierProduct = this.inventoryBaseApi + "/SupplierProduct";
            this.supplierProductQuery = this.inventoryBaseApi + "/SupplierProductQuery";
            this.warehouse = this.inventoryBaseApi + "/Warehouse";
            this.warehouseQuery = this.inventoryBaseApi + "/WarehouseQuery";
            this.stocktransfer = this.inventoryBaseApi + "/StockTransfer";
            this.stocktransferQuery = this.inventoryBaseApi + "/StockTransferQuery";
            //Damage
            this.damage = this.inventoryBaseApi + "/Damage";
            this.damageQuery = this.inventoryBaseApi + "/DamageQuery";
            // File upload
            this.uploadImage = this.inventoryBaseApi + "/File/UploadImage";
            this.getImage = this.inventoryBaseApi + "/File/GetImage";
            // installment
            this.installmentQuery = this.inventoryBaseApi + "/InstallmentQuery";
            this.installmentDetailQuery = this.inventoryBaseApi + "/InstallmentDetailQuery";
        }
        UrlService.prototype.setServers = function (identitySuffix, inventorySuffix) {
            var identityfolder = "/bizbook-identity";
            var identityServer = "http://bizbook-server.westus2.cloudapp.azure.com";
            this.identityBaseUrl = identityServer + identityfolder + identitySuffix;
            this.identityBaseApi = this.identityBaseUrl + "/api";
            var inventoryfolder = "/bizbook-inventory";
            var inventoryServer = "http://bizbook-server.westus2.cloudapp.azure.com";
            this.inventoryBaseUrl = inventoryServer + inventoryfolder + inventorySuffix;
            this.inventoryBaseApi = this.inventoryBaseUrl + "/api";
            this.signalrBaseUrl = this.inventoryBaseUrl;
        };
        UrlService.prototype.setServers2 = function () {
            var identityServer = "http://identity.bizbook365.com";
            this.identityBaseUrl = identityServer;
            this.identityBaseApi = this.identityBaseUrl + "/api";
            this.signinUrl = this.identityBaseUrl + "/token";
            var inventoryServer = "http://api.bizbook365.com";
            this.inventoryBaseUrl = inventoryServer;
            this.inventoryBaseApi = this.inventoryBaseUrl + "/api";
            this.signalrBaseUrl = inventoryServer;
        };
        UrlService.prototype.setLocalhost = function () {
            var identityServer = "http://localhost:61923";
            this.identityBaseUrl = identityServer;
            this.identityBaseApi = this.identityBaseUrl + "/api";
            this.signinUrl = this.identityBaseUrl + "/token";
            var inventoryServer = "http://localhost:61924";
            this.inventoryBaseUrl = inventoryServer;
            this.inventoryBaseApi = this.inventoryBaseUrl + "/api";
            this.signalrBaseUrl = inventoryServer;
        };
        UrlService.prototype.setLocalhostCore = function () {
            var identityServer = "http://localhost:52894";
            this.identityBaseUrl = identityServer;
            this.identityBaseApi = this.identityBaseUrl + "/api";
            this.signinUrl = this.identityBaseApi + "/token";
            var inventoryServer = "http://localhost:52894";
            this.inventoryBaseUrl = inventoryServer;
            this.inventoryBaseApi = this.inventoryBaseUrl + "/api";
            this.signalrBaseUrl = inventoryServer;
        };
        UrlService.prototype.setServerCore = function () {
            var identityServer = "http://bizbook.live";
            this.identityBaseUrl = identityServer;
            this.identityBaseApi = this.identityBaseUrl + "/api";
            this.signinUrl = this.identityBaseApi + "/token";
            var inventoryServer = "http://bizbook.live";
            this.inventoryBaseUrl = inventoryServer;
            this.inventoryBaseApi = this.inventoryBaseUrl + "/api";
            this.signalrBaseUrl = inventoryServer;
        };
        return UrlService;
    }());
    App.UrlService = UrlService;
    angular.module("app").service("UrlService", UrlService);
})(App || (App = {}));

var App;
(function (App) {
    var WebService = /** @class */ (function () {
        function WebService($q, $http) {
            this.qService = $q;
            this.httpService = $http;
        }
        WebService.prototype.post = function (url, data) {
            var self = this;
            var deffered = self.qService.defer();
            self.httpService.post(url, data).then(function (result) {
                if (result.status === 200) {
                    deffered.resolve(result);
                }
                else {
                    deffered.reject(result);
                }
            }, function (error) {
                deffered.reject(error);
            });
            //self.httpService.post(url, data).success(
            //    (data: any,
            //        status: number,
            //        headers: (headerName: string) => string,
            //        config: ng.IRequestConfig): void => {
            //        if (status == 200 && headers('location') == null && config.timeout > 200) {
            //            //do something with data
            //        }
            //        deffered.resolve(data);
            //    })
            //    .error((data: any, status: number, headers: (headerName: string) => string, config: ng.IRequestConfig):
            //        void => {
            //            if (status == 500 && headers('myAuth') != null && config.method == 'GET') {
            //                // write to log
            //            }
            //            return deffered.reject(data);
            //        });
            return deffered.promise;
        };
        WebService.prototype.put = function (url, data) {
            var self = this;
            var deffered = self.qService.defer();
            self.httpService.put(url, data).then(function (result) {
                if (result.status === 200) {
                    deffered.resolve(result);
                }
                else {
                    deffered.reject(result);
                }
            }, function (error) {
                deffered.reject(error);
            });
            return deffered.promise;
        };
        WebService.prototype.postUrlencodedForm = function (url, data) {
            var self = this;
            var deffered = self.qService.defer();
            var config = { headers: { 'Content-Type': "application/x-www-form-urlencoded" } };
            self.httpService.post(url, data, config).then(function (result) {
                if (result.status === 200) {
                    deffered.resolve(result);
                }
                else {
                    deffered.reject(result);
                }
            }, function (error) {
                deffered.reject(error);
            });
            return deffered.promise;
        };
        WebService.prototype.upload = function (url, data, config) {
            var self = this;
            var deferred = self.qService.defer();
            self.httpService.post(url, data, config).then(function (result) {
                console.log(result);
                deferred.resolve(result);
            }, function (error) {
                deferred.reject(error);
            });
            return deferred.promise;
        };
        WebService.prototype.get = function (url) {
            var self = this;
            var deffered = self.qService.defer();
            self.httpService.get(url).then(function (result) {
                if (result.status === 200) {
                    deffered.resolve(result);
                }
                else {
                    deffered.reject(result);
                }
            }, function (error) {
                deffered.reject(error);
            });
            return deffered.promise;
        };
        WebService.prototype.delete = function (url) {
            var self = this;
            var deffered = self.qService.defer();
            self.httpService.delete(url).then(function (result) {
                if (result.status === 200) {
                    deffered.resolve(result);
                }
                else {
                    deffered.reject(result);
                }
            }, function (error) {
                deffered.reject(error);
            });
            return deffered.promise;
        };
        WebService.$inject = ["$q", "$http"];
        return WebService;
    }());
    App.WebService = WebService;
    angular.module("app").service("WebService", WebService);
})(App || (App = {}));

angular.module('app').service('Excel',
    ["$window", function ($window) {
        var uri = 'data:application/vnd.ms-excel;base64,',
            template =
                '<html xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:x="urn:schemas-microsoft-com:office:excel" xmlns="http://www.w3.org/TR/REC-html40"><head><!--[if gte mso 9]><xml><x:ExcelWorkbook><x:ExcelWorksheets><x:ExcelWorksheet><x:Name>{worksheet}</x:Name><x:WorksheetOptions><x:DisplayGridlines/></x:WorksheetOptions></x:ExcelWorksheet></x:ExcelWorksheets></x:ExcelWorkbook></xml><![endif]--></head><body><table>{table}</table></body></html>',
            base64 = function (s) { return $window.btoa(unescape(encodeURIComponent(s))); },
            format = function (s, c) { return s.replace(/{(\w+)}/g, function (m, p) { return c[p]; }) };
        return {
            tableToExcel: function (tableId, worksheetName) {
                var table = document.getElementById(tableId);
                var ctx = { worksheet: worksheetName, table: table.innerHTML };
                var href = uri + base64(format(template, ctx));
                return href;
            }
        };
    }]);