var App;
(function (App) {
    var Display = /** @class */ (function () {
        function Display() {
        }
        Display.log = function (m, params) {
            if (params) {
                console.log(m, params);
            }
            else {
                console.log(m);
            }
        };
        return Display;
    }());
    App.Display = Display;
    var Dictionary = /** @class */ (function () {
        function Dictionary() {
            this.items = [];
        }
        Dictionary.prototype.set = function (k, v) {
            this.items[k] = v;
            Display.log(this.items);
        };
        Dictionary.prototype.get = function (k) {
            var item = this.items[k];
            return item;
        };
        return Dictionary;
    }());
    App.Dictionary = Dictionary;
    var KeyValuePair = /** @class */ (function () {
        function KeyValuePair() {
        }
        return KeyValuePair;
    }());
    App.KeyValuePair = KeyValuePair;
    var Guid = /** @class */ (function () {
        function Guid() {
        }
        Guid.newGuid = function () {
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                var r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);
                return v.toString(16);
            });
        };
        Guid.defaultGuid = function () {
            return '00000000-0000-0000-0000-000000000000';
        };
        return Guid;
    }());
    App.Guid = Guid;
    var BaseController = /** @class */ (function () {
        function BaseController($location, $state, $stateParams, url, search, save, authService, commandUrl, queryUrl, excel) {
            this.headers = ["id", "modified"];
            this.keys = [];
            this.orderStates = [];
            this.showChart = false;
            this.thanas = ["All", "Dhaka Cantt.", "Dhanmondi", "Gulshan", "Jatrabari",
                "Keraniganj", "Khilgaon", "Lalbag", "Mirpur", "Mohammadpur", "Motijheel", "Nawabganj",
                "New market", "Palton", "Ramna", "Sabujbag", "Sutrapur", "Tejgaon", "Uttara"];
            this.downloadPdf = function (id) {
                var name = Guid.newGuid().toString();
                var jspdf = window["jsPDF"];
                var pdf = new jspdf('p', 'mm', 'a4');
                var printContents = document.getElementById(id);
                pdf.addHTML(printContents, function () {
                    pdf.save(name + '.pdf');
                });
                console.log(printContents);
            };
            this.location = $location;
            this.url = url;
            this.subUrlPath = url.clientSubFolder;
            this.commandUrl = commandUrl;
            this.queryUrl = queryUrl;
            this.searchService = search;
            this.saveService = save;
            this.authService = authService;
            this.stateService = $state;
            this.Excel = excel;
            this.stateParams = $stateParams;
            var acc = this.authService.accountInfo;
            this.dropdown = {};
            if (acc && acc.isAuth) {
                this.loadUser();
            }
            this.orderStates = [
                "All", "Pending", "Created", "ReadyToDeparture", "OnTheWay", "Delivered", "Completed", "Cancel"
            ];
            // this.startDate = new Date();
            this.startDatePopUp = false;
            //  this.endDate = new Date();
            this.endDatePopUp = false;
            this.activate();
        }
        BaseController.prototype.$onInit = function () { };
        BaseController.prototype.newGuid = function () {
            return Guid.newGuid();
        };
        BaseController.prototype.loadUser = function () {
            var self = this;
            self.user = this.authService.accountInfo;
        };
        BaseController.prototype.goto = function (page) {
            this.searchRequest.page = page;
            this.search();
        };
        BaseController.prototype.createInstance = function (c) {
            return new c();
        };
        BaseController.prototype.activate = function () {
            this.model = this.createInstance(App.Entity);
            this.model.id = "";
            this.models = [];
            this.isUpdateMode = false;
            this.totalCount = 0;
            this.searchRequest = new App.SearchRequest("", "Modified", "False", "");
            this.searchRequest.page = 1;
            this.startDate = new Date();
            this.endDate = new Date();
            //this.search();
        };
        BaseController.prototype.loadData = function () {
            var self = this;
            if (self.startDate != null) {
                self.searchRequest.startDate = self.startDate.toDateString();
                self.localStorageService.save(App.LocalStorageKeys.startDate, self.startDate);
            }
            if (self.endDate != null) {
                self.searchRequest.endDate = self.endDate.toDateString();
                self.localStorageService.save(App.LocalStorageKeys.endDate, self.endDate);
            }
            this.search();
        };
        BaseController.prototype.setStartDate = function () {
            var fromdate = this.localStorageService.get(App.LocalStorageKeys.startDate);
            if (!fromdate) {
                fromdate = new Date();
                this.localStorageService.save(App.LocalStorageKeys.startDate, fromdate);
            }
            else {
                fromdate = new Date(fromdate);
            }
            //let fd = this.searchRequest.startDate = fromdate
            this.searchRequest.startDate = fromdate.toDateString();
            this.startDate = fromdate;
            console.log('Save Start Date' + ' ' + fromdate);
        };
        BaseController.prototype.setEndDate = function () {
            var todate = this.localStorageService.get(App.LocalStorageKeys.endDate);
            if (!todate) {
                todate = new Date();
                this.localStorageService.save(App.LocalStorageKeys.endDate, todate);
            }
            else {
                todate = new Date(todate);
            }
            this.searchRequest.endDate = todate.toDateString();
            this.endDate = todate;
            console.log('Save To Date' + ' ' + todate);
        };
        BaseController.prototype.search = function () {
            var self = this;
            var successCallback = function (response) {
                console.log(response);
                self.totalCount = response.Count;
                self.models = response.Models;
                if (self.models.length === 0) {
                    console.log('No search result found');
                    alert('No search result found');
                }
                else {
                    self.csvModels = [];
                    for (var i = 0; i < self.models.length; i++) {
                        self.csvModels.push(self.generateCsvModel(self.models[i]));
                    }
                }
                self.searchRequest.totalPage = Math.ceil(response.Count / 10);
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.searchService
                .search(self.searchRequest, self.queryUrl + "/Search")
                .then(successCallback, errorCallback);
        };
        BaseController.prototype.generateCsvModel = function (m) {
            var self = this;
            var csvData = {};
            for (var j = 0; j < self.headers.length; j++) {
                var head = self.headers[j];
                csvData[head] = m[head];
            }
            return csvData;
        };
        BaseController.prototype.generateCsvModels = function () {
            var self = this;
            self.headers = [];
            for (var k = 0; k < self.keys.length; k++) {
                if (self.keys[k].value === true) {
                    self.headers.push(self.keys[k].key);
                }
            }
            self.csvModels = [];
            for (var i = 0; i < self.models.length; i++) {
                self.csvModels.push(self.generateCsvModel(self.models[i]));
            }
        };
        BaseController.prototype.ensureKeysAreSaved = function (lskValue, m) {
            var self = this;
            self.keys = self.localStorageService.get(lskValue);
            if (self.keys == null) {
                var dictionary = [];
                var propertyNames = self.getPropertyNames(m);
                for (var j = 0; j < propertyNames.length; j++) {
                    var property = { key: propertyNames[j], value: true };
                    dictionary.push(property);
                }
                self.localStorageService.save(lskValue, dictionary);
                self.keys = self.localStorageService.get(lskValue);
            }
        };
        BaseController.prototype.edit = function (id) {
            var self = this;
            var onSuccess = function (data) {
                self.model = data.data;
            };
            var onError = function (error) {
                console.log(error);
                alert('Error occurred');
            };
            var searchRequest = new App.SearchRequest();
            searchRequest.id = id;
            var url = self.queryUrl + '/Detail';
            if (id && id.length > 0) {
                url += '?id=' + id;
            }
            self.searchService.search(null, url).then(onSuccess, onError);
        };
        BaseController.prototype.editWithCallBack = function (id, callBack) {
            var self = this;
            var onSuccess = function (data) {
                self.model = data.data;
                callBack(self.model, self);
            };
            var onError = function (error) {
                console.log(error);
                alert('Error occurred');
            };
            var searchRequest = new App.SearchRequest();
            searchRequest.id = id;
            var url = self.queryUrl + '/Detail';
            if (id && id.length > 0) {
                url += '?id=' + id;
            }
            self.searchService.search(null, url).then(onSuccess, onError);
        };
        BaseController.prototype.edit2 = function (id) {
            var self = this;
            var onSuccess = function (data) {
                self.model = data.data;
            };
            var onError = function (error) {
                console.log(error);
                alert('Error occurred');
            };
            var searchRequest = new App.SearchRequest();
            searchRequest.id = id;
            var url = self.queryUrl + '/SearchDetail';
            self.searchService.search(searchRequest, url).then(onSuccess, onError);
        };
        BaseController.prototype.save = function () {
            var self = this;
            if (self.isUpdateMode)
                self.update();
            else {
                var successCallback = function (response) {
                    self.activate();
                };
                var errorCallback = function (error) {
                    console.log(error);
                    if (error.status === 500) {
                        alert(error.data.exceptionMessage);
                    }
                };
                self.saveService.save(self.model, self.commandUrl + "/Add").then(successCallback, errorCallback);
            }
        };
        BaseController.prototype.update = function () {
            var self = this;
            var successCallback = function (response) {
                self.activate();
                self.back();
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.saveService.update(self.model, self.commandUrl + "/Edit").then(successCallback, errorCallback);
        };
        BaseController.prototype.updateWithCallBack = function (m, fn, e) {
            var self = this;
            var successCallback = function (response) {
                fn();
            };
            var errorCallback = function (error) {
                console.log(error);
                e();
            };
            self.saveService.update(m, self.commandUrl + "/Edit").then(successCallback, errorCallback);
        };
        BaseController.prototype.update2 = function (p) {
            var self = this;
            var succsessCallBack = function () {
                p["message"] = "Updated Now";
            };
            var error = function (e) {
                alert(e);
            };
            self.updateWithCallBack(p, succsessCallBack, error);
        };
        BaseController.prototype.delete = function (id) {
            var self = this;
            var successCallback = function (response) {
                self.activate();
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.saveService.delete(id, self.commandUrl + "/Delete").then(successCallback, errorCallback);
        };
        BaseController.prototype.loadDropdown = function (name, id) {
            if (id === void 0) { id = ""; }
            var self = this;
            var successCallback = function (response) {
                self.dropdown[name] = response.Models;
                console.log(response.Models);
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            //if (id.length > 0) {
            //    self..load(name, id).then(<any>successCallback, errorCallback);
            //} else {
            //    self..load(name).then(<any>successCallback, errorCallback);
            //}
        };
        BaseController.prototype.pad = function (num, size) {
            var s = num + "";
            while (s.length < size)
                s = "0" + s;
            return s;
        };
        BaseController.prototype.generateOrderNumber = function () {
            var date = new Date();
            var orderNumber = this.pad(date.getMilliseconds(), 3) +
                '' +
                this.pad(date.getMinutes(), 2) +
                '-' +
                this.pad(date.getHours(), 2) +
                this.pad(date.getDate(), 2) +
                this.pad(date.getMonth() + 1, 2) +
                '-' +
                date.getFullYear();
            return orderNumber;
        };
        BaseController.prototype.back = function () {
            window.history.back();
        };
        BaseController.prototype.openStartDate = function () {
            this.startDatePopUp = true;
        };
        BaseController.prototype.openEndDate = function () {
            this.endDatePopUp = true;
        };
        BaseController.prototype.report = function () {
            var self = this;
            var url = self.queryUrl + "/Report";
            window.open(url, "_blank", "");
        };
        BaseController.prototype.nextState = function (sale) {
            var self = this;
            var successCallback = function (response) {
                self.search();
            };
            var errorCallback = function (error) {
                console.log(error);
                if (error.status === 500) {
                    alert(error.data.exceptionMessage);
                }
                else {
                    alert("Error Occurred. Please contact with Administrator");
                }
            };
            sale.customer = null;
            sale.transactions = null;
            self.saveService.update(sale, self.url.sale + "/NextState").then(successCallback, errorCallback);
        };
        BaseController.prototype.nextStateAll = function (sales) {
            var self = this;
            var successCallback = function (response) {
                self.search();
            };
            var errorCallback = function (error) {
                console.log(error);
                if (error.status === 500) {
                    alert(error.data.exceptionMessage);
                }
                else {
                    alert("Error Occurred. Please contact with Administrator");
                }
            };
            var seletedDeliverymans = [];
            for (var i = 0; i < self.models.length; i++) {
                sales[i].customer = null;
                sales[i].transactions = null;
                if (sales[i].deliverymanId != null) {
                    seletedDeliverymans.push(sales[i]);
                }
            }
            self.saveService.updateMultiple(seletedDeliverymans, self.url.sale + "/NextStateAll").then(successCallback, errorCallback);
            //self.saveService.updateMultiple(self.models, self.url.sale + "/NextStateAll").then(successCallback, errorCallback);
        };
        BaseController.prototype.updateState = function (sale) {
            var self = this;
            var successCallback = function (response) {
                self.search();
            };
            var errorCallback = function (error) {
                console.log(error);
                if (error.status === 500) {
                    alert(error.data.exceptionMessage);
                }
                else {
                    alert("Error Occurred. Please contact with Administrator");
                }
            };
            sale.customer = null;
            sale.transactions = null;
            self.saveService.update(sale, self.url.sale + "/UpdateState").then(successCallback, errorCallback);
        };
        BaseController.prototype.updateStateAll = function (sales) {
            var self = this;
            var successCallback = function (response) {
                self.search();
            };
            var errorCallback = function (error) {
                console.log(error);
                if (error.status === 500) {
                    alert(error.data.exceptionMessage);
                }
                else {
                    alert("Error Occurred. Please contact with Administrator");
                }
            };
            for (var i = 0; i < sales.length; i++) {
                sales[i].customer = null;
                sales[i].transactions = null;
            }
            self.saveService.updateMultiple(sales, self.url.sale + "/UpdateStateAll")
                .then(successCallback, errorCallback);
        };
        BaseController.prototype.changeStateAll = function (i) {
            console.log('value-' + i);
            var self = this;
            var sales = self.models;
            for (var j = 0; j < sales.length; j++) {
                console.log('value-' + i);
                sales[j].nextOrderState = i;
                //console.log(sales[j].nextOrderState);
            }
            console.log(i);
        };
        BaseController.prototype.isOverDue = function (item) {
            var diff = this.getDateDiff(item.created);
            return diff > 1 && item.dueAmount >= 1;
        };
        BaseController.prototype.getDateDiff = function (input) {
            var now = new Date();
            var prev = new Date(input);
            var diff = (+now - +prev) / 86400000;
            return diff;
        };
        BaseController.prototype.toInt = function (n) { return Math.round(Number(n)); };
        ;
        // navigation
        //navigateTo(div: string): void {
        //    this.$anchorScroll.yOffset = 150;
        //    this.location.hash(div);
        //    this.$anchorScroll();
        //}
        BaseController.prototype.removeElement = function (array, element) {
            var index = array.indexOf(element);
            if (index !== -1) {
                array.splice(index, 1);
            }
            return array;
        };
        BaseController.prototype.navigateState = function (stateName, param) {
            var self = this;
            self.stateService.go(stateName, param);
        };
        BaseController.prototype.toggleSort = function (property) {
            var self = this;
            self.searchRequest.isAscending = self.searchRequest.isAscending === "false" ? 'true' : 'false';
            self.searchRequest.orderBy = property;
            self.search();
        };
        BaseController.prototype.getPropertyNames = function (m) {
            var properties = [];
            for (var p in m) {
                properties.push(p);
            }
            return properties;
        };
        BaseController.prototype.excelDownload = function (id) {
            var self = this;
            if (id == null) {
                id = 'table-edit';
            }
            self.excelDownloadWithId(id);
        };
        BaseController.prototype.excelDownloadWithId = function (id) {
            var self = this;
            var exportHref = self.Excel.tableToExcel(id, 'Sheet');
            setTimeout(function () { location.href = exportHref; }, 100);
        };
        BaseController.prototype.print = function (id) {
            if (id == null) {
                id = "receipt";
            }
            var printContents = document.getElementById(id).innerHTML;
            var popupWin;
            var baseUrl = 'http://' + document.location.host + this.url.clientSubFolder;
            console.log(baseUrl);
            var cssUrl = '';
            cssUrl = baseUrl + '/dist/css/all.css?t=074002082012';
            popupWin = window.open('', '_blank', 'scrollbars=no,menubar=no,toolbar=no,location=no,status=no,titlebar=no');
            popupWin.window.focus();
            popupWin.document.write('<!DOCTYPE html><html><head>' +
                '<link rel="stylesheet" ' +
                'href="' + cssUrl + '">' +
                '</head><body style="font-size:10px !important; line-height: 0.3 !important;">' +
                printContents +
                '</body></html>');
            popupWin.onbeforeunload = function (event) {
                popupWin.close();
            };
            popupWin.onabort = function (event) {
                popupWin.document.close();
                popupWin.close();
            };
            setTimeout(function () {
                popupWin.print();
            }, 1000);
        };
        BaseController.prototype.loadWarehouses = function () {
            var self = this;
            var successCallback = function (response) {
                self.warehouses = response.Models;
                if (self.warehouses.length > 0) {
                    var warehouseId_1 = self.user.warehouseId;
                    if (warehouseId_1 && self.user.role.indexOf("Warehouse") !== -1) {
                        self.warehouses = self.warehouses.filter(function (x) { return x.id === warehouseId_1; });
                    }
                    else {
                        console.log(self.warehouses);
                        self.warehouses.push({ id: Guid.defaultGuid(), text: "Other" });
                        self.warehouses.push({ id: null, text: "All" });
                    }
                }
                return self.warehouses;
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            var reqeust = new App.SearchRequest();
            return self.searchService
                .search(reqeust, self.url.warehouseQuery + "/Dropdown")
                .then(successCallback, errorCallback);
        };
        BaseController.prototype.searchByWarehouse = function () {
            var _this = this;
            return this.loadWarehouses().then(function (result) {
                if (_this.warehouses.length == 1) {
                    _this.searchRequest.warehouseId = _this.warehouses[0].id;
                }
                return _this.search();
            });
        };
        BaseController.prototype.saveSaleTagValue = function () {
            var self = this;
            self.localStorageService.save(App.LocalStorageKeys.IsTaggedSale, self.searchRequest["isTaggedSale"]);
            self.localStorageService.save(App.LocalStorageKeys.SaleTag, self.searchRequest["saleTag"]);
            this.search();
        };
        BaseController.prototype.saveSearchKeyword = function () {
            var self = this;
            self.localStorageService.save(App.LocalStorageKeys.SearchKeyword, self.searchRequest.keyword);
        };
        BaseController.prototype.setSearchKeyword = function () {
            var searchKeyword = this.localStorageService.get(App.LocalStorageKeys.SearchKeyword);
            if (!searchKeyword) {
                searchKeyword = "";
                this.localStorageService.save(App.LocalStorageKeys.SearchKeyword, searchKeyword);
            }
            this.searchRequest.keyword = searchKeyword;
        };
        BaseController.prototype.saveChangeWarehouse = function () {
            var self = this;
            self.localStorageService.save(App.LocalStorageKeys.WarehouseId, self.searchRequest.warehouseId);
            self.search();
        };
        BaseController.prototype.toggleShowChart = function () {
            this.showChart = !this.showChart;
        };
        return BaseController;
    }());
    App.BaseController = BaseController;
})(App || (App = {}));

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var App;
(function (App) {
    "use strict";
    var CustomersController = /** @class */ (function (_super) {
        __extends(CustomersController, _super);
        function CustomersController(location, state, stateParams, url, search, save, authService, localStorageService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.customer, url.customerQuery, excel) || this;
            _this.headers = ["id", "name", "email", "phone", "totalDue", "modified"];
            _this.localStorageService = localStorageService;
            var page = _this.localStorageService.get2(App.LocalStorageKeys.CustomerListPageNo);
            if (!page) {
                _this.localStorageService.save(App.LocalStorageKeys.CustomerListPageNo, 1);
                page = 1;
            }
            _this.searchRequest.page = page;
            _this.search();
            return _this;
        }
        CustomersController.prototype.goto = function (page) {
            var self = this;
            self.localStorageService.save(App.LocalStorageKeys.CustomerListPageNo, page);
            _super.prototype.goto.call(this, page);
        };
        CustomersController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", "LocalStorageService", 'Excel'
        ];
        return CustomersController;
    }(App.BaseController));
    App.CustomersController = CustomersController;
    angular.module('app').controller('CustomersController', CustomersController);
    var CustomerController = /** @class */ (function (_super) {
        __extends(CustomerController, _super);
        function CustomerController(location, state, stateParams, url, search, save, authService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.customer, url.customerQuery, excel) || this;
            _this.isUpdateMode = false;
            if (_this.stateParams["id"]) {
                _this.isUpdateMode = true;
                //this.edit(this.stateParams["id"]);
                _this.editWithCallBack(_this.stateParams["id"], _this.loadImage);
            }
            return _this;
        }
        CustomerController.prototype.history = function (p) {
            var self = this;
            self.stateService.go('root.customerhistory', { customer: { Id: p.id, Name: p.name, Phone: p.phone, MembarshipCardNo: p.membershipCardNo } });
        };
        CustomerController.prototype.report = function () {
            var self = this;
            window.open(self.url.customerQueryReport, "_blank", "");
        };
        CustomerController.prototype.getBarcode = function () {
            var self = this;
            var successCallback = function (response) {
                if (self.model == null) {
                    self.model = new App.Customer();
                }
                self.model.membershipCardNo = response;
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.searchService.get(self.url.customerQueryBarcode).then(successCallback, errorCallback);
        };
        CustomerController.prototype.getTotal = function () {
            var self = this;
            self.customerPointViewModel = new App.CustomerPointViewModel();
            var customers = self.models;
            for (var i = 0; i < customers.length; i++) {
                var p = customers[i];
                self.customerPointViewModel.pointTotal += parseFloat(p["point"].toString() !== "" ? p["point"].toString() : "0");
            }
            return self.customerPointViewModel;
        };
        //uploadProfileImage(): void {
        //    var self = this;
        //    let file = self["customerImage"] as File;
        //    let folderName = "customers";
        //    var fd = new FormData();
        //    fd.append('folderName', folderName);
        //    fd.append("id", self.model.id);
        //    let type = 'profile';
        //    fd.append('type', type);
        //    fd.append('file', file);
        //    self.uploadImage(fd, folderName, self.model.id, type);
        //}
        CustomerController.prototype.uploadImage = function (fileName, type) {
            var self = this;
            var file = self[fileName];
            var folderName = "customers";
            var fd = new FormData();
            fd.append('folderName', folderName);
            fd.append("id", self.model.id);
            fd.append('type', type);
            fd.append('file', file);
            self.uploadContent(fd, folderName, self.model.id, type);
        };
        CustomerController.prototype.loadImage = function (model, self) {
            var random = (new Date()).toString();
            self["customerProfileImageUrl"] = self.url.getImage + "?folderName=customers&id=" + self.model.id + "&name=profile.jpeg&timestamp=" + random;
            self["customerNid1ImageUrl"] = self.url.getImage + "?folderName=customers&id=" + self.model.id + "&name=nid1.jpeg&timestamp=" + random;
            self["customerNid2ImageUrl"] = self.url.getImage + "?folderName=customers&id=" + self.model.id + "&name=nid2.jpeg&timestamp=" + random;
        };
        CustomerController.prototype.uploadContent = function (fd, folderName, id, type) {
            var self = this;
            self.saveService.upload(self.url.uploadImage, fd).then(function (response) {
                self.loadImage(self.model, self);
            }, function (error) {
                console.log(error);
            });
        };
        CustomerController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", 'Excel'
        ];
        return CustomerController;
    }(App.BaseController));
    App.CustomerController = CustomerController;
    angular.module("app").controller("CustomerController", CustomerController);
    var CustomerAddressesController = /** @class */ (function (_super) {
        __extends(CustomerAddressesController, _super);
        function CustomerAddressesController(location, state, stateParams, url, search, save, authService, customerService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.customerAddress, url.customerAddressQuery, excel) || this;
            _this.customerService = customerService;
            if (_this.stateParams["id"]) {
                _this.customerId = _this.stateParams["id"];
                _this.searchRequest.parentId = _this.customerId;
                _this.activate();
            }
            return _this;
        }
        CustomerAddressesController.prototype.addressChanged = function () {
            var self = this;
            console.log(self.searchRequest);
            self.loadDetail(self.searchRequest.id);
        };
        CustomerAddressesController.prototype.loadDropdown = function () {
            var self = this;
            var successCallback = function (response) {
                console.log('addresses ', response);
                self.models = response.Models;
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.searchService
                .search(self.searchRequest, self.url.customerAddressQuery + "/Dropdown")
                .then(successCallback, errorCallback);
        };
        CustomerAddressesController.prototype.loadDetail = function (id) {
            var self = this;
            var successCallback = function (response) {
                console.log(response);
                self.model = response.data;
                self.isUpdateMode = true;
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.searchService
                .search(self.searchRequest, self.url.customerAddressQuery + "/Detail?id=" + id)
                .then(successCallback, errorCallback);
        };
        CustomerAddressesController.prototype.activate = function () {
            this.model = new App.CustomerAddress();
            this.model.customerId = this.customerId;
            this.models = [];
            this.isUpdateMode = false;
            this.searchRequest = new App.SearchRequest();
            this.searchRequest.parentId = this.customerId;
            this.loadDropdown();
        };
        CustomerAddressesController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService",
            "CustomerService", 'Excel'
        ];
        return CustomerAddressesController;
    }(App.BaseController));
    App.CustomerAddressesController = CustomerAddressesController;
    angular.module('app').controller('CustomerAddressesController', CustomerAddressesController);
    var CustomerFeedbackController = /** @class */ (function (_super) {
        __extends(CustomerFeedbackController, _super);
        function CustomerFeedbackController(location, state, stateParams, url, search, save, authService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.customerFeedback, url.customerFeedbackQuery, excel) || this;
            _this.feedbackTypes = ["Positive", "Negative", "Other"];
            _this.isUpdateMode = false;
            if (_this.stateParams["id"]) {
                _this.isUpdateMode = true;
                _this.edit2(_this.stateParams["id"]);
            }
            return _this;
        }
        CustomerFeedbackController.prototype.setFocusOnSearchBox = function () {
            var txtCustomerSearch = document.getElementById("txtCustomerSearch");
            txtCustomerSearch.focus();
            txtCustomerSearch.select();
            txtCustomerSearch.value = '';
        };
        CustomerFeedbackController.prototype.loadCustomers = function () {
            var self = this;
            if (self.customerSearchRequest.keyword.length < 3) {
                return;
            }
            var successCallback = function (response) {
                console.log('customers ', response);
                self.customers = response.Models;
                for (var i = 0; i < self.customers.length; i++) {
                    var addressLength = self.customers[i].addresses.length;
                    var newAddresses = [];
                    for (var j = 0; j < addressLength; j++) {
                        //Display.log(self.customers[i].addresses[j]);
                        if (self.customers[i].addresses[j].isActive) {
                            newAddresses.push(self.customers[i].addresses[j]);
                        }
                    }
                    self.customers[i].addresses = newAddresses;
                }
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.customerSearchRequest.isIncludeParents = true;
            self.customerSearchRequest["IsCustomerActive"] = true;
            self.searchService
                .search(self.customerSearchRequest, self.url.customerQuery + "/Search")
                .then(successCallback, errorCallback);
        };
        CustomerFeedbackController.prototype.selectCustomer = function (selecterCustomer) {
            var self = this;
            self.customer = selecterCustomer;
            var successCallback = function (response) {
                self.model = response.data;
            };
            var errorCallback = function (error) {
                console.log(error);
                alert('Error occurred');
            };
            var searchRequest = new App.SearchRequest();
            searchRequest.parentId = selecterCustomer.id;
            searchRequest.page = -1;
            self.searchService
                .search(searchRequest, self.url.saleQuery + "/Search")
                .then(successCallback, errorCallback);
        };
        CustomerFeedbackController.prototype.selectSaleList = function (selectSaleList) {
            var self = this;
            var successCallback = function (response) {
                self.response = response.data;
            };
            var errorCallback = function (error) {
                console.log(error);
                alert('Error occurred');
            };
            var searchRequest = new App.SearchRequest();
            searchRequest.parentId = selectSaleList.id;
            searchRequest.isIncludeParents = true;
            searchRequest.page = -1;
            self.searchService
                .search(searchRequest, self.url.saleDetailQuery + "/Search")
                .then(successCallback, errorCallback);
        };
        CustomerFeedbackController.prototype.resetOrderCustomer = function () {
            this.customer = new App.Customer();
            this.customerSearchRequest.keyword = "";
            this.customers = [];
        };
        CustomerFeedbackController.prototype.resetCustomer = function () {
            this.customer.name = "";
            this.customer.phone = "";
        };
        CustomerFeedbackController.prototype.save = function () {
            var _this = this;
            var self = this;
            if (self.isUpdateMode)
                self.update();
            if (self.customer.name.length === 0 || self.customer.phone.length === 0) {
                self.customer.phone = "0";
                self.customer.name = "Annonymous";
            }
            else {
                var successCallback = function (response) {
                    self.activate();
                    _this.model.feedbackType = '';
                };
                var errorCallback = function (error) {
                    console.log(error);
                    if (error.status === 500) {
                        alert(error.data.exceptionMessage);
                    }
                };
                self.model.customerId = self.customer.id;
                self.saveService.save(self.model, self.commandUrl + "/Add").then(successCallback, errorCallback);
            }
        };
        CustomerFeedbackController.prototype.activate = function () {
            this.model = new App.CustomerFeedback();
            this.models = [];
            this.isUpdateMode = false;
            this.customer = new App.Customer();
            this.customerSearchRequest = new App.SearchRequest();
            this.resetOrderCustomer();
        };
        CustomerFeedbackController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", 'Excel'
        ];
        return CustomerFeedbackController;
    }(App.BaseController));
    App.CustomerFeedbackController = CustomerFeedbackController;
    angular.module('app').controller('CustomerFeedbackController', CustomerFeedbackController);
    var CustomerFeedbacksController = /** @class */ (function (_super) {
        __extends(CustomerFeedbacksController, _super);
        function CustomerFeedbacksController(location, state, stateParams, url, search, save, authService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.customerFeedback, url.customerFeedbackQuery, excel) || this;
            _this.searchRequest.isIncludeParents = true;
            _this.search();
            return _this;
        }
        CustomerFeedbacksController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", 'Excel'
        ];
        return CustomerFeedbacksController;
    }(App.BaseController));
    App.CustomerFeedbacksController = CustomerFeedbacksController;
    angular.module('app').controller('CustomerFeedbacksController', CustomerFeedbacksController);
})(App || (App = {}));

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var App;
(function (App) {
    "use strict";
    var CustomerHistoryController = /** @class */ (function (_super) {
        __extends(CustomerHistoryController, _super);
        function CustomerHistoryController(location, $state, $stateParams, url, searchService, saveService, auth, excel) {
            var _this = _super.call(this, location, $state, $stateParams, url, searchService, saveService, auth, url.customer, url.customerQuery, excel) || this;
            _this.headers = ["date", "invoiceNumber", "transactionNumber", "type", "total", "paid"];
            if (_this.stateParams["id"]) {
                _this.loadCustomerHistory();
            }
            return _this;
        }
        CustomerHistoryController.prototype.loadCustomerHistory = function () {
            var self = this;
            var successCallback = function (response) {
                self.response = response.data;
                App.Display.log('i am in customer history', self.response);
                self.csvModels = [];
                for (var i = 0; i < self.response.histories.length; i++) {
                    // do your stuff for csv model generation
                    self.csvModels.push(self.generateCsvModel(self.response.histories[i]));
                }
            };
            var errorCallback = function (error) {
                console.log(error);
                alert('Error occurred');
            };
            var searchRequest = new App.SearchRequest();
            searchRequest.parentId = this.stateParams["id"];
            searchRequest.page = -1;
            self.searchService
                .search(searchRequest, self.url.saleQuery + "/BuyerHistory")
                .then(successCallback, errorCallback);
        };
        CustomerHistoryController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", 'Excel'
        ];
        return CustomerHistoryController;
    }(App.BaseController));
    App.CustomerHistoryController = CustomerHistoryController;
    angular.module("app").controller("CustomerHistoryController", CustomerHistoryController);
    var CustomerProductHistoryController = /** @class */ (function (_super) {
        __extends(CustomerProductHistoryController, _super);
        function CustomerProductHistoryController(location, $state, $stateParams, url, searchService, saveService, auth, excel) {
            var _this = _super.call(this, location, $state, $stateParams, url, searchService, saveService, auth, url.customer, url.customerQuery, excel) || this;
            _this.totalQuantity = 0;
            _this.totalUnitPrice = 0;
            _this.totalPrice = 0;
            if (_this.stateParams["id"]) {
                _this.loadCustomerProductHistory();
            }
            return _this;
        }
        CustomerProductHistoryController.prototype.loadCustomerProductHistory = function () {
            var self = this;
            self.totalUnitPrice = 0;
            self.totalQuantity = 0;
            self.totalPrice = 0;
            var successCallback = function (response) {
                self.response = response.data;
                App.Display.log('i am in customer history', self.response);
                self.csvModels = [];
                for (var i = 0; i < self.response.histories.length; i++) {
                    self.totalUnitPrice += self.response.histories[i].unitPrice;
                    self.totalQuantity += self.response.histories[i].quantity;
                    self.totalPrice += self.response.histories[i].total;
                    // do your stuff for csv model generation
                    self.csvModels.push(self.generateCsvModel(self.response.histories[i]));
                }
            };
            var errorCallback = function (error) {
                console.log(error);
                alert('Error occurred');
            };
            var searchRequest = new App.SearchRequest();
            searchRequest.parentId = this.stateParams["id"];
            searchRequest.page = -1;
            self.searchService
                .search(searchRequest, self.url.saleQuery + "/ProductHistory")
                .then(successCallback, errorCallback);
        };
        CustomerProductHistoryController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", 'Excel'
        ];
        return CustomerProductHistoryController;
    }(App.BaseController));
    App.CustomerProductHistoryController = CustomerProductHistoryController;
    angular.module("app").controller("CustomerProductHistoryController", CustomerProductHistoryController);
    var CustomerProductViewController = /** @class */ (function (_super) {
        __extends(CustomerProductViewController, _super);
        function CustomerProductViewController(location, $state, $stateParams, url, searchService, saveService, auth, excel) {
            var _this = _super.call(this, location, $state, $stateParams, url, searchService, saveService, auth, url.customer, url.customerQuery, excel) || this;
            _this.totalQuantity = 0;
            _this.totalUnitPrice = 0;
            _this.totalPrice = 0;
            if (_this.stateParams["id"]) {
                _this.loadCustomerProductView();
            }
            return _this;
        }
        CustomerProductViewController.prototype.loadCustomerProductView = function () {
            var self = this;
            self.totalUnitPrice = 0;
            self.totalQuantity = 0;
            self.totalPrice = 0;
            var successCallback = function (response) {
                self.response = response.data;
                App.Display.log('i am in customer history', self.response);
                self.csvModels = [];
                for (var i = 0; i < self.response.histories.length; i++) {
                    self.totalUnitPrice += self.response.histories[i].price;
                    self.totalQuantity += self.response.histories[i].quantity;
                    self.totalPrice += self.response.histories[i].total;
                    // do your stuff for csv model generation
                    self.csvModels.push(self.generateCsvModel(self.response.histories[i]));
                }
            };
            var errorCallback = function (error) {
                console.log(error);
                alert('Error occurred');
            };
            var searchRequest = new App.SearchRequest();
            searchRequest.parentId = this.stateParams["id"];
            // searchRequest.customerId = this.stateParams["id"]
            searchRequest.page = -1;
            self.searchService
                .search(searchRequest, self.url.customerQuery + "/CustomerProductView")
                .then(successCallback, errorCallback);
        };
        CustomerProductViewController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", 'Excel'
        ];
        return CustomerProductViewController;
    }(App.BaseController));
    App.CustomerProductViewController = CustomerProductViewController;
    angular.module("app").controller("CustomerProductViewController", CustomerProductViewController);
})(App || (App = {}));

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var App;
(function (App) {
    "use strict";
    var EmployeesController = /** @class */ (function (_super) {
        __extends(EmployeesController, _super);
        function EmployeesController(location, state, stateParams, url, search, save, authService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.employee, url.employeeQuery, excel) || this;
            _this.headers = ["id", "userName", "email", "password"];
            _this.search();
            return _this;
        }
        EmployeesController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", 'Excel'
        ];
        return EmployeesController;
    }(App.BaseController));
    App.EmployeesController = EmployeesController;
    angular.module("app").controller("EmployeesController", EmployeesController);
    var EmployeeController = /** @class */ (function (_super) {
        __extends(EmployeeController, _super);
        function EmployeeController(location, state, stateParams, url, search, save, authService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.employee, url.employeeQuery, excel) || this;
            _this.setupDropdowns();
            if (_this.stateParams["applicationUserId"]) {
                _this.isUpdateMode = true;
                _this.edit(_this.stateParams["applicationUserId"]);
            }
            return _this;
        }
        EmployeeController.prototype.setupDropdowns = function () {
            this.setupRoles();
            this.loadWarehouses();
        };
        EmployeeController.prototype.setupRoles = function () {
            var self = this;
            var success = function (response) {
                self.userRoles = response;
                console.log(response);
            };
            var error = function (error) {
                console.log(error);
                alert('Error occurred');
            };
            self.searchService.get(self.url.roleDropdown).then(success, error);
        };
        EmployeeController.prototype.edit = function (id) {
            var self = this;
            var url = self.url.employeeQuery + '/GetEmployeeDetail/' + id;
            var onSuccess = function (data) {
                self.model = data;
                if (self.isUpdateMode)
                    self.model.roleId = self.model["roles"][0]["roleId"];
            };
            var onError = function (err) {
                alert('Error occurred');
            };
            self.searchService.get(url).then(onSuccess, onError);
        };
        EmployeeController.prototype.setDefaultPassword = function () {
            var self = this;
            console.log(self.model.userName);
            var data = { userName: self.model.userName };
            self.authService.setDefaultPassword(data)
                .then(function (success) {
                console.log(success);
                alert('password reset success');
            }, function (error) {
                console.log(error);
            });
        };
        EmployeeController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", 'Excel'
        ];
        return EmployeeController;
    }(App.BaseController));
    App.EmployeeController = EmployeeController;
    angular.module("app").controller("EmployeeController", EmployeeController);
    var EmployeeInfosController = /** @class */ (function (_super) {
        __extends(EmployeeInfosController, _super);
        function EmployeeInfosController(location, state, stateParams, url, search, save, authService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.employeeInfo, url.employeeInfoQuery, excel) || this;
            _this.headers = ["id", "name", "phone", "email", "salary", "saleTargetAmount", "saleAchivedAmount"];
            _this.search();
            return _this;
        }
        EmployeeInfosController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", 'Excel'
        ];
        return EmployeeInfosController;
    }(App.BaseController));
    App.EmployeeInfosController = EmployeeInfosController;
    angular.module("app").controller("EmployeeInfosController", EmployeeInfosController);
    var EmployeeInfoController = /** @class */ (function (_super) {
        __extends(EmployeeInfoController, _super);
        function EmployeeInfoController(location, state, stateParams, url, search, save, authService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.employeeInfo, url.employeeInfoQuery, excel) || this;
            _this.loadEmployeeRole();
            _this.loadWarehouses();
            if (_this.stateParams["id"]) {
                _this.isUpdateMode = true;
                _this.edit2(_this.stateParams["id"]);
            }
            return _this;
        }
        EmployeeInfoController.prototype.loadEmployeeRole = function () {
            var self = this;
            var success = function (response) {
                self.employeeRoles = response;
                console.log(response);
            };
            var error = function (error) {
                console.log(error);
                alert('Error occurred');
            };
            self.searchService.get(self.url.roleDropdown).then(success, error);
        };
        EmployeeInfoController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", 'Excel'
        ];
        return EmployeeInfoController;
    }(App.BaseController));
    App.EmployeeInfoController = EmployeeInfoController;
    angular.module("app").controller("EmployeeInfoController", EmployeeInfoController);
    var SalesmanHistoryController = /** @class */ (function (_super) {
        __extends(SalesmanHistoryController, _super);
        function SalesmanHistoryController(location, $state, $stateParams, url, searchService, saveService, auth, excel) {
            var _this = _super.call(this, location, $state, $stateParams, url, searchService, saveService, auth, url.employeeInfo, url.employeeInfoQuery, excel) || this;
            _this.amountTotal = 0;
            if (_this.stateParams["id"]) {
                _this.loadSalesmanHistory();
            }
            return _this;
        }
        SalesmanHistoryController.prototype.loadSalesmanHistory = function () {
            var self = this;
            var successCallback = function (response) {
                console.log('search:' + response.data["item1"]);
                //self.response = response.Models;
                self.models = response.data["item1"];
                for (var i = 0; i < self.models.length; i++) {
                    self.amountTotal = self.models[i].totalAmount + self.amountTotal;
                }
            };
            var errorCallback = function (error) {
                console.log(error);
                alert('Error occurred');
            };
            var searchRequest = new App.SearchRequest();
            searchRequest["SalesmanId"] = this.stateParams["id"];
            searchRequest.page = -1;
            self.searchService
                .search(searchRequest, self.url.saleQuery + "/Search")
                .then(successCallback, errorCallback);
        };
        SalesmanHistoryController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", 'Excel'
        ];
        return SalesmanHistoryController;
    }(App.BaseController));
    App.SalesmanHistoryController = SalesmanHistoryController;
    angular.module("app").controller("SalesmanHistoryController", SalesmanHistoryController);
})(App || (App = {}));

var App;
(function (App) {
    var HomeController = /** @class */ (function () {
        function HomeController($state, $rootScope, authService, search, urlService, scope) {
            this.isSignedIn = false;
            this.isPulling = false;
            var self = this;
            self.url = urlService;
            self.searchService = (search);
            self.authService = (authService);
            self.stateService = $state;
            self.rootScopeService = $rootScope;
            self.$scope = scope;
            self.rootScopeService.$on("SignedIn", function (event, args) {
                // self.activate();
                //self.loadUser();
            });
            self.rootScopeService.$on("SignedOut", function (event, args) {
                self.activate();
                //self.loadUser();
            });
            console.log('constructor', self.rootScopeService["isPulling"], self.isPulling);
            if (!self.rootScopeService["isPulling"]) {
                self.rootScopeService["isPulling"] = self.isPulling;
            }
            else {
                self.isPulling = self.rootScopeService["isPulling"];
            }
            self.activate();
        }
        HomeController.prototype.$onInit = function () { };
        HomeController.prototype.activate = function () {
            var self = this;
            var acc = self.authService.accountInfo;
            if (acc && acc.isAuth) {
                self.loadUser();
                console.log('in activate', self.rootScopeService["isPulling"], self.isPulling);
                self.loadDashboard();
            }
            else {
                self.isSignedIn = false;
            }
        };
        HomeController.prototype.getUserInfo = function () {
            var self = this;
            var successCallback = function (response) {
                console.log(response);
                self.profile = response;
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.searchService.get(self.url.profileUrl).then(successCallback, errorCallback);
        };
        HomeController.prototype.loadUser = function () {
            var self = this;
            self.user = this.authService.accountInfo;
            self.isSignedIn = this.authService.isSignedIn();
            var connection = $['connection'];
            self.myHub = connection.notificationHub;
            self.myHub.client.added = function (r) {
                console.log('connection response : ' + r);
            };
            self.myHub.client.connected = function (connectionId) {
                console.log('connection id : ' + connectionId);
                self.user.connectionId = connectionId;
                self.authService.updateUserInfo();
                //self.myHub.server.add(this.user.shopId);
            };
            self.myHub.client.orderCreated = function (data) {
                console.log('new order created from website');
                alert('new order created from website. please check in pending list page');
                self.rootScopeService.$broadcast("orderCreated");
            };
            self.myHub.client.disconnected = function (parameters) {
                console.log('disconnected', parameters);
            };
            self.myHub.client.chat = function (fromShopId, message) {
                self.rootScopeService.$broadcast("chatReceived", fromShopId, message);
            };
            connection.hub.url = this.url.signalrUrl;
            document.cookie = "BearerToken=" + this.authService.accountInfo.accessToken + "; path=/";
            connection.hub.start().done(function () {
                console.log('connection established');
            });
            connection.hub.logging = true;
            connection.hub.error = function (error) {
                console.error(error);
            };
        };
        HomeController.prototype.pull = function () {
            var self = this;
            var success = function (response) {
                console.log(response);
                alert("Done");
                self.isPulling = false;
                self.rootScopeService["isPulling"] = self.isPulling;
                console.log('after pull', self.rootScopeService["isPulling"], self.isPulling);
                self.loadDashboard();
            };
            var error = function (error) {
                console.error(error);
                alert("Error occurred");
                self.isPulling = false;
                self.rootScopeService["isPulling"] = self.isPulling;
            };
            console.log('before pull', self.rootScopeService["isPulling"], self.isPulling);
            if (self.rootScopeService["isPulling"] === false) {
                //self.isPulling = true;
                //self.rootScopeService["isPulling"] = self.isPulling;
                //self.searchService.get(this.url.woo + "/Pull/Order").then(success, error);
            }
        };
        HomeController.prototype.getRelative = function (p) {
            var now = new Date();
            now = new Date(now.toDateString());
            var orderDate = new Date(new Date(p).toDateString());
            var diff = orderDate.getTime() - now.getTime();
            var sec = diff / 1000;
            var hours = sec / 3600;
            var days = hours / 24;
            console.log(days);
            var int = parseInt(days.toString());
            var s = "";
            if (int < 0) {
                s = -1 * int + " day(s) over";
            }
            else {
                s = int + " day(s) left";
            }
            return s;
        };
        HomeController.prototype.pullEverything = function () {
            var self = this;
            var success = function (response) {
                console.log(response);
                alert("Done");
                self.isPulling = false;
                self.rootScopeService["isPulling"] = self.isPulling;
                console.log('after pullEverything', self.rootScopeService["isPulling"], self.isPulling);
                self.loadDashboard();
            };
            var error = function (error) {
                console.error(error);
                alert("Error occurred");
                self.isPulling = false;
                self.rootScopeService["isPulling"] = self.isPulling;
            };
            console.log('before pullEverything', self.rootScopeService["isPulling"], self.isPulling);
            if (self.rootScopeService["isPulling"] === false) {
                // self.isPulling = true;
                //self.rootScopeService["isPulling"] = self.isPulling;
                //self.searchService.get(this.url.woo + "/Pull/Everything").then(success, error);
            }
        };
        HomeController.prototype.loadDashboard = function () {
            var self = this;
            var success = function (response) {
                console.log(response);
                self.isPulling = false;
                self.rootScopeService["isPulling"] = self.isPulling;
                console.log('after loadDashboard', self.rootScopeService["isPulling"], self.isPulling);
                self.response = response;
                self.labels = ["bizbook365", "facebook", "website"];
                self.data = [response.sales.bizbook365, response.sales.facebook, response.sales.website];
            };
            var error = function (error) {
                console.error(error);
                if (error.status == 401) {
                    self.authService.signout();
                    self.authService.accountInfo = null;
                }
                alert("Error occurred");
                self.isPulling = false;
                self.rootScopeService["isPulling"] = self.isPulling;
            };
            console.log('before loadDashboard', self.rootScopeService["isPulling"], self.isPulling);
            if (self.rootScopeService["isPulling"] === false) {
                self.isPulling = true;
                self.rootScopeService["isPulling"] = self.isPulling;
                self.searchService.get(this.url.dashboard + "/Data").then(success, error);
            }
        };
        HomeController.$inject = ["$state", "$rootScope", "AuthService", "SearchService", "UrlService", "$scope"];
        return HomeController;
    }());
    App.HomeController = HomeController;
    angular.module('app').controller('HomeController', HomeController);
})(App || (App = {}));

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var App;
(function (App) {
    var IngredientUnitsController = /** @class */ (function (_super) {
        __extends(IngredientUnitsController, _super);
        function IngredientUnitsController(location, state, stateParams, url, search, save, authService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.ingredientUnit, url.ingredientUnitQuery, excel) || this;
            _this.search();
            return _this;
        }
        IngredientUnitsController.$inject = [
            "$location", "$state", "$stateParams", "UrlService",
            "SearchService", "SaveService", "AuthService", 'Excel'
        ];
        return IngredientUnitsController;
    }(App.BaseController));
    App.IngredientUnitsController = IngredientUnitsController;
    angular.module('app').controller("IngredientUnitsController", IngredientUnitsController);
    var IngredientUnitController = /** @class */ (function (_super) {
        __extends(IngredientUnitController, _super);
        function IngredientUnitController(location, state, stateParams, url, search, save, authService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.ingredientUnit, url.ingredientUnitQuery, excel) || this;
            _this.isUpdateMode = false;
            if (_this.stateParams["id"]) {
                _this.isUpdateMode = true;
                _this.edit2(_this.stateParams["id"]);
            }
            return _this;
        }
        IngredientUnitController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", 'Excel'
        ];
        return IngredientUnitController;
    }(App.BaseController));
    App.IngredientUnitController = IngredientUnitController;
    angular.module('app').controller("IngredientUnitController", IngredientUnitController);
})(App || (App = {}));
//# sourceMappingURL=IngredientController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var App;
(function (App) {
    "use strict";
    var IngredientDetailController = /** @class */ (function (_super) {
        __extends(IngredientDetailController, _super);
        function IngredientDetailController(location, state, stateParams, url, search, save, authService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.ingredientDetail, url.ingredientDetailQuery, excel) || this;
            _this.ingredientUnitSearchRequest = new App.SearchRequest("", "Modified", "False", "");
            _this.ingredientSearchRequest = new App.SearchRequest("", "Modified", "False", "");
            _this.loadIngredientUints();
            _this.loadIngredients();
            _this.selectedRow = null;
            _this.isUpdateMode = false;
            if (_this.stateParams["id"]) {
                _this.isUpdateMode = true;
                _this.edit2(_this.stateParams["id"]);
            }
            return _this;
        }
        IngredientDetailController.prototype.loadIngredientUints = function () {
            var self = this;
            var successCallback = function (response) {
                console.log(response);
                self.ingredientUnits = response.Models;
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.searchService
                .search(self.searchRequest, self.url.ingredientUnitQuery + "/Dropdown")
                .then(successCallback, errorCallback);
        };
        IngredientDetailController.prototype.loadIngredients = function () {
            var self = this;
            var successCallback = function (response) {
                console.log('ingredients', response);
                self.ingredients = response.Models;
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.searchService
                .search(self.ingredientSearchRequest, self.url.ingredientQuery + "/Dropdown")
                .then(successCallback, errorCallback);
        };
        IngredientDetailController.prototype.groupChanged = function () {
            console.log(this.model.ingredientUnitId);
        };
        IngredientDetailController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", 'Excel'
        ];
        return IngredientDetailController;
    }(App.BaseController));
    App.IngredientDetailController = IngredientDetailController;
    angular.module("app").controller("IngredientDetailController", IngredientDetailController);
    var IngredientDetailsController = /** @class */ (function (_super) {
        __extends(IngredientDetailsController, _super);
        function IngredientDetailsController(location, state, stateParams, url, search, save, authService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.ingredientDetail, url.ingredientDetailQuery, excel) || this;
            _this.searchRequest.isIncludeParents = true;
            _this.search();
            return _this;
        }
        IngredientDetailsController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", 'Excel'
        ];
        return IngredientDetailsController;
    }(App.BaseController));
    App.IngredientDetailsController = IngredientDetailsController;
    angular.module("app").controller("IngredientDetailsController", IngredientDetailsController);
})(App || (App = {}));
//# sourceMappingURL=IngredientDetailController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var App;
(function (App) {
    "use strict";
    var IngredientSupplierController = /** @class */ (function (_super) {
        __extends(IngredientSupplierController, _super);
        function IngredientSupplierController(location, state, stateParams, url, search, save, authService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.ingredientSupplier, url.ingredientSupplierQuery, excel) || this;
            _this.isUpdateMode = false;
            if (_this.stateParams["id"]) {
                _this.isUpdateMode = true;
                _this.edit2(_this.stateParams["id"]);
            }
            return _this;
        }
        IngredientSupplierController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", 'Excel'
        ];
        return IngredientSupplierController;
    }(App.BaseController));
    App.IngredientSupplierController = IngredientSupplierController;
    angular.module('app').controller("IngredientSupplierController", IngredientSupplierController);
    var IngredientSuppliersController = /** @class */ (function (_super) {
        __extends(IngredientSuppliersController, _super);
        function IngredientSuppliersController(location, state, stateParams, url, search, save, authService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.ingredientSupplier, url.ingredientSupplierQuery, excel) || this;
            _this.headers = ["id", "name", "phone", "modified"];
            _this.search();
            return _this;
        }
        IngredientSuppliersController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", 'Excel'
        ];
        return IngredientSuppliersController;
    }(App.BaseController));
    App.IngredientSuppliersController = IngredientSuppliersController;
    angular.module('app').controller("IngredientSuppliersController", IngredientSuppliersController);
})(App || (App = {}));
//# sourceMappingURL=IngredientSupplierController.js.map

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var App;
(function (App) {
    "use strict";
    var IngredientController = /** @class */ (function (_super) {
        __extends(IngredientController, _super);
        function IngredientController(location, state, stateParams, url, search, save, authService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.ingredient, url.ingredientQuery, excel) || this;
            _this.ingredientUnitSearchRequest = new App.SearchRequest("", "Modified", "False", "");
            _this.loadIngredientUints();
            _this.selectedRow = null;
            _this.isUpdateMode = false;
            if (_this.stateParams["id"]) {
                _this.isUpdateMode = true;
                _this.edit2(_this.stateParams["id"]);
            }
            return _this;
        }
        IngredientController.prototype.loadIngredientUints = function () {
            var self = this;
            var successCallback = function (response) {
                console.log(response);
                self.ingredientUnits = response.Models;
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.searchService
                .search(self.searchRequest, self.url.ingredientUnitQuery + "/Dropdown")
                .then(successCallback, errorCallback);
        };
        IngredientController.prototype.groupChanged = function () {
            console.log(this.model.ingredientUnitId);
        };
        IngredientController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", 'Excel'
        ];
        return IngredientController;
    }(App.BaseController));
    App.IngredientController = IngredientController;
    angular.module("app").controller("IngredientController", IngredientController);
    var IngredientsController = /** @class */ (function (_super) {
        __extends(IngredientsController, _super);
        function IngredientsController(location, state, stateParams, url, search, save, authService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.ingredient, url.ingredientQuery, excel) || this;
            _this.searchRequest.isIncludeParents = true;
            _this.search();
            return _this;
        }
        IngredientsController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", 'Excel'
        ];
        return IngredientsController;
    }(App.BaseController));
    App.IngredientsController = IngredientsController;
    angular.module("app").controller("IngredientsController", IngredientsController);
})(App || (App = {}));
//# sourceMappingURL=IngredientsController.js.map
// Install the angularjs.TypeScript.DefinitelyTyped NuGet package
var App;
(function (App) {
    "use strict";
    var SideMenuController = /** @class */ (function () {
        function SideMenuController($location, $rootScope, authService, $state) {
            this.$location = $location;
            this.isSignedIn = false;
            var self = this;
            self.authService = authService;
            self.stateService = $state;
            self.rootScopeService = $rootScope;
            self.$location = $location;
            self.rootScopeService.$on("SignedIn", function (event, args) {
                self.activate();
                console.log('i m in sidemenucontroller');
            });
            self.rootScopeService.$on("SignedOut", function (event, args) {
                self.activate();
                self.loadUser();
            });
            self.activate();
        }
        SideMenuController.prototype.$onInit = function () { };
        SideMenuController.prototype.activate = function () {
            var self = this;
            var acc = self.authService.accountInfo;
            if (acc && acc.isAuth) {
                self.loadUser();
                self.routes = self.user.routes;
            }
            else {
                self.isSignedIn = false;
                self.routes = [];
            }
            this.selectedMenu = null;
        };
        SideMenuController.prototype.loadSideMenu = function (s) {
            var self = this;
            if (self.routes) {
                for (var i = 0; i < self.routes.length; i++) {
                    if (self.routes[i] === s) {
                        return true;
                    }
                }
            }
            return false;
        };
        SideMenuController.prototype.loadUser = function () {
            var self = this;
            self.user = this.authService.accountInfo;
            self.isSignedIn = this.authService.isSignedIn();
        };
        SideMenuController.$inject = ["$location", "$rootScope", "AuthService", "$state"];
        return SideMenuController;
    }());
    App.SideMenuController = SideMenuController;
    angular.module("app").controller("SideMenuController", SideMenuController);
})(App || (App = {}));

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var App;
(function (App) {
    "use strict";
    var OperationLogsController = /** @class */ (function (_super) {
        __extends(OperationLogsController, _super);
        function OperationLogsController(location, state, stateParams, url, search, save, authService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.operationLog, url.operationLogsQuery, excel) || this;
            _this.searchRequest.perPageCount = 50;
            _this.searchRequest.isIncludeParents = true;
            _this.search();
            return _this;
        }
        OperationLogsController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "AuthService", 'Excel'
        ];
        return OperationLogsController;
    }(App.BaseController));
    App.OperationLogsController = OperationLogsController;
    angular.module('app').controller('OperationLogsController', OperationLogsController);
    var OperationLogDetailController = /** @class */ (function (_super) {
        __extends(OperationLogDetailController, _super);
        function OperationLogDetailController(location, state, stateParams, url, search, save, authService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.operationLog, url.operationLogsQuery, excel) || this;
            if (_this.stateParams["id"]) {
                _this.loadDetail();
            }
            else {
                _this.back();
            }
            return _this;
        }
        OperationLogDetailController.prototype.loadDetail = function () {
            console.log(this.stateParams);
            var self = this;
            var successCallback = function (response) {
                self.model = response.data;
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            var searchRequest = new App.SearchRequest();
            searchRequest.id = this.stateParams["id"];
            searchRequest.page = -1;
            var id = this.stateParams["id"];
            var httpUrl = self.url.operationLogsQuery + "/SearchDetail?id=" + id;
            self.searchService
                .search(searchRequest, httpUrl)
                .then(successCallback, errorCallback);
        };
        OperationLogDetailController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", 'Excel'
        ];
        return OperationLogDetailController;
    }(App.BaseController));
    App.OperationLogDetailController = OperationLogDetailController;
    angular.module('app').controller("OperationLogDetailController", OperationLogDetailController);
    var OperationLogDetailHistoryController = /** @class */ (function (_super) {
        __extends(OperationLogDetailHistoryController, _super);
        function OperationLogDetailHistoryController(location, state, stateParams, url, search, save, authService, excel) {
            return _super.call(this, location, state, stateParams, url, search, save, authService, url.operationLogDetail, url.operationLogDetailQuery, excel) || this;
        }
        OperationLogDetailHistoryController.prototype.search = function () {
            var self = this;
            if (self.searchRequest.keyword.length < 3) {
                return;
            }
            var successCallback = function (response) {
                self.models = response.Models;
                if (self.models.length === 0) {
                    console.log('No search result found');
                }
                else {
                    for (var i = 0; i < self.models.length; i++) {
                        var m = self.models[i];
                    }
                }
                self.totalCount = response.Count;
                self.searchRequest.totalPage = Math.ceil(response.Count / 10);
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.searchService.search(self.searchRequest, self.url.operationLogDetailQuery + "/Search")
                .then(successCallback, errorCallback);
        };
        OperationLogDetailHistoryController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", 'Excel'
        ];
        return OperationLogDetailHistoryController;
    }(App.BaseController));
    App.OperationLogDetailHistoryController = OperationLogDetailHistoryController;
    angular.module('app').controller("OperationLogDetailHistoryController", OperationLogDetailHistoryController);
})(App || (App = {}));

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var App;
(function (App) {
    "use strict";
    var SmsListController = /** @class */ (function (_super) {
        __extends(SmsListController, _super);
        function SmsListController(location, state, stateParams, url, search, save, authService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.sms, url.smsQuery, excel) || this;
            _this.search();
            return _this;
        }
        SmsListController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", 'Excel'
        ];
        return SmsListController;
    }(App.BaseController));
    App.SmsListController = SmsListController;
    angular.module("app").controller("SmsListController", SmsListController);
    var SmsController = /** @class */ (function (_super) {
        __extends(SmsController, _super);
        function SmsController(location, state, stateParams, url, search, save, authService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.sms, url.smsQuery, excel) || this;
            _this.selectedRow = null;
            _this.isUpdateMode = false;
            if (_this.stateParams["id"]) {
                _this.isUpdateMode = true;
                _this.edit(_this.stateParams["id"]);
            }
            return _this;
        }
        SmsController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", 'Excel'
        ];
        return SmsController;
    }(App.BaseController));
    App.SmsController = SmsController;
    angular.module("app").controller("SmsController", SmsController);
    var SmsHistoryController = /** @class */ (function (_super) {
        __extends(SmsHistoryController, _super);
        function SmsHistoryController(location, state, stateParams, url, search, save, authService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.smsHistory, url.smsHistoryQuery, excel) || this;
            _this.search();
            return _this;
        }
        SmsHistoryController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", 'Excel'
        ];
        return SmsHistoryController;
    }(App.BaseController));
    App.SmsHistoryController = SmsHistoryController;
    angular.module("app").controller("SmsHistoryController", SmsHistoryController);
})(App || (App = {}));

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var App;
(function (App) {
    "use strict";
    var SmsHooksController = /** @class */ (function (_super) {
        __extends(SmsHooksController, _super);
        function SmsHooksController(location, state, stateParams, url, search, save, authService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.smsHook, url.smsHookQuery, excel) || this;
            _this.search();
            return _this;
        }
        SmsHooksController.prototype.search = function () {
            var self = this;
            var successCallback = function (response) {
                console.log(response);
                self.models = response.Models;
                if (self.models.length === 0) {
                    console.log('No search result found');
                    alert('No search result found');
                }
                else {
                    self.csvModels = [];
                    for (var i = 0; i < self.models.length; i++) {
                        self.csvModels.push(self.generateCsvModel(self.models[i]));
                    }
                }
                self.searchRequest.totalPage = Math.ceil(response.Count / 10);
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.searchService
                .search(self.searchRequest, self.queryUrl + "/SearchHooks")
                .then(successCallback, errorCallback);
        };
        SmsHooksController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", 'Excel'
        ];
        return SmsHooksController;
    }(App.BaseController));
    App.SmsHooksController = SmsHooksController;
    angular.module("app").controller("SmsHooksController", SmsHooksController);
    var SmsHookController = /** @class */ (function (_super) {
        __extends(SmsHookController, _super);
        function SmsHookController(location, state, stateParams, url, search, save, authService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.smsHook, url.smsHookQuery, excel) || this;
            _this.selectedRow = null;
            _this.isUpdateMode = false;
            if (_this.stateParams["id"]) {
                _this.isUpdateMode = true;
                _this.edit2(_this.stateParams["id"]);
            }
            return _this;
        }
        SmsHookController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", 'Excel'
        ];
        return SmsHookController;
    }(App.BaseController));
    App.SmsHookController = SmsHookController;
    angular.module("app").controller("SmsHookController", SmsHookController);
    var HookDetailsController = /** @class */ (function (_super) {
        __extends(HookDetailsController, _super);
        function HookDetailsController(location, state, stateParams, url, search, save, authService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.hookDetail, url.hookDetailQuery, excel) || this;
            _this.search();
            return _this;
        }
        HookDetailsController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", 'Excel'
        ];
        return HookDetailsController;
    }(App.BaseController));
    App.HookDetailsController = HookDetailsController;
    angular.module("app").controller("HookDetailsController", HookDetailsController);
    var HookDetailController = /** @class */ (function (_super) {
        __extends(HookDetailController, _super);
        function HookDetailController(location, state, stateParams, url, search, save, authService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.hookDetail, url.hookDetailQuery, excel) || this;
            _this.loadSmsHooks();
            _this.selectedRow = null;
            _this.isUpdateMode = false;
            if (_this.stateParams["id"]) {
                _this.isUpdateMode = true;
                _this.edit2(_this.stateParams["id"]);
            }
            return _this;
        }
        HookDetailController.prototype.loadSmsHooks = function () {
            var self = this;
            var successCallback = function (response) {
                console.log(response);
                self.smsHooks = response.Models;
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.searchService
                .search(self.searchRequest, self.url.smsHookQuery + "/Dropdown")
                .then(successCallback, errorCallback);
        };
        HookDetailController.prototype.groupChanged = function () {
            console.log(this.model.smsHookId);
        };
        HookDetailController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", 'Excel'
        ];
        return HookDetailController;
    }(App.BaseController));
    App.HookDetailController = HookDetailController;
    angular.module("app").controller("HookDetailController", HookDetailController);
})(App || (App = {}));

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var App;
(function (App) {
    "use strict";
    var ProductCategoryController = /** @class */ (function (_super) {
        __extends(ProductCategoryController, _super);
        function ProductCategoryController(location, state, stateParams, url, search, save, authService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.product, url.productQuery, excel) || this;
            _this.loadProductGroups();
            _this.selectedRow = null;
            _this.isUpdateMode = false;
            if (_this.stateParams["id"]) {
                _this.isUpdateMode = true;
                _this.edit2(_this.stateParams["id"]);
            }
            return _this;
        }
        ProductCategoryController.prototype.loadProductGroups = function () {
            var self = this;
            var successCallback = function (response) {
                console.log(response);
                self.productGroups = response.Models;
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.searchRequest["isProductGroupActive"] = true;
            self.searchService
                .search(self.searchRequest, self.url.productGroupQuery + "/Dropdown")
                .then(successCallback, errorCallback);
        };
        ProductCategoryController.prototype.groupChanged = function () {
            console.log(this.model.productGroupId);
        };
        ProductCategoryController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", 'Excel'
        ];
        return ProductCategoryController;
    }(App.BaseController));
    App.ProductCategoryController = ProductCategoryController;
    angular.module("app").controller("ProductCategoryController", ProductCategoryController);
    var ProductCategoriesController = /** @class */ (function (_super) {
        __extends(ProductCategoriesController, _super);
        function ProductCategoriesController(location, state, stateParams, url, search, save, authService, localStorageService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.product, url.productQuery, excel) || this;
            _this.headers = ["id", "name", "productGroupName", "modified"];
            _this.searchRequest.isIncludeParents = true;
            _this.localStorageService = localStorageService;
            var page = _this.localStorageService.get(App.LocalStorageKeys.ProductCategoryListPageNo);
            if (!page) {
                _this.localStorageService.save(App.LocalStorageKeys.ProductCategoryListPageNo, 1);
                page = 1;
            }
            _this.searchRequest.page = page;
            _this.search();
            return _this;
        }
        ProductCategoriesController.prototype.loadProductGroups = function () {
            var self = this;
            var successCallback = function (response) {
                console.log(response);
                self.productGroups = response.Models;
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.searchService
                .search(self.searchRequest, self.url.productGroupQuery + "/Dropdown")
                .then(successCallback, errorCallback);
        };
        ProductCategoriesController.prototype.goto = function (page) {
            var self = this;
            self.localStorageService.save(App.LocalStorageKeys.ProductCategoryListPageNo, page);
            _super.prototype.goto.call(this, page);
        };
        ProductCategoriesController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", "LocalStorageService", 'Excel'
        ];
        return ProductCategoriesController;
    }(App.BaseController));
    App.ProductCategoriesController = ProductCategoriesController;
    angular.module("app").controller("ProductCategoriesController", ProductCategoriesController);
})(App || (App = {}));

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var App;
(function (App) {
    var ProductDetailsController = /** @class */ (function (_super) {
        __extends(ProductDetailsController, _super);
        function ProductDetailsController(location, state, stateParams, url, search, save, authService, localStorageService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.productDetail, url.productDetailQuery, excel) || this;
            _this.headers = ["id", "barCode", "name", "type", "costPrice", "dealerPrice", "salePrice", "sold", "onHand", "modified"];
            _this.localStorageService = localStorageService;
            var page = _this.localStorageService.get(App.LocalStorageKeys.ProductDetailsListPageNo);
            if (!page) {
                _this.localStorageService.save(App.LocalStorageKeys.ProductDetailsListPageNo, 1);
                page = 1;
            }
            _this.searchRequest.page = page;
            _this.search();
            return _this;
        }
        ProductDetailsController.prototype.goto = function (page) {
            var self = this;
            self.localStorageService.save(App.LocalStorageKeys.ProductDetailsListPageNo, page);
            _super.prototype.goto.call(this, page);
        };
        ProductDetailsController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", "LocalStorageService", 'Excel'
        ];
        return ProductDetailsController;
    }(App.BaseController));
    App.ProductDetailsController = ProductDetailsController;
    angular.module('app').controller('ProductDetailsController', ProductDetailsController);
    var ProductDetailController = /** @class */ (function (_super) {
        __extends(ProductDetailController, _super);
        function ProductDetailController(location, state, stateParams, url, search, save, authService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.productDetail, url.productDetailQuery, excel) || this;
            _this.productSearchRequest = new App.SearchRequest("", "Modified", "False", "");
            _this.brandSearchRequest = new App.SearchRequest("", "Modified", "False", "");
            _this.loadProductCategories();
            _this.loadBrands();
            _this.selectedRow = null;
            _this.isUpdateMode = false;
            if (_this.stateParams["id"]) {
                _this.isUpdateMode = true;
                _this.edit(_this.stateParams["id"]);
            }
            return _this;
        }
        ProductDetailController.prototype.loadProductCategories = function () {
            var self = this;
            var successCallback = function (response) {
                console.log('product Categories ', response);
                self.productCategories = response.Models;
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.productSearchRequest["isProductCategoryActive"] = true;
            self.searchService
                .search(self.productSearchRequest, self.url.productQuery + "/Dropdown")
                .then(successCallback, errorCallback);
        };
        ProductDetailController.prototype.categoryChanged = function () {
            console.log(this.model.productCategoryId);
        };
        ProductDetailController.prototype.loadBrands = function () {
            var self = this;
            var successCallback = function (response) {
                console.log('brands ', response);
                self.brands = response.Models;
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.searchService
                .search(self.brandSearchRequest, self.url.brandQuery + "/Dropdown")
                .then(successCallback, errorCallback);
        };
        ProductDetailController.prototype.productChanged = function () {
            console.log(this.model.productCategoryId);
        };
        ProductDetailController.prototype.brandChanged = function () {
            console.log(this.model.brandId);
        };
        ProductDetailController.prototype.getBarcode = function () {
            var self = this;
            var successCallback = function (response) {
                self.model.barCode = response.toString();
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.searchService.get(self.url.productDetailQueryBarcode).then(successCallback, errorCallback);
        };
        ProductDetailController.prototype.downloadBarcode = function () {
            var self = this;
            var url = self.url.barcodeImage + "/Download?id=" + self.model.id;
            window.open(url, "_blank");
        };
        ProductDetailController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", 'Excel'
        ];
        return ProductDetailController;
    }(App.BaseController));
    App.ProductDetailController = ProductDetailController;
    angular.module("app").controller("ProductDetailController", ProductDetailController);
})(App || (App = {}));

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var App;
(function (App) {
    "use strict";
    var ProductGroupsController = /** @class */ (function (_super) {
        __extends(ProductGroupsController, _super);
        function ProductGroupsController(location, state, stateParams, url, search, save, authService, localStorageService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.productGroup, url.productGroupQuery, excel) || this;
            _this.headers = ["id", "name", "modified"];
            _this.localStorageService = localStorageService;
            var page = _this.localStorageService.get(App.LocalStorageKeys.ProductGroupListPageNo);
            if (!page) {
                _this.localStorageService.save(App.LocalStorageKeys.ProductGroupListPageNo, 1);
                page = 1;
            }
            _this.searchRequest.page = page;
            _this.search();
            return _this;
        }
        ProductGroupsController.prototype.goto = function (page) {
            var self = this;
            self.localStorageService.save(App.LocalStorageKeys.ProductGroupListPageNo, page);
            _super.prototype.goto.call(this, page);
        };
        ProductGroupsController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", "LocalStorageService", 'Excel'
        ];
        return ProductGroupsController;
    }(App.BaseController));
    App.ProductGroupsController = ProductGroupsController;
    angular.module("app").controller("ProductGroupsController", ProductGroupsController);
    var ProductGroupController = /** @class */ (function (_super) {
        __extends(ProductGroupController, _super);
        function ProductGroupController(location, state, stateParams, url, search, save, authService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.productGroup, url.productGroupQuery, excel) || this;
            _this.selectedRow = null;
            _this.isUpdateMode = false;
            if (_this.stateParams["id"]) {
                _this.isUpdateMode = true;
                _this.edit(_this.stateParams["id"]);
            }
            return _this;
        }
        ProductGroupController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", 'Excel'
        ];
        return ProductGroupController;
    }(App.BaseController));
    App.ProductGroupController = ProductGroupController;
    angular.module("app").controller("ProductGroupController", ProductGroupController);
})(App || (App = {}));

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var App;
(function (App) {
    "use strict";
    var ProductHistoryController = /** @class */ (function (_super) {
        __extends(ProductHistoryController, _super);
        function ProductHistoryController(location, $state, $stateParams, url, searchService, saveService, auth, localStorageService, excel) {
            var _this = _super.call(this, location, $state, $stateParams, url, searchService, saveService, auth, url.productDetail, url.productDetailQuery, excel) || this;
            _this.headers = ["invoiceNumber", "date", "type", "unitPrice", "total"];
            _this.totalPendingQuantity = 0;
            _this.totalProcessingQuantity = 0;
            _this.totalDoneQuantity = 0;
            _this.totalPurchaseQuantity = 0;
            _this.totalUnitPrice = 0;
            _this.totalAmount = 0;
            if (_this.stateParams["id"]) {
                _this.loadProductHistory();
                _this.loadWarehouses();
            }
            else {
                _this.back();
            }
            _this.localStorageService = localStorageService;
            _this.searchRequest.startDate = _this.startDate.toJSON();
            _this.searchRequest.endDate = _this.endDate.toJSON();
            return _this;
        }
        ProductHistoryController.prototype.detail = function (p, index) {
            this.selectedRow = index;
        };
        ProductHistoryController.prototype.selectWarehouse = function () {
            var self = this;
            var successCallback = function (response) {
                self.productDetailViewModel = response.data["item1"];
                self.models = response.data["item2"];
                self.csvModels = [];
                for (var i = 0; i < self.models.length; i++) {
                    // do your stuff for csv model generation
                    self.csvModels.push(self.generateCsvModel(self.models[i]));
                }
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            var searchRequest = new App.ProductHistorySearchRequest('', 'Modified', 'false');
            searchRequest.warehouseId = self.selectedWarehouseId; //'1ec5b7ae-ef89-4ae1-b8c3-c89863a35a2e'
            searchRequest.parentId = this.stateParams["id"];
            searchRequest.page = 1;
            searchRequest.perPageCount = 100;
            self.searchService
                .search(searchRequest, self.url.productDetailQuery + "/History")
                .then(successCallback, errorCallback);
        };
        ProductHistoryController.prototype.loadProductHistory = function () {
            var self = this;
            self.totalPendingQuantity = 0;
            self.totalProcessingQuantity = 0;
            self.totalDoneQuantity = 0;
            self.totalPurchaseQuantity = 0;
            self.totalUnitPrice = 0;
            self.totalAmount = 0;
            var successCallback = function (response) {
                self.productDetailViewModel = response.data["item1"];
                self.models = response.data["item2"];
                self.csvModels = [];
                for (var i = 0; i < self.models.length; i++) {
                    var m = self.models[i];
                    if (m.type === 'Sale' && m.orderState == 1) {
                        self.totalPendingQuantity += m.quantity;
                    }
                    if (m.type === 'Sale' && m.orderState > 1 && m.orderState < 5) {
                        self.totalProcessingQuantity += m.quantity;
                    }
                    if (m.type === 'Sale' && m.orderState > 4 && m.orderState < 7) {
                        self.totalDoneQuantity += m.quantity;
                    }
                    if (m.type === 'Purchase') {
                        self.totalPurchaseQuantity += m.quantity;
                    }
                    self.totalUnitPrice += m.unitPrice;
                    self.totalAmount += m.total;
                    // do your stuff for csv model generation
                    self.csvModels.push(self.generateCsvModel(self.models[i]));
                }
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            //var searchRequest = new SearchRequest();
            var searchRequest = new App.ProductHistorySearchRequest('', 'Modified', 'false');
            //searchRequest.warehouseId = '1ec5b7ae-ef89-4ae1-b8c3-c89863a35a2e';
            searchRequest.startDate = this.startDate.toJSON();
            searchRequest.endDate = this.endDate.toJSON();
            searchRequest.parentId = this.stateParams["id"];
            searchRequest.page = 1;
            searchRequest.perPageCount = 100;
            self.searchService
                .search(searchRequest, self.url.productDetailQuery + "/History")
                .then(successCallback, errorCallback);
        };
        ProductHistoryController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", 'Excel'
        ];
        return ProductHistoryController;
    }(App.BaseController));
    App.ProductHistoryController = ProductHistoryController;
    angular.module("app").controller("ProductHistoryController", ProductHistoryController);
})(App || (App = {}));

var App;
(function (App) {
    var ProfileController = /** @class */ (function () {
        function ProfileController($location, url, search, save) {
            this.$location = $location;
            this.url = url;
            this.searchService = search;
            this.saveService = save;
            this.activate();
        }
        ProfileController.prototype.$onInit = function () { };
        ProfileController.prototype.activate = function () {
            this.user = new App.UserInfoViewModel();
            this.changePasswordModel = new App.ChangePasswordModel();
            this.changePasswordModel.newPassword = "";
            this.getUserInfo();
        };
        ProfileController.prototype.getUserInfo = function () {
            var self = this;
            var successCallback = function (response) {
                console.log(response);
                self.user = response;
                self.disable = self.user.userName === "admin@demo1.com" || self.user.userName === "admin@demo1.com";
            };
            var errorCallback = function (error) {
                console.log(error);
                alert(error.message);
            };
            self.searchService.get(self.url.profileUrl).then(successCallback, errorCallback);
        };
        ProfileController.prototype.update = function () {
            var self = this;
            var successCallback = function (response) {
                self.activate();
                alert("Password changed successfully.");
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.saveService.save(self.changePasswordModel, self.url.changePasswordUrl).then(successCallback, errorCallback);
        };
        ProfileController.$inject = ["$location", "UrlService", "SearchService", "SaveService"];
        return ProfileController;
    }());
    App.ProfileController = ProfileController;
    angular.module("app").controller("ProfileController", ProfileController);
})(App || (App = {}));

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var App;
(function (App) {
    "use strict";
    var PurchasesController = /** @class */ (function (_super) {
        __extends(PurchasesController, _super);
        function PurchasesController(location, state, stateParams, url, search, save, authService, localStorageService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.purchase, url.purchaseQuery, excel) || this;
            _this.totalPaid = 0;
            _this.totalDue = 0;
            _this.headers = ["id", "totalAmount", "paidAmount", "modified"];
            _this.localStorageService = localStorageService;
            _this.supplierSearchRequest = new App.SearchRequest("", "Modified", "False", "");
            _this.loadSuppliers();
            _this.searchRequest.isIncludeParents = true;
            var page = _this.localStorageService.get(App.LocalStorageKeys.SaleListPageNo);
            if (!page) {
                _this.localStorageService.save(App.LocalStorageKeys.SaleListPageNo, 1);
                page = 1;
            }
            _this.searchRequest.page = page;
            _this.searchByWarehouse().then(function (result) { console.log('purchases searched by warehouse'); });
            return _this;
        }
        PurchasesController.prototype.search = function () {
            var self = this;
            self.totalPaid = 0;
            self.totalDue = 0;
            var successCallback = function (response) {
                console.log(response);
                self.models = response.Models;
                if (self.models.length === 0) {
                    console.log('No search result found');
                }
                else {
                    self.generateCsvModels();
                    for (var i = 0; i < self.models.length; i++) {
                        self.totalPaid += self.models[i].totalAmount;
                        self.totalDue += self.models[i].dueAmount;
                    }
                }
                self.totalCount = response.Count;
                self.searchRequest.totalPage = Math.ceil(response.Count / 10);
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.searchService
                .search(self.searchRequest, self.queryUrl + "/Search")
                .then(successCallback, errorCallback);
        };
        PurchasesController.prototype.loadSuppliers = function () {
            var self = this;
            var successCallback = function (response) {
                console.log('suppliers ', response);
                self.suppliers = response.Models;
                var supplier = new App.Supplier();
                supplier.id = App.Guid.defaultGuid();
                supplier["text"] = "All";
                self.suppliers.splice(0, 0, supplier);
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.searchService
                .search(self.supplierSearchRequest, self.url.supplierQuery + "/Dropdown")
                .then(successCallback, errorCallback);
        };
        PurchasesController.prototype.goto = function (page) {
            var self = this;
            self.localStorageService.save(App.LocalStorageKeys.SaleListPageNo, page);
            _super.prototype.goto.call(this, page);
        };
        PurchasesController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", "LocalStorageService", 'Excel'
        ];
        return PurchasesController;
    }(App.BaseController));
    App.PurchasesController = PurchasesController;
    angular.module("app").controller("PurchasesController", PurchasesController);
    var PurchaseController = /** @class */ (function (_super) {
        __extends(PurchaseController, _super);
        function PurchaseController(location, state, stateParams, url, search, save, authService, excel, localStorageService) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.purchase, url.purchaseQuery, excel) || this;
            _this.purchaseOrderDate = new Date();
            return _this;
        }
        PurchaseController.prototype.activate = function () {
            var _this = this;
            this.supplierSearchRequest = new App.SearchRequest("", "Modified", "False", "");
            this.searchRequest = new App.SearchRequest("", "Modified", "False", "");
            this.productDetailSearchRequest = new App.SearchRequest("", "Modified", "False", "");
            this.productDetailSearchRequest["isProductActive"] = true;
            this.model = new App.PurchaseViewModel();
            this.model.orderNumber = "P-" + this.generateOrderNumber();
            this.model.paidAmount = 0;
            this.purchaseDetail = new App.PurchaseDetailViewModel();
            this.selectedRow = null;
            this.models = [];
            this.isUpdateMode = false;
            this.totalCount = 0;
            this.loadSuppliers();
            this.loadProductDetails();
            this.loadWarehouses().then(function (warehouses) {
                _this.model.warehouseId = warehouses[0].id;
            });
        };
        PurchaseController.prototype.loadSuppliers = function () {
            var self = this;
            var successCallback = function (response) {
                console.log('suppliers ', response);
                self.suppliers = response.Models;
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.searchService
                .search(self.supplierSearchRequest, self.url.supplierQuery + "/Dropdown")
                .then(successCallback, errorCallback);
        };
        PurchaseController.prototype.loadProductDetails = function () {
            var self = this;
            if (self.productDetailSearchRequest.keyword.length < 3) {
                return;
            }
            var successCallback = function (response) {
                console.log('products ', response);
                self.productDetails = response.Models;
                self.productDetailsCount = response.Count;
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.searchService
                .search(self.productDetailSearchRequest, self.url.productDetailQuery + "/Search")
                .then(successCallback, errorCallback);
        };
        PurchaseController.prototype.getPriceAndName = function () {
            // this.setProductDetail(this.purchaseDetail.productDetail);
            //this.purchaseDetail.totalAmount = this.purchaseDetail.quantity * this.purchaseDetail.pricePerUnit;
            this.purchaseDetail.costTotal = this.purchaseDetail.quantity * this.purchaseDetail.productDetail.costPrice;
            //this.productDetail.productName =
            this.purchaseDetail.costPricePerUnit = this.purchaseDetail.costPricePerUnit;
        };
        PurchaseController.prototype.decreaseFromCart = function (index) {
            var quantity = this.model.purchaseDetails[index].quantity - 1;
            if (quantity === 0) {
                this.removeFromCart(index);
            }
            else {
                var costPricePerUnit = this.model.purchaseDetails[index].costPricePerUnit;
                this.model.purchaseDetails[index].quantity = quantity;
                this.model.purchaseDetails[index].costTotal = costPricePerUnit * quantity;
            }
            this.updateCartTotal();
        };
        PurchaseController.prototype.addToCart2 = function (detail) {
            var exists = this.model.purchaseDetails.some(function (x) { return x.productDetailId === detail.id; });
            if (exists) {
                alert('Item : ' + detail.name + " is already added in cart.");
                return;
            }
            this.setProductDetail(detail);
            this.addToCart();
        };
        PurchaseController.prototype.setProductDetail = function (detail) {
            this.purchaseDetail.costPricePerUnit = detail.costPrice;
            this.purchaseDetail.productDetailId = detail.id;
            this.purchaseDetail.name = detail.name;
            this.purchaseDetail.productDetail = detail;
            this.purchaseDetail.quantity = 1;
            this.getPriceAndName();
        };
        PurchaseController.prototype.addToCart = function () {
            this.model.purchaseDetails.push(this.purchaseDetail);
            this.updateCartTotal();
            this.purchaseDetail = new App.PurchaseDetailViewModel();
        };
        PurchaseController.prototype.editCart = function (p) {
            this.purchaseDetail = p;
            this.removeByAttr(this.model.purchaseDetails, 'productDetailId', p.productDetailId);
        };
        PurchaseController.prototype.removeByAttr = function (arr, attr, value) {
            var i = arr.length;
            while (i--) {
                if (arr[i]
                    && arr[i].hasOwnProperty(attr)
                    && (arguments.length > 2 && arr[i][attr] === value)) {
                    arr.splice(i, 1);
                }
            }
            return arr;
        };
        PurchaseController.prototype.removeFromCart = function (index) {
            // this.removeByAttr(this.model.purchaseDetails, 'productDetailId', p.productDetailId);
            this.model.purchaseDetails.splice(index, 1);
            this.updateCartTotal();
        };
        //private updateTransactions(): void {
        //    var self = this;
        //    self.model.paidAmount = 0;
        //    $.each(self.model.transactions,
        //        function (x) {
        //            let temp = this as Transaction;
        //            self.model.paidAmount += temp.amount;
        //        });
        //    self.model.dueAmount = self.model.payableTotalAmount - self.model.paidAmount;
        //    self.transaction = new Transaction();
        //    self.transaction.transactionMedium = "Cash";
        //    self.transaction.paymentGatewayService = "Cash";
        //}
        PurchaseController.prototype.updateCartTotal = function () {
            var _this = this;
            var self = this;
            // self.model.otherAmount = 0;
            self.model.productAmount = 0;
            self.model.purchaseDetails.forEach(function (p) { return _this.model.productAmount += p.costTotal; });
            self.model.totalAmount = self.model.productAmount;
            self.updateTotal();
        };
        PurchaseController.prototype.updateTotal = function () {
            var self = this;
            self.model.totalAmount = self.model.productAmount + self.model.shippingAmount;
            self.model.totalAmount = self.model.totalAmount - self.model.discountAmount;
            self.model.totalAmount = self.model.totalAmount + self.model.otherAmount;
            self.model.dueAmount = self.model.totalAmount - self.model.paidAmount;
        };
        PurchaseController.prototype.updateQuantityAll = function () {
            for (var i = 0; i < this.model.purchaseDetails.length; i++) {
                this.updateQuantity(i);
            }
        };
        PurchaseController.prototype.increaseToCart = function (index) {
            var quantity = this.model.purchaseDetails[index].quantity + 1;
            var costPricePerUnit = this.model.purchaseDetails[index].costPricePerUnit;
            this.model.purchaseDetails[index].quantity = quantity;
            this.model.purchaseDetails[index].costTotal = costPricePerUnit * quantity;
            this.updateCartTotal();
        };
        PurchaseController.prototype.updateQuantity = function (index) {
            var costPricePerUnit = this.model.purchaseDetails[index].costPricePerUnit;
            var quantity = this.model.purchaseDetails[index].quantity;
            this.model.purchaseDetails[index].quantity = quantity;
            this.model.purchaseDetails[index].costTotal = costPricePerUnit * quantity;
            this.updateCartTotal();
        };
        //updateTotal(): void {
        //    var self = this;
        //    self.model.totalAmount = self.model.productAmount + self.model.deliveryChargeAmount + self.model.paymentServiceChargeAmount;
        //    self.model.payableTotalAmount = self.model.totalAmount - self.model.discountAmount;
        //    self.model.dueAmount = self.model.payableTotalAmount - self.model.paidAmount;
        //}
        PurchaseController.prototype.save = function () {
            var self = this;
            var successCallback = function (response) {
                self.activate();
            };
            var errorCallback = function (error) {
                console.log(error);
                alert("Error occurred during save. Check your data or please contact with administrator.");
            };
            for (var i = 0; i < self.model.purchaseDetails.length; i++) {
                self.model.purchaseDetails[i].productDetail = null;
                self.model.purchaseDetails[i].created = new Date().toDateString();
                self.model.purchaseDetails[i].modified = new Date().toDateString();
                self.model.purchaseDetails[i].createdBy = self.authService.accountInfo.userName;
                self.model.purchaseDetails[i].createdFrom = "Browser";
                self.model.purchaseDetails[i].modifiedBy = self.authService.accountInfo.userName;
                self.model.purchaseDetails[i].id = "1";
                self.model.purchaseDetails[i].shopId = self.model.purchaseDetails[i].shopId != null ? self.model.purchaseDetails[i].shopId : "1";
            }
            self.saveService.save(self.model, self.commandUrl + "/Add").then(successCallback, errorCallback);
        };
        PurchaseController.prototype.dateChanged = function () {
            var self = this;
            console.log(self.purchaseOrderDate);
            self.model.purchaseOrderDate = self.purchaseOrderDate.toDateString();
        };
        PurchaseController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", 'Excel', 'localStorageService'
        ];
        return PurchaseController;
    }(App.BaseController));
    App.PurchaseController = PurchaseController;
    angular.module("app").controller("PurchaseController", PurchaseController);
})(App || (App = {}));

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var App;
(function (App) {
    var PurchaseDetailController = /** @class */ (function (_super) {
        __extends(PurchaseDetailController, _super);
        function PurchaseDetailController(location, state, stateParams, url, search, save, authService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.sale, url.purchaseQuery, excel) || this;
            _this.purchaseTotal = 0;
            if (_this.stateParams["id"]) {
                _this.edit(_this.stateParams["id"]);
            }
            else {
                _this.back();
            }
            return _this;
        }
        PurchaseDetailController.prototype.loadDetail = function () {
            var _this = this;
            var self = this;
            var successCallback = function (response) {
                _this.model = response.data;
                console.log(_this.model);
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            var searchRequest = new App.SearchRequest();
            searchRequest.id = this.stateParams["id"];
            searchRequest.page = -1;
            var purchaseId = this.stateParams["id"];
            self.searchService
                .search(searchRequest, self.url.purchaseQuery + "/Detail?id=" + purchaseId)
                .then(successCallback, errorCallback);
        };
        PurchaseDetailController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", "$uibModal", 'Excel'
        ];
        return PurchaseDetailController;
    }(App.BaseController));
    App.PurchaseDetailController = PurchaseDetailController;
    angular.module("app").controller("PurchaseDetailController", PurchaseDetailController);
    var PurchaseReturnController = /** @class */ (function (_super) {
        __extends(PurchaseReturnController, _super);
        function PurchaseReturnController(location, state, stateParams, url, search, save, authService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.purchase, url.purchaseQuery, excel) || this;
            if (_this.stateParams["id"]) {
                _this.purchaseDetail = new App.PurchaseDetailViewModel();
                _this.productDetailSearchRequest = new App.SearchRequest();
                _this.loadDetail();
                _this.loadProductDetails();
            }
            else {
                _this.back();
            }
            return _this;
        }
        PurchaseReturnController.prototype.loadDetail = function () {
            var _this = this;
            console.log(this.stateParams);
            var self = this;
            var successCallback = function (response) {
                self.model = response.data;
                console.log(_this.model);
                self.due = self.model.dueAmount;
                self.transaction.orderId = self.model.id;
                self.transaction.orderNumber = self.model.orderNumber;
                self.transaction.accountHeadId = "a";
                self.transaction.parentId = "a";
                self.transaction.paymentGatewayService = "Cash";
                self.transaction.accountHeadName = "Purchase";
                self.transaction.paymentGatewayServiceName = "Cash";
                self.transaction.transactionMediumName = "Cash";
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            var searchRequest = new App.SearchRequest();
            searchRequest.id = this.stateParams["id"];
            searchRequest.page = -1;
            var id = this.stateParams["id"];
            var httpUrl = self.url.purchaseQuery + "/Detail?id=" + id;
            self.searchService
                .search(searchRequest, httpUrl)
                .then(successCallback, errorCallback);
            self.transaction = new App.Transaction();
            self.transaction.amount = 0;
            self.transaction.transactionFlowType = "Expense";
            self.transaction.created = new Date().toDateString();
            self.transaction.modified = new Date().toDateString();
            self.transaction.shopId = "1";
            self.transaction.createdFrom = "Bizbook365";
            self.transaction.createdBy = "1";
            self.transaction.modifiedBy = "1";
            self.transaction.accountHeadId = "a";
            self.transaction.parentId = "a";
            self.transaction.paymentGatewayService = "Cash";
            self.transaction.accountHeadName = "Purchase";
            self.transaction.paymentGatewayServiceName = "Cash";
            self.transaction.transactionMediumName = "Cash";
            self.due = 0;
        };
        PurchaseReturnController.prototype.loadProductDetails = function () {
            var self = this;
            if (self.productDetailSearchRequest.keyword.length < 3) {
                return;
            }
            var successCallback = function (response) {
                console.log('products--- ', response);
                self.productDetails = response.Models;
                self.productDetailsCount = response.Count;
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.searchService
                .search(self.productDetailSearchRequest, self.url.productDetailQuery + "/Search")
                .then(successCallback, errorCallback);
        };
        PurchaseReturnController.prototype.addToCart2 = function (detail) {
            this.setProductDetail(detail);
            this.addToCart();
        };
        PurchaseReturnController.prototype.addToCart = function () {
            this.model.purchaseDetails.push(this.purchaseDetail);
            console.log('purchaseDetails result--', this.model.purchaseDetails);
            this.updateCartTotal();
            this.purchaseDetail = new App.PurchaseDetailViewModel();
        };
        PurchaseReturnController.prototype.updateCartTotal = function () {
            var _this = this;
            var self = this;
            self.due = 0;
            self.transaction.amount = 0;
            self.model.productAmount = 0;
            self.model.purchaseDetails.forEach(function (p) { return _this.model.productAmount += p.costTotal; });
            self.model.totalAmount = self.model.productAmount - self.model.discountAmount;
            self.updateTransactions();
        };
        PurchaseReturnController.prototype.updateTransactions = function () {
            var self = this;
            self.model.dueAmount = self.model.totalAmount - self.model.paidAmount;
            self.updateDue();
        };
        PurchaseReturnController.prototype.updateDue = function () {
            var self = this;
            //self.due = self.model.dueAmount + self.transaction.amount;
            self.due = self.model.dueAmount;
        };
        PurchaseReturnController.prototype.getPriceAndName = function () {
            this.purchaseDetail.costTotal = this.purchaseDetail.quantity * this.purchaseDetail.costPrice;
        };
        PurchaseReturnController.prototype.setProductDetail = function (detail) {
            this.purchaseDetail.costPricePerUnit = detail.costPrice;
            this.purchaseDetail.costPrice = detail.costPrice;
            this.purchaseDetail.productDetailId = detail.id;
            this.purchaseDetail.productDetailName = detail.name;
            this.purchaseDetail.productDetail = detail;
            this.purchaseDetail.quantity = 1;
            this.getPriceAndName();
        };
        PurchaseReturnController.prototype.updateQuantityAll = function () {
            for (var i = 0; i < this.model.purchaseDetails.length; i++) {
                this.updateQuantity(i);
            }
        };
        PurchaseReturnController.prototype.updateQuantity = function (index) {
            var costPrice = this.model.purchaseDetails[index].costPricePerUnit;
            var quantity = this.model.purchaseDetails[index].quantity;
            this.model.purchaseDetails[index].quantity = quantity;
            this.model.purchaseDetails[index].costPricePerUnit = costPrice;
            this.model.purchaseDetails[index].costTotal = costPrice * quantity;
            this.updateCartTotal();
        };
        PurchaseReturnController.prototype.increaseToCart = function (index) {
            var costPrice = this.model.purchaseDetails[index].costPricePerUnit;
            var quantity = this.model.purchaseDetails[index].quantity + 1;
            this.model.purchaseDetails[index].quantity = quantity;
            this.model.purchaseDetails[index].costTotal = costPrice * quantity;
            this.updateCartTotal();
        };
        PurchaseReturnController.prototype.decreaseFromCart = function (index) {
            var costPrice = this.model.purchaseDetails[index].costPricePerUnit;
            var quantity = this.model.purchaseDetails[index].quantity - 1;
            this.model.purchaseDetails[index].quantity = quantity;
            this.model.purchaseDetails[index].costTotal = costPrice * quantity;
            this.updateCartTotal();
        };
        PurchaseReturnController.prototype.save = function () {
            var self = this;
            console.log(this.model);
            var successCallback = function (response) {
                console.log(response);
                self.back();
            };
            var errorCallback = function (error) {
                console.log(error);
                if (error.status === 500) {
                    alert(error.data.exceptionMessage);
                }
                else {
                    alert("Error occurred");
                }
            };
            for (var i = 0; i < self.model.purchaseDetails.length; i++) {
                self.model.purchaseDetails[i].productDetail = null;
            }
            this.saveService.update(self.model, self.commandUrl + "/Return")
                .then(successCallback, errorCallback);
        };
        PurchaseReturnController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", "$uibModal", 'Excel'
        ];
        return PurchaseReturnController;
    }(App.BaseController));
    App.PurchaseReturnController = PurchaseReturnController;
    angular.module("app").controller("PurchaseReturnController", PurchaseReturnController);
    var PurchaseTransactionController = /** @class */ (function (_super) {
        __extends(PurchaseTransactionController, _super);
        function PurchaseTransactionController(location, state, stateParams, url, search, save, authService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.purchase, url.purchaseQuery, excel) || this;
            if (_this.stateParams["id"]) {
                _this.transaction = new App.Transaction();
                _this.setupDropdowns();
                _this.loadDetail();
                _this.selectedAccountInfo = new App.AccountInfo();
                _this.loadAccountInfos();
            }
            else {
                _this.back();
            }
            return _this;
        }
        PurchaseTransactionController.prototype.loadDetail = function () {
            var _this = this;
            console.log(this.stateParams);
            var self = this;
            var successCallback = function (response) {
                self.model = response.data;
                console.log(_this.model);
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            var searchRequest = new App.SearchRequest();
            searchRequest.id = this.stateParams["id"];
            searchRequest.page = -1;
            var id = this.stateParams["id"];
            var httpUrl = self.url.purchaseQuery + "/Detail?id=" + id;
            self.searchService
                .search(searchRequest, httpUrl)
                .then(successCallback, errorCallback);
        };
        PurchaseTransactionController.prototype.setupDropdowns = function () {
            var self = this;
            var success = function (response) {
                console.log(response);
                self.transactionMediums = response.transactionMediums;
                self.paymentGatewayServices = response.paymentGatewayServices;
                self.accountInfoTypes = response.accountInfoTypes;
                self.transaction.transactionMedium = "Cash";
                self.transaction.paymentGatewayService = "Cash";
                self.accountInfoType = "Cash";
            };
            var error = function (error) {
                console.log(error);
            };
            self.searchService.get(self.url.transactionQuery + "/Dropdowns").then(success, error);
            var accountSuccess = function (response) {
                console.log('account - ', response);
                var accountHeads = response.Models;
                var sale = accountHeads.filter(function (x) { return x.text === "Purchase"; })[0];
                if (sale != null) {
                    self.transaction.accountHeadId = sale.id;
                    self.transaction.accountHeadName = sale.text;
                }
            };
            var accountRequest = new App.SearchRequest();
            self.searchService.search(accountRequest, self.url.accountHeadQuery + "/Dropdown")
                .then(accountSuccess, error);
        };
        PurchaseTransactionController.prototype.save = function () {
            console.log(this.transaction);
            var self = this;
            self.transaction.orderId = self.model.id;
            self.transaction.orderNumber = self.model.orderNumber;
            self.transaction.paymentGatewayServiceName = self.transaction.paymentGatewayService;
            self.transaction.transactionMediumName = self.transaction.transactionMedium;
            self.transaction.parentId = self.model.supplierId;
            self.transaction.transactionFor = "Purchase";
            self.transaction.transactionDate = self.transactionDate.toDateString();
            self.saveService.save(self.transaction, self.url.transaction + "/Add")
                .then(function (s) { self.stateService.go('root.purchases'); }, function (e) {
                alert('error occurred');
                console.log(e);
            });
        };
        PurchaseTransactionController.prototype.loadAccountInfos = function () {
            var self = this;
            var success = function (response) {
                App.Display.log('loadAccountInfos result : ', response);
                self.accountInfos = response.Models;
                if (self.accountInfos.length > 0) {
                    for (var i = 0; i < self.accountInfos.length; i++) {
                        if (self.accountInfos[i].text == "Cash") {
                            self.selectedAccountInfo = self.accountInfos[i];
                            console.log(self.selectedAccountInfo);
                            self.transaction.accountInfoId = self.selectedAccountInfo.id;
                            break;
                        }
                    }
                }
            };
            var error = function (error) {
                App.Display.log(error);
            };
            self.searchService.search(self.searchRequest, self.url.accountInfoQuery + "/Dropdown")
                .then(success, error);
        };
        PurchaseTransactionController.prototype.accountInfoChanged = function () {
            this.transaction.accountInfoTitle = this.selectedAccountInfo["text"];
            this.transaction.accountInfoId = this.selectedAccountInfo.id;
            this.transaction.paymentGatewayServiceName = this.transaction.accountInfoTitle;
        };
        PurchaseTransactionController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", "$uibModal", 'Excel'
        ];
        return PurchaseTransactionController;
    }(App.BaseController));
    App.PurchaseTransactionController = PurchaseTransactionController;
    angular.module("app").controller("PurchaseTransactionController", PurchaseTransactionController);
})(App || (App = {}));

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var App;
(function (App) {
    "use strict";
    var PurchaseHistoryController = /** @class */ (function (_super) {
        __extends(PurchaseHistoryController, _super);
        function PurchaseHistoryController(location, $state, $stateParams, url, searchService, saveService, auth, excel) {
            var _this = _super.call(this, location, $state, $stateParams, url, searchService, saveService, auth, url.purchase, url.purchaseQuery, excel) || this;
            _this.selectedRow = null;
            return _this;
        }
        PurchaseHistoryController.prototype.activate = function () {
            console.log(this.stateParams);
            console.log('Activated');
            this.loadSupplierHistory();
        };
        PurchaseHistoryController.prototype.detail = function (p, index) {
            this.selectedRow = index;
        };
        PurchaseHistoryController.prototype.loadSupplierHistory = function () {
            var _this = this;
            var self = this;
            var successCallback = function (response) {
                _this.models = response.data["item1"];
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            var searchRequest = new App.SearchRequest();
            searchRequest.parentId = this.stateParams["purchase"];
            searchRequest.page = -1;
            self.searchService
                .search(searchRequest, self.url.supplierQuery + "/History")
                .then(successCallback, errorCallback);
        };
        PurchaseHistoryController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", 'Excel'
        ];
        return PurchaseHistoryController;
    }(App.BaseController));
    App.PurchaseHistoryController = PurchaseHistoryController;
    angular.module("app").controller("PurchaseHistoryController", PurchaseHistoryController);
})(App || (App = {}));

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var App;
(function (App) {
    "use strict";
    // for deliveryman
    var OnlineSalesDeliverymanController = /** @class */ (function (_super) {
        __extends(OnlineSalesDeliverymanController, _super);
        function OnlineSalesDeliverymanController(location, state, stateParams, url, search, save, authService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.sale, url.saleQuery, excel) || this;
            _this.total = 0;
            _this.due = 0;
            _this.search();
            return _this;
        }
        OnlineSalesDeliverymanController.prototype.search = function () {
            var self = this;
            this.due = 0;
            this.total = 0;
            var successCallback = function (response) {
                console.log(response);
                self.models = response.Models;
                if (self.models.length === 0) {
                    console.log('No search result found');
                }
                else {
                    for (var i = 0; i < self.models.length; i++) {
                        self.total += self.models[i].totalAmount;
                        self.due += self.models[i].dueAmount;
                    }
                }
                self.totalCount = response.Count;
                self.searchRequest.totalPage = Math.ceil(response.Count / 10);
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            //self.searchRequest
            self.searchService
                .search(self.searchRequest, self.queryUrl + "/SearchDelivery")
                .then(successCallback, errorCallback);
        };
        OnlineSalesDeliverymanController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", 'Excel'
        ];
        return OnlineSalesDeliverymanController;
    }(App.BaseController));
    App.OnlineSalesDeliverymanController = OnlineSalesDeliverymanController;
    angular.module("app").controller("OnlineSalesDeliverymanController", OnlineSalesDeliverymanController);
    var OnlineSalesController = /** @class */ (function (_super) {
        __extends(OnlineSalesController, _super);
        function OnlineSalesController(location, state, stateParams, url, search, save, authService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.sale, url.saleQuery, excel) || this;
            _this.search();
            return _this;
        }
        OnlineSalesController.prototype.searchOrders = function () {
            if (this.startDate != null) {
                this.searchRequest.startDate = this.startDate.toDateString();
            }
            if (this.endDate != null) {
                this.searchRequest.endDate = this.endDate.toDateString();
            }
            this.search();
        };
        OnlineSalesController.prototype.search = function () {
            var self = this;
            var successCallback = function (response) {
                console.log(response);
                self.models = response.Models;
                if (self.models.length === 0) {
                    console.log('No search result found');
                }
                self.searchRequest.totalPage = Math.ceil(response.Count / 10);
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.searchService
                .search(self.searchRequest, self.queryUrl + "/Search")
                .then(successCallback, errorCallback);
        };
        OnlineSalesController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", 'Excel'
        ];
        return OnlineSalesController;
    }(App.BaseController));
    App.OnlineSalesController = OnlineSalesController;
    angular.module("app").controller("OnlineSalesController", OnlineSalesController);
    var OnlineSaleController = /** @class */ (function (_super) {
        __extends(OnlineSaleController, _super);
        function OnlineSaleController(location, state, stateParams, url, search, save, authService, customerService, $uibModal, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.sale, url.saleQuery, excel) || this;
            _this.orderTypes = ["CashOnDelivery", "Courier", "Condition"];
            _this.transactionTypes = ["Cash", "Online", "Cheque", "Card", "Mobile", "Other"];
            _this.paymentMethods = ["Cash", "Cash (Sundarban)", "Cash (SA Paribahan)", "Rocket", "Bkash", "Ucash", "Mycash", "Easycash", "Mcash", "Other"];
            _this.orderFroms = ["Facebook", "Website", "PhoneCall", "MobileApp", "BizBook365", "Referral", "Other"];
            _this.modal = $uibModal;
            _this.selectedRow = null;
            _this.customerService = customerService;
            return _this;
        }
        OnlineSaleController.prototype.loadCustomers = function () {
            var self = this;
            var successCallback = function (response) {
                console.log('customers ', response);
                self.customers = response.Models;
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.searchService
                .search(self.customerSearchRequest, self.url.customerQuery + "/Search")
                .then(successCallback, errorCallback);
        };
        OnlineSaleController.prototype.loadCustomer = function () {
            var self = this;
            if (self.model.customerPhone.length < 11) {
                alert("Please enter valid phone number");
            }
            var successCallback = function (customer) {
                if (customer != null) {
                    console.log('customer is ', customer);
                    self.customer = customer;
                    self.model.customerName = self.customer.name;
                }
                else {
                    alert('Could not find any customer by phone number ' + self.model.customerPhone);
                }
            };
            var errorCallback = function (error) {
                console.log(error);
                alert('Error occurred');
            };
            self.customerService.loadCustomer(self.model.customerPhone).then(successCallback, errorCallback);
        };
        OnlineSaleController.prototype.selectCustomer = function (selecterCustomer) {
            this.customer = selecterCustomer;
        };
        OnlineSaleController.prototype.loadProductDetails = function () {
            var self = this;
            var successCallback = function (response) {
                console.log('products ', response);
                self.productDetails = response.Models;
                self.productDetailsCount = response.Count;
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            // self.productDetailSearchRequest.page = -1;
            self.searchService
                .search(self.productDetailSearchRequest, self.url.productDetailQuery + "/Search")
                .then(successCallback, errorCallback);
        };
        OnlineSaleController.prototype.getPriceAndName = function () {
            //this.setProductDetail(this.saleDetail.productDetail);
            this.saleDetail.total = this.saleDetail.quantity * this.saleDetail.salePricePerUnit;
        };
        OnlineSaleController.prototype.getReturn = function () {
            this.model.dueAmount = this.model.totalAmount - this.model.paidAmount;
        };
        OnlineSaleController.prototype.setProductDetail = function (detail) {
            this.saleDetail.salePricePerUnit = detail.salePrice;
            this.saleDetail.productDetailId = detail.id;
            this.saleDetail.name = detail.name;
            this.saleDetail.productDetail = detail;
        };
        OnlineSaleController.prototype.addToCart = function () {
            this.model.saleDetails.push(this.saleDetail);
            this.updateCartTotal();
            this.saleDetail = new App.SaleDetailViewModel();
        };
        OnlineSaleController.prototype.editCart = function (p) {
            this.saleDetail = p;
            this.removeByAttr(this.model.saleDetails, 'productDetailId', p.productDetailId);
        };
        OnlineSaleController.prototype.removeByAttr = function (arr, attr, value) {
            var i = arr.length;
            while (i--) {
                if (arr[i]
                    && arr[i].hasOwnProperty(attr)
                    && (arguments.length > 2 && arr[i][attr] === value)) {
                    arr.splice(i, 1);
                }
            }
            return arr;
        };
        OnlineSaleController.prototype.removeFromCart = function (p) {
            this.removeByAttr(this.model.saleDetails, 'productDetailId', p.productDetailId);
        };
        OnlineSaleController.prototype.updateCartTotal = function () {
            var _this = this;
            var self = this;
            self.model.productAmount = 0;
            self.model.saleDetails.forEach(function (p) { return _this.model.productAmount += p.total; });
            self.model.totalAmount = self.model.productAmount;
        };
        OnlineSaleController.prototype.calculateServiceCharge = function () {
            var self = this;
            self.model.otherAmount = self.serviceChargePercent * self.model.productAmount / 100;
        };
        OnlineSaleController.prototype.calculateTotal = function () {
            var self = this;
            self.model.totalAmount = self.model.productAmount + self.model.deliveryChargeAmount + self.model.otherAmount - self.model.discountAmount;
        };
        OnlineSaleController.prototype.save = function () {
            var self = this;
            var successCallback = function (response) {
                //this.print();
                self.activate();
            };
            var errorCallback = function (error) {
                console.log(error);
                if (error.status === 500) {
                    alert(error.data.exceptionMessage);
                }
            };
            for (var i = 0; i < self.model.saleDetails.length; i++) {
                self.model.saleDetails[i].productDetail = null;
                self.model.saleDetails[i].created = new Date().toDateString();
                self.model.saleDetails[i].modified = new Date().toDateString();
                self.model.saleDetails[i].createdBy = self.authService.accountInfo.userName;
                self.model.saleDetails[i].createdFrom = "Browser";
                self.model.saleDetails[i].modifiedBy = self.authService.accountInfo.userName;
                self.model.saleDetails[i].id = "1";
                self.model.saleDetails[i].shopId = self.model.saleDetails[i].shopId != null ? self.model.saleDetails[i].shopId : "1";
            }
            self.model.orderState = App.OrderState.Pending;
            //self.model.requiredDeliveryDateByCustomer = self.requ;
            this.saveService.save(self.model, self.commandUrl + "/Add")
                .then(successCallback, errorCallback);
        };
        OnlineSaleController.prototype.activate = function () {
            console.log('im in child activate. ');
            _super.prototype.activate.call(this);
            this.customerSearchRequest = new App.SearchRequest("", "Modified", "False", "");
            this.productDetailSearchRequest = new App.SearchRequest("", "Modified", "False", "");
            this.model = new App.SaleViewModel();
            this.model.orderNumber = "S-" + this.generateOrderNumber();
            //  this.model.requiredDeliveryDateByCustomer = new Date();
            this.saleDetail = new App.SaleDetailViewModel();
            this.serviceChargePercent = 0;
        };
        OnlineSaleController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", "CustomerService", "$uibModal", 'Excel'
        ];
        return OnlineSaleController;
    }(App.BaseController));
    App.OnlineSaleController = OnlineSaleController;
    angular.module("app").controller("OnlineSaleController", OnlineSaleController);
})(App || (App = {}));

// Install the angularjs.TypeScript.DefinitelyTyped NuGet package
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
angular.module('app')
    .controller('ModalInstanceCtrl', [
    '$scope', '$uibModalInstance', 'sale', 'customer', function ($scope, $uibModalInstance, sale, customer) {
        // console.log(sale);
        var vm = this;
        vm.customer = customer;
        vm.sale = sale;
        console.log(vm.sale);
        function cancel() {
            $uibModalInstance.dismiss('cancel');
        }
        //function loadSalesData() {
        //    $scope.sale = sale;
        //    $scope.customer = customer;
        //}
        //loadSalesData();
        vm.ok = function () {
            $uibModalInstance.close(sale);
        };
        //$scope.Cancel = function () {
        //    $uibModalInstance.dismiss('cancel');
        //};
    }
]);
var App;
(function (App) {
    "use strict";
    var SalesController = /** @class */ (function (_super) {
        __extends(SalesController, _super);
        function SalesController(location, state, stateParams, url, search, save, authService, localStorageService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.sale, url.saleQuery, excel) || this;
            _this.orderFroms = [];
            _this.orderTypes = [];
            _this.saleFroms = [
                "All", "BizBook365", "Facebook", "Website", "PhoneCall", "MobileApp", "Referral", "Other"
            ];
            _this.saleChannels = ["All", "Inhouse", "CashOnDelivery", "Courier", "Condition"];
            _this.headers = [];
            _this.keys = [];
            _this.searchDates = [];
            _this.searchDate = [
                "Created", "Modified", "OrderDate"
            ];
            _this.orderbyValue = "RequiredDeliveryDateByCustomer";
            _this.isAccendingValue = true;
            _this.isTaggedSale = false;
            _this.total = 0;
            _this.due = 0;
            _this.localStorageService = localStorageService;
            _this.Excel = excel;
            var stateName = _this.localStorageService.get(App.LocalStorageKeys.OrderState);
            if (!stateName) {
                _this.localStorageService.save(App.LocalStorageKeys.OrderState, _this.orderStates[0]);
                stateName = _this.orderStates[0];
            }
            _this.setSearchKeyword();
            _this.setStartDate();
            _this.setEndDate();
            var orderbyKeyword = _this.localStorageService.get(App.LocalStorageKeys.OrderByKeyword);
            if (!orderbyKeyword) {
                orderbyKeyword = _this.orderbyValue;
                _this.localStorageService.save(App.LocalStorageKeys.OrderByKeyword, _this.orderbyValue);
            }
            var isAccendingKeyword = _this.localStorageService.get(App.LocalStorageKeys.IsAscendingValue);
            if (!isAccendingKeyword) {
                isAccendingKeyword = _this.isAccendingValue;
                _this.localStorageService.save(App.LocalStorageKeys.IsAscendingValue, _this.isAccendingValue);
            }
            var isTaggedSale = _this.localStorageService.get(App.LocalStorageKeys.IsTaggedSale);
            if (isTaggedSale == null) {
                isTaggedSale = _this.isTaggedSale;
                _this.localStorageService.save(App.LocalStorageKeys.IsTaggedSale, _this.isTaggedSale);
            }
            var saleTag = _this.localStorageService.get(App.LocalStorageKeys.SaleTag);
            if (saleTag == null) {
                saleTag = "";
                _this.localStorageService.save(App.LocalStorageKeys.SaleTag, saleTag);
            }
            for (var enumMember in App.SaleFrom) {
                if (App.SaleFrom.hasOwnProperty(enumMember)) {
                    var isValueProperty = parseInt(enumMember, 10) >= 0;
                    if (isValueProperty) {
                        var i = App.SaleFrom[enumMember];
                        _this.orderFroms.push(i);
                    }
                }
            }
            for (var enumMember in App.SearchDate) {
                if (App.SearchDate.hasOwnProperty(enumMember)) {
                    var isValueProperty = parseInt(enumMember, 10) >= 0;
                    if (isValueProperty) {
                        var i = App.SearchDate[enumMember];
                        _this.searchDates.push(i);
                    }
                }
            }
            var searchDynamicDate = _this.localStorageService.get(App.LocalStorageKeys.SearchDate);
            if (searchDynamicDate == null) {
                searchDynamicDate = _this.searchDates[0];
                _this.localStorageService.save(App.LocalStorageKeys.SearchDate, searchDynamicDate);
            }
            var saleFrom = _this.localStorageService.get(App.LocalStorageKeys.SaleFrom);
            if (saleFrom == null) {
                saleFrom = _this.orderFroms[0];
                _this.localStorageService.save(App.LocalStorageKeys.SaleFrom, saleFrom);
            }
            var isOnlyDues = _this.localStorageService.get(App.LocalStorageKeys.IsOnlyDues);
            if (isOnlyDues == null) {
                isOnlyDues = false;
                _this.localStorageService.save(App.LocalStorageKeys.IsOnlyDues, isOnlyDues);
            }
            _this.searchRequest.orderBy = orderbyKeyword;
            _this.searchRequest.isAscending = isAccendingKeyword;
            //this.searchRequest.orderBy = "RequiredDeliveryDateByCustomer";
            // this.searchRequest.isAscending = "true";
            _this.searchRequest["dateSearchColumn"] = searchDynamicDate;
            _this.searchRequest["orderState"] = stateName;
            _this.searchRequest["onlyDues"] = isOnlyDues;
            _this.searchRequest["isTaggedSale"] = isTaggedSale;
            _this.searchRequest["saleTag"] = saleTag;
            _this.searchRequest["saleFrom"] = saleFrom;
            var page = _this.localStorageService.get(App.LocalStorageKeys.SaleListPageNo);
            if (!page) {
                _this.localStorageService.save(App.LocalStorageKeys.SaleListPageNo, 1);
                page = 1;
            }
            console.log("searchkey" + _this.searchRequest.keyword);
            _this.searchRequest.page = page;
            //this.searchByWarehouse().then(result => {
            //    console.log('searched.', result);
            //});
            _this.loadWarehouses().then(function (result) {
                if (_this.warehouses.length === 1) {
                    _this.searchRequest.warehouseId = _this.warehouses[0].id;
                }
                else {
                    var whId = _this.localStorageService.get(App.LocalStorageKeys.WarehouseId);
                    if (whId != null) {
                        _this.searchRequest.warehouseId = whId;
                    }
                }
                return _this.search();
            });
            return _this;
        }
        SalesController.prototype.changeSearchDate = function () {
            var self = this;
            self.localStorageService.save(App.LocalStorageKeys.SearchDate, self.searchRequest["DateSearchColumn"]);
            self.search();
        };
        SalesController.prototype.searchOrders = function () {
            if (this.startDate != null) {
                this.searchRequest.startDate = this.startDate.toDateString();
            }
            if (this.endDate != null) {
                this.searchRequest.endDate = this.endDate.toDateString();
            }
            this.search();
        };
        SalesController.prototype.getHeaders = function () {
            return this.headers;
        };
        SalesController.prototype.saveSearchKeyword = function () {
            var self = this;
            self.localStorageService.save(App.LocalStorageKeys.SearchKeyword, self.searchRequest.keyword);
        };
        SalesController.prototype.saveOrderByValue = function () {
            var self = this;
            self.localStorageService.save(App.LocalStorageKeys.OrderByKeyword, self.searchRequest.orderBy);
            self.localStorageService.save(App.LocalStorageKeys.IsAscendingValue, self.searchRequest.isAscending);
            this.search();
        };
        SalesController.prototype.search = function () {
            var self = this;
            self.total = 0;
            self.due = 0;
            var successCallback = function (response) {
                console.log(response);
                self.models = response.Models;
                if (self.models.length === 0) {
                    console.log('No search result found');
                }
                else {
                    //vm.searchRequest.keyword
                    //super.ensureKeysAreSaved(LocalStorageKeys.SaleListGridKeys, self.models[0]);
                    self.ensureKeysAreSaved(App.LocalStorageKeys.SaleListGridKeys, self.models[0]);
                    self.generateCsvModels();
                    for (var i = 0; i < self.models.length; i++) {
                        self.total += self.models[i].payableTotalAmount;
                        self.due += self.models[i].dueAmount;
                    }
                }
                self.totalCount = response.Count;
                self.searchRequest.totalPage = Math.ceil(response.Count / 10);
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.searchService
                .search(self.searchRequest, self.queryUrl + "/Search")
                .then(successCallback, errorCallback);
        };
        SalesController.prototype.showReceipt = function (id) {
            var self = this;
            var name = self.localStorageService.get2(App.LocalStorageKeys.ReceiptName);
            if (name == null) {
                name = 'root.receipt3';
                self.localStorageService.save2(App.LocalStorageKeys.ReceiptName, name);
            }
            self.navigateState(name, { id: id });
        };
        SalesController.prototype.showChalan = function (id) {
            var self = this;
            var chalanName = self.localStorageService.get(App.LocalStorageKeys.ChalanName);
            if (!chalanName) {
                chalanName = 'root.chalan';
                self.localStorageService.save(App.LocalStorageKeys.ChalanName, chalanName);
            }
            self.navigateState(chalanName, { id: id });
        };
        SalesController.prototype.goto = function (page) {
            var self = this;
            self.localStorageService.save(App.LocalStorageKeys.SaleListPageNo, page);
            _super.prototype.goto.call(this, page);
        };
        SalesController.prototype.saveChangedState = function () {
            var self = this;
            self.localStorageService.save(App.LocalStorageKeys.OrderState, self.searchRequest["orderState"]);
            self.search();
        };
        SalesController.prototype.saveChangeOrderFrom = function () {
            var self = this;
            self.localStorageService.save(App.LocalStorageKeys.SaleFrom, self.searchRequest["saleFrom"]);
            self.search();
        };
        SalesController.prototype.saveChangeOnlyDues = function () {
            var self = this;
            self.localStorageService.save(App.LocalStorageKeys.IsOnlyDues, self.searchRequest["onlyDues"]);
            self.search();
        };
        SalesController.prototype.updateKeys = function () {
            var self = this;
            self.localStorageService.save(App.LocalStorageKeys.SaleListGridKeys, self.keys);
            self.generateCsvModels();
        };
        SalesController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", "LocalStorageService", 'Excel'
        ];
        return SalesController;
    }(App.BaseController));
    App.SalesController = SalesController;
    angular.module("app").controller("SalesController", SalesController);
    var SalesDuesController = /** @class */ (function (_super) {
        __extends(SalesDuesController, _super);
        function SalesDuesController(location, state, stateParams, url, search, save, authService, localStorageService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.sale, url.saleQuery, excel) || this;
            _this.orderFroms = [];
            _this.orderTypes = [];
            _this.saleFroms = [
                "All", "BizBook365", "Facebook", "Website", "PhoneCall", "MobileApp", "Referral", "Other"
            ];
            _this.saleChannels = ["All", "Inhouse", "CashOnDelivery", "Courier", "Condition"];
            _this.headers = ["id", "date", "orderNumber", "payableTotalAmount", "paidAmount", "dueAmount", "customerName", "customerPhone"];
            _this.total = 0;
            _this.due = 0;
            _this.orderbyValue = "Modified";
            _this.isAccendingValue = true;
            _this.localStorageService = localStorageService;
            // this.searchRequest["orderState"] = this.orderStates[0];
            //this.searchRequest["saleFrom"] = this.saleFroms[0];
            //this.searchRequest["saleChannel"] = this.saleChannels[0];
            //this.searchRequest["thana"] = this.thanas[0];
            var stateName = _this.localStorageService.get(App.LocalStorageKeys.DueOrderState);
            console.log(stateName);
            if (!stateName) {
                _this.localStorageService.save(App.LocalStorageKeys.DueOrderState, _this.orderStates[0]);
                stateName = _this.orderStates[0];
            }
            var orderbyKeyword = _this.localStorageService.get(App.LocalStorageKeys.OrderByKeyword);
            if (!orderbyKeyword) {
                _this.localStorageService.save(App.LocalStorageKeys.OrderByKeyword, _this.orderbyValue);
                orderbyKeyword = _this.orderbyValue;
            }
            var isAccendingKeyword = _this.localStorageService.get(App.LocalStorageKeys.IsAscendingValue);
            if (!isAccendingKeyword) {
                _this.localStorageService.save(App.LocalStorageKeys.IsAscendingValue, _this.isAccendingValue);
                isAccendingKeyword = _this.isAccendingValue;
            }
            _this.searchRequest.orderBy = orderbyKeyword;
            _this.searchRequest.isAscending = isAccendingKeyword;
            _this.searchRequest["orderState"] = stateName;
            var page = _this.localStorageService.get(App.LocalStorageKeys.DueSaleListPageNo);
            if (!page) {
                _this.localStorageService.save(App.LocalStorageKeys.DueSaleListPageNo, 1);
                page = 1;
            }
            _this.searchRequest.page = page;
            _this.search();
            return _this;
        }
        SalesDuesController.prototype.searchOrders = function () {
            if (this.startDate != null) {
                this.searchRequest.startDate = this.startDate.toDateString();
            }
            if (this.endDate != null) {
                this.searchRequest.endDate = this.endDate.toDateString();
            }
            this.search();
        };
        SalesDuesController.prototype.search = function () {
            var self = this;
            self.total = 0;
            self.due = 0;
            var successCallback = function (response) {
                console.log(response);
                self.models = response.Models;
                if (self.models.length === 0) {
                    console.log('No search result found');
                }
                else {
                    self.csvModels = [];
                    for (var i = 0; i < self.models.length; i++) {
                        self.total += self.models[i].totalAmount;
                        self.due += self.models[i].dueAmount;
                        self.csvModels.push(self.generateCsvModel(self.models[i]));
                    }
                }
                self.totalCount = response.Count;
                self.searchRequest.totalPage = Math.ceil(response.Count / 10);
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.searchRequest["onlyDues"] = true;
            self.searchService
                .search(self.searchRequest, self.queryUrl + "/Search")
                .then(successCallback, errorCallback);
        };
        SalesDuesController.prototype.showReceipt = function (id) {
            var self = this;
            var name = self.localStorageService.get(App.LocalStorageKeys.ReceiptName);
            if (!name) {
                name = 'root.receipt2';
                self.localStorageService.save(App.LocalStorageKeys.ReceiptName, name);
            }
            self.navigateState(name, { id: id });
        };
        SalesDuesController.prototype.saveChangedState = function () {
            var self = this;
            self.localStorageService.save(App.LocalStorageKeys.DueOrderState, self.searchRequest["orderState"]);
            self.search();
        };
        SalesDuesController.prototype.saveOrderByValue = function () {
            var self = this;
            self.localStorageService.save(App.LocalStorageKeys.OrderByKeyword, self.searchRequest.orderBy);
            self.localStorageService.save(App.LocalStorageKeys.IsAscendingValue, self.searchRequest.isAscending);
            this.search();
        };
        SalesDuesController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", "LocalStorageService", 'Excel'
        ];
        return SalesDuesController;
    }(App.BaseController));
    App.SalesDuesController = SalesDuesController;
    angular.module("app").controller("SalesDuesController", SalesDuesController);
    var SalesTagMangoController = /** @class */ (function (_super) {
        __extends(SalesTagMangoController, _super);
        function SalesTagMangoController(location, state, stateParams, url, search, save, authService, localStorageService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.sale, url.saleQuery, excel) || this;
            _this.orderFroms = [];
            _this.orderTypes = [];
            _this.saleFroms = [
                "All", "BizBook365", "Facebook", "Website", "PhoneCall", "MobileApp", "Referral", "Other"
            ];
            _this.saleChannels = ["All", "Inhouse", "CashOnDelivery", "Courier", "Condition"];
            _this.headers = ["id", "date", "orderNumber", "payableTotalAmount", "paidAmount", "dueAmount", "customerName", "customerPhone"];
            _this.total = 0;
            _this.due = 0;
            _this.orderbyValue = "Modified";
            _this.isAccendingValue = true;
            _this.localStorageService = localStorageService;
            _this.search();
            return _this;
        }
        SalesTagMangoController.prototype.search = function () {
            var self = this;
            self.total = 0;
            self.due = 0;
            var successCallback = function (response) {
                console.log(response);
                self.models = response.Models;
                if (self.models.length === 0) {
                    console.log('No search result found');
                }
                else {
                    self.csvModels = [];
                    for (var i = 0; i < self.models.length; i++) {
                        self.total += self.models[i].totalAmount;
                        self.due += self.models[i].dueAmount;
                        self.csvModels.push(self.generateCsvModel(self.models[i]));
                    }
                }
                self.totalCount = response.Count;
                self.searchRequest.totalPage = Math.ceil(response.Count / 10);
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.searchRequest["isTaggedSale"] = true;
            self.searchRequest["saleTag"] = "Mango";
            self.searchService
                .search(self.searchRequest, self.queryUrl + "/Search")
                .then(successCallback, errorCallback);
        };
        SalesTagMangoController.prototype.showReceipt = function (id) {
            var self = this;
            var name = self.localStorageService.get(App.LocalStorageKeys.ReceiptName);
            if (!name) {
                name = 'root.receipt3';
                self.localStorageService.save(App.LocalStorageKeys.ReceiptName, name);
            }
            self.navigateState(name, { id: id });
        };
        SalesTagMangoController.prototype.saveChangedState = function () {
            var self = this;
            self.localStorageService.save(App.LocalStorageKeys.DueOrderState, self.searchRequest["orderState"]);
            self.search();
        };
        SalesTagMangoController.prototype.saveOrderByValue = function () {
            var self = this;
            self.localStorageService.save(App.LocalStorageKeys.OrderByKeyword, self.searchRequest.orderBy);
            self.localStorageService.save(App.LocalStorageKeys.IsAscendingValue, self.searchRequest.isAscending);
            this.search();
        };
        SalesTagMangoController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", "LocalStorageService", 'Excel'
        ];
        return SalesTagMangoController;
    }(App.BaseController));
    App.SalesTagMangoController = SalesTagMangoController;
    angular.module("app").controller("SalesTagMangoController", SalesTagMangoController);
    var SaleController = /** @class */ (function (_super) {
        __extends(SaleController, _super);
        function SaleController(scope, filter, location, state, stateParams, url, search, save, authService, customerService, $uibModal, localStorageService, anchorScroll, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.sale, url.saleQuery, excel) || this;
            _this.isOnlineSale = false;
            _this.paymentServiceChargePercent = 0;
            _this.quantityIsFloat = true;
            _this.successCallbackLoadCustomer = function (customer) {
                var self = _this;
                if (customer != null) {
                    console.log('customer is ', customer);
                    self.customer = customer;
                    self.model.customerName = self.customer.name;
                    _this.loadAddressesDropdown(self.customer.id);
                }
                else {
                    self.customer = new App.Customer();
                    alert('Could not find any customer by phone number ' + self.model.customerPhone);
                }
            };
            _this.errorCallbackLoadCustomer = function (error) {
                console.log(error);
                alert('Error occurred');
            };
            // local configuration
            _this.shouldPrint = false;
            _this.addToCartIfResultIsOne = false;
            // online
            _this.deliveryTypes = ["CashOnDelivery", "Courier", "Condition"];
            _this.paymentMethods = [
                "Cash", "Cash (Sundarban)", "Cash (SA Paribahan)", "Rocket", "Bkash", "Ucash", "Mycash", "Easycash",
                "Mcash", "Other"
            ];
            _this.orderFroms = ["Facebook", "Website", "PhoneCall", "MobileApp", "BizBook365", "Referral", "Other"];
            _this.saleFroms = ["BizBook365", "Facebook", "Website", "PhoneCall", "MobileApp", "Referral", "Other"];
            _this.saleChannels = ["Inhouse", "CashOnDelivery", "Courier", "Condition"];
            _this.saleDetailTypes = ["Sale", "Damage", "Gift", "Return"];
            _this.modal = $uibModal;
            _this.localStorageService = localStorageService;
            _this.$anchorScroll = anchorScroll;
            _this.selectedRow = null;
            _this.customerService = customerService;
            //this.loadDefaultCustomer();
            //this.loadDistricts();
            _this.setupLocalConfiguration();
            _this.requiredDeliveryDateByCustomer = new Date();
            _this.requiredDeliveryDateByCustomer.setDate(_this.requiredDeliveryDateByCustomer.getDate() + 1);
            _this.orderDate = new Date();
            var self = _this;
            scope.$watch('vm.requiredDeliveryDateByCustomer', function (newValue) {
                //$scope.workerDetail.dateOfBirth = $filter('date')(newValue, 'yyyy/MM/dd');
                var string = filter('date')((newValue), 'dd-MMMM-yyyy');
                self.model.requiredDeliveryDateByCustomer = string;
                console.log(string);
            });
            console.log('this.isOnlineSale', _this.isOnlineSale);
            return _this;
        }
        SaleController.prototype.loadOrderNumber = function () {
            var self = this;
            var successCallback = function (response) {
                console.log('order number', response);
                self.model.orderNumber = response;
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.searchService.get(self.url.saleQuery + "/OrderNumber")
                .then(successCallback, errorCallback);
        };
        SaleController.prototype.loadDealers = function () {
            var self = this;
            if (self.dealerSearchRequest.keyword.length < 3) {
                return;
            }
            var successCallback = function (response) {
                console.log('dealers', response);
                self.dealers = response.Models;
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.searchService.search(self.dealerSearchRequest, self.url.dealerQuery + "/Search")
                .then(successCallback, errorCallback);
        };
        SaleController.prototype.loadCustomers = function () {
            var self = this;
            if (self.customerSearchRequest.keyword.length < 3) {
                return;
            }
            var successCallback = function (response) {
                console.log('customers ', response);
                self.customers = response.Models;
                for (var i = 0; i < self.customers.length; i++) {
                    var addressLength = self.customers[i].addresses.length;
                    var newAddresses = [];
                    for (var j = 0; j < addressLength; j++) {
                        //Display.log(self.customers[i].addresses[j]);
                        if (self.customers[i].addresses[j].isActive) {
                            newAddresses.push(self.customers[i].addresses[j]);
                        }
                    }
                    self.customers[i].addresses = newAddresses;
                }
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.customerSearchRequest.isIncludeParents = true;
            self.customerSearchRequest["IsCustomerActive"] = true;
            self.searchService
                .search(self.customerSearchRequest, self.url.customerQuery + "/Search")
                .then(successCallback, errorCallback);
        };
        SaleController.prototype.loadGuarantor1 = function () {
            var self = this;
            if (self.guarantor1SearchRequest.keyword.length < 3) {
                return;
            }
            var successCallback = function (response) {
                console.log('gurantor1s ', response);
                self.gurantor1s = response.Models;
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.guarantor1SearchRequest.isIncludeParents = true;
            self.customerSearchRequest["IsCustomerActive"] = true;
            self.searchService
                .search(self.guarantor1SearchRequest, self.url.customerQuery + "/Search")
                .then(successCallback, errorCallback);
        };
        SaleController.prototype.selectGuarantor1 = function (g) {
            var self = this;
            self.model.guarantor1 = g;
            self.model.guarantor1Id = g.id;
        };
        SaleController.prototype.loadGuarantor2 = function () {
            var self = this;
            if (self.guarantor2SearchRequest.keyword.length < 3) {
                return;
            }
            var successCallback = function (response) {
                console.log('gurantor2s ', response);
                self.gurantor2s = response.Models;
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.guarantor2SearchRequest.isIncludeParents = true;
            self.guarantor2SearchRequest["IsCustomerActive"] = true;
            self.searchService
                .search(self.guarantor2SearchRequest, self.url.customerQuery + "/Search")
                .then(successCallback, errorCallback);
        };
        SaleController.prototype.selectGuarantor2 = function (g) {
            var self = this;
            self.model.guarantor2 = g;
            self.model.guarantor2Id = g.id;
        };
        SaleController.prototype.loadEmplyees = function () {
            var self = this;
            var successCallback = function (response) {
                console.log(response);
                self.employees = response.Models;
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.searchRequest["role"] = "Salesman";
            self.searchService
                .search(self.searchRequest, self.url.employeeInfoQuery + "/Dropdown")
                .then(successCallback, errorCallback);
        };
        SaleController.prototype.employeeInfoChanged = function (emp) {
            var self = this;
            self.model.employeeInfoId = emp.id;
            self.model.employeeInfoName = emp.text;
        };
        SaleController.prototype.loadCustomer = function () {
            var self = this;
            self.customerService.loadCustomer(self.model.customerPhone)
                .then(self.successCallbackLoadCustomer, self.errorCallbackLoadCustomer);
        };
        SaleController.prototype.loadDefaultCustomer = function () {
            var self = this;
            self.model.customerPhone = "0";
            self.customerService.loadCustomer(self.model.customerPhone)
                .then(self.successCallbackLoadCustomer, self.errorCallbackLoadCustomer);
        };
        SaleController.prototype.selectCustomer = function (selecterCustomer) {
            var self = this;
            self.customer = selecterCustomer;
            console.log(self.customer);
            self.addresses = self.customer.addresses;
        };
        SaleController.prototype.loadProductDetails = function () {
            var _this = this;
            var self = this;
            console.log(self.isOnlineSale, 'self.isOnlineSale');
            if (self.productDetailSearchRequest.keyword.length < 3) {
                return;
            }
            var successCallback = function (response) {
                self.productDetails = response.Models;
                self.productDetailsCount = response.Count;
                if (self.productDetailsCount === 1 && self.addToCartIfResultIsOne) {
                    _this.addToCart2(self.productDetails[0]);
                }
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.productDetailSearchRequest["isProductActive"] = true;
            self.productDetailSearchRequest.warehouseId = self.model.warehouseId;
            // self.productDetailSearchRequest.page = -1;
            self.searchService
                .search(self.productDetailSearchRequest, self.url.productDetailQuery + "/SearchByWarehouse")
                .then(successCallback, errorCallback);
        };
        SaleController.prototype.getPriceAndName = function () {
            //this.setProductDetail(this.saleDetail.productDetail);
            this.saleDetail.total = this.saleDetail.quantity * this.saleDetail.salePricePerUnit;
        };
        SaleController.prototype.getReturn = function () {
            this.model.dueAmount = this.model.totalAmount - this.model.paidAmount;
        };
        SaleController.prototype.setProductDetail = function (detail) {
            var self = this;
            if (self.model.isDealerSale) {
                var dealerPriceChange = this.localStorageService.get2(App.LocalStorageKeys.DealerPriceChange);
                if (dealerPriceChange == null || dealerPriceChange != 'dealer') {
                    this.saleDetail.salePricePerUnit = detail.salePrice;
                }
                else {
                    this.saleDetail.salePricePerUnit = detail.dealerPrice;
                }
            }
            else {
                this.saleDetail.salePricePerUnit = detail.salePrice;
            }
            this.saleDetail.productDetailId = detail.id;
            this.saleDetail.name = detail.name;
            this.saleDetail.productDetail = detail;
            this.saleDetail.quantity = 1;
            this.saleDetail.saleDetailType = App.SaleDetailType.Sale.toString();
            this.getPriceAndName();
        };
        //addToCart(): void {
        //    this.model.saleDetails.push(this.saleDetail);
        //    this.updateCartTotal();
        //    this.saleDetail = new SaleDetailViewModel();
        //}
        SaleController.prototype.addToCart = function () {
            this.model.saleDetails.push(this.saleDetail);
            this.updateCartTotal();
            var self = this;
            setTimeout(function (parameters) {
                self.setFocusOnCartItem(self.saleDetail.productDetailId);
                self.saleDetail = new App.SaleDetailViewModel();
            }, 100);
        };
        SaleController.prototype.addToCart2 = function (detail) {
            var exists = this.model.saleDetails.some(function (x) { return x.productDetailId === detail.id; });
            if (exists) {
                alert('Item : ' + detail.name + " is already added in cart.");
                return;
            }
            this.setProductDetail(detail);
            this.addToCart();
        };
        SaleController.prototype.setFocusOnCartItem = function (rowId) {
            var self = this;
            var element = this.getElement('cart-table');
            var tBody = element.tBodies[0];
            console.log(tBody);
            for (var i = 0; i < tBody.rows.length; i++) {
                var row = tBody.rows[i];
                if (row.id === rowId) {
                    self.quantityIsFloat = true;
                    var txtQty = self.getElement('qty-' + rowId);
                    txtQty.focus();
                    txtQty.select();
                }
            }
        };
        SaleController.prototype.getElement = function (id) {
            return document.getElementById(id);
        };
        SaleController.prototype.editCart = function (p) {
            this.saleDetail = p;
            this.removeByAttr(this.model.saleDetails, 'productDetailId', p.productDetailId);
        };
        SaleController.prototype.removeByAttr = function (arr, attr, value) {
            var i = arr.length;
            while (i--) {
                if (arr[i] && arr[i].hasOwnProperty(attr) && (arguments.length > 2 && arr[i][attr] === value)) {
                    arr.splice(i, 1);
                }
            }
            this.updateCartTotal();
        };
        SaleController.prototype.removeFromCart = function (index) {
            //this.removeByAttr(this.model.saleDetails, 'productDetailId', p.productDetailId);
            this.model.saleDetails.splice(index, 1);
            this.updateCartTotal();
        };
        SaleController.prototype.decreaseFromCart = function (index) {
            var quantity = this.model.saleDetails[index].quantity - 1;
            if (quantity === 0) {
                this.removeFromCart(index);
            }
            else {
                var salePrice = this.model.saleDetails[index].salePricePerUnit;
                var discountTotal = this.model.saleDetails[index].discountAmount;
                this.model.saleDetails[index].quantity = quantity;
                this.model.saleDetails[index].total = salePrice * quantity;
                this.model.saleDetails[index].discountTotal = discountTotal * quantity;
            }
            this.updateCartTotal();
        };
        SaleController.prototype.increaseToCart = function (index) {
            var quantity = this.model.saleDetails[index].quantity + 1;
            var salePrice = this.model.saleDetails[index].salePricePerUnit;
            var discountTotal = this.model.saleDetails[index].discountAmount;
            this.model.saleDetails[index].quantity = quantity;
            this.model.saleDetails[index].total = salePrice * quantity;
            this.model.saleDetails[index].discountTotal = discountTotal * quantity;
            this.updateCartTotal();
        };
        SaleController.prototype.updateQuantity = function (index) {
            var salePrice = this.model.saleDetails[index].salePricePerUnit;
            var quantity = this.model.saleDetails[index].quantity;
            this.model.saleDetails[index].quantity = quantity;
            this.model.saleDetails[index].priceTotal =
                this.model.saleDetails[index].salePricePerUnitBeforeDiscount * quantity;
            this.model.saleDetails[index].discountTotal = this.model.saleDetails[index].discountAmount * quantity;
            this.model.saleDetails[index].total = salePrice * quantity;
            this.updateCartTotal();
        };
        SaleController.prototype.setFocusOnSearchBox = function () {
            var txtCustomerSearch = document.getElementById("txtCustomerSearch");
            txtCustomerSearch.focus();
            txtCustomerSearch.select();
            txtCustomerSearch.value = '';
        };
        SaleController.prototype.setFocusOnProductSearch = function () {
            var txtProductSearch = document.getElementById("txtProductSearch");
            console.log(txtProductSearch);
            txtProductSearch.focus();
            txtProductSearch.select();
            txtProductSearch.value = '';
        };
        SaleController.prototype.updateQuantityAll = function () {
            for (var i = 0; i < this.model.saleDetails.length; i++) {
                this.updateQuantity(i);
            }
        };
        SaleController.prototype.updateCartTotal = function () {
            var _this = this;
            var self = this;
            self.model.productAmount = 0;
            self.model.saleDetails.forEach(function (p) { return _this.model.productAmount += p.total; });
            self.updateTransactions();
            self.updateTotal();
        };
        SaleController.prototype.applyDiscount = function () {
            var self = this;
            self.model.payableTotalAmount = self.model.totalAmount - self.model.discountAmount;
            self.model.discountPercent = Math.round((self.model.discountAmount / self.model.totalAmount) * 100);
            self.updateTransactions();
        };
        SaleController.prototype.applyDiscountPercent = function () {
            var self = this;
            self.model.discountAmount = self.model.totalAmount * self.model['discountPercent'] / 100;
            self.applyDiscount();
        };
        SaleController.prototype.applyItemDiscount = function (p) {
            p.discountAmount = p.salePricePerUnitBeforeDiscount * p.discountPercent / 100;
            p.salePricePerUnit = p.salePricePerUnitBeforeDiscount - p.discountAmount;
            p.priceTotal = p.salePricePerUnitBeforeDiscount * p.quantity;
            p.discountTotal = p.discountAmount * p.quantity;
            p.total = p.salePricePerUnit * p.quantity;
            this.updateQuantityAll();
        };
        SaleController.prototype.applyItemDiscountPercent = function (p) {
            p.discountPercent = Math.round((p.discountAmount / p.salePricePerUnitBeforeDiscount) * 100);
            p.salePricePerUnit = p.salePricePerUnitBeforeDiscount - p.discountAmount;
            p.priceTotal = p.salePricePerUnitBeforeDiscount * p.quantity;
            p.discountTotal = p.discountAmount * p.quantity;
            p.total = p.salePricePerUnit * p.quantity;
            this.updateQuantityAll();
        };
        SaleController.prototype.resetItemDiscount = function (p) {
            p.salePricePerUnit = p.salePricePerUnitBeforeDiscount;
            p.discountPercent = 0;
            p.discountTotal = 0;
            p.discountAmount = 0;
            p.salePricePerUnitBeforeDiscount = 0;
            this.updateQuantityAll();
        };
        SaleController.prototype.setFocus = function (id) {
            var element = this.getElement(id);
            console.log(element);
            element.focus();
            element.select();
            //element.value = '';
            //element.focus();
        };
        SaleController.prototype.calculateServiceCharge = function () {
            // service charge = (product amount + delivery charge ) * 1.85
            var self = this;
            self.model.paymentServiceChargeAmount = ((self.model.productAmount + self.model.deliveryChargeAmount) *
                self.paymentServiceChargePercent) /
                100;
            self.updateTotal();
        };
        SaleController.prototype.updateTotal = function () {
            var self = this;
            self.model.totalAmount = self.model.productAmount + self.model.otherAmount +
                self.model.deliveryChargeAmount +
                self.model.paymentServiceChargeAmount;
            self.model.payableTotalAmount = self.model.totalAmount - self.model.discountAmount;
            self.model.dueAmount = self.model.payableTotalAmount - self.model.paidAmount;
        };
        SaleController.prototype.save = function () {
            var self = this;
            if (self.customer.name.length === 0 || self.customer.phone.length === 0) {
                self.customer.phone = "0";
                self.customer.name = "Annonymous";
            }
            if (!self.model.isDealerSale) {
                self.model.customerPhone = self.customer.phone;
                self.model.customerName = self.customer.name;
            }
            if (self.model.saleDetails.length === 0) {
                alert("Your shopping cart is empty. Please add some products and then save");
                self.shouldPrint = false;
                return;
            }
            var successCallback = function (response) {
                console.log(response);
                if (self.shouldPrint) {
                    self.print(response.data.id.toString());
                }
                else {
                    if (self.showOrderNumber) {
                        alert("Order number : " + response.data.orderNumber.toString());
                    }
                    self.activate();
                    self.shouldPrint = false;
                }
            };
            var errorCallback = function (error) {
                console.log(error);
                if (error.status === 500) {
                    alert(error.data.exceptionMessage);
                }
                else {
                    alert(error.data.message);
                }
                self.shouldPrint = false;
            };
            for (var i = 0; i < self.model.saleDetails.length; i++) {
                self.model.saleDetails[i].productDetail = null;
                self.model.saleDetails[i].created = new Date().toDateString();
                self.model.saleDetails[i].modified = new Date().toDateString();
                self.model.saleDetails[i].createdBy = self.authService.accountInfo.userName;
                self.model.saleDetails[i].createdFrom = "Browser";
                self.model.saleDetails[i].modifiedBy = self.authService.accountInfo.userName;
                self.model.saleDetails[i].id = "1";
                self.model.saleDetails[i].shopId =
                    self.model.saleDetails[i].shopId != null ? self.model.saleDetails[i].shopId : "1";
                if (self.model.saleDetails[i].saleDetailType == "0") {
                    self.model.saleDetails[i].saleDetailType = "Sale";
                }
            }
            for (var j = 0; j < self.model.transactions.length; j++) {
                self.model.transactions[j].created = new Date().toDateString();
                self.model.transactions[j].modified = new Date().toDateString();
                self.model.transactions[j].createdBy = self.authService.accountInfo.userName;
                self.model.transactions[j].createdFrom = "Browser";
                self.model.transactions[j].modifiedBy = self.authService.accountInfo.userName;
                self.model.transactions[j].id = "1";
                self.model.transactions[j].shopId =
                    self.model.transactions[j].shopId != null ? self.model.transactions[j].shopId : "1";
                self.model.transactions[j].accountHeadId = "1";
                self.model.transactions[j].accountHeadName = "1";
                self.model.transactions[j].parentId = "1";
                self.model.transactions[j].paymentGatewayServiceName =
                    self.model.transactions[j].paymentGatewayServiceName;
                self.model.transactions[j].transactionMediumName = self.model.transactions[j].transactionMedium;
                self.model.transactions[j].accountInfoId = self.model.transactions[j].accountInfoId;
            }
            if (!self.isOnlineSale) {
                self.model.saleChannel = App.SaleChannel.InHouse;
                self.model.saleFrom = App.SaleFrom.BizBook365.toString();
                self.model.requiredDeliveryDateByCustomer = new Date().toDateString();
                self.model.orderDate = new Date().toDateString();
            }
            self.model.paymentMethod = "Cash";
            self.model.customer = null;
            self.model.customerId = self.customer.id;
            self.model.orderNumber = "1";
            self.address.customerId = self.model.customerId;
            self.model.guarantor1 = null;
            self.model.guarantor2 = null;
            if (self.address.id === "00000000-0000-0000-0000-000000000000") {
                self.model.address = self.address;
                if (self.model.address.thana === "null") {
                    self.model.address.thana = "";
                }
            }
            else {
                self.model.addressId = self.address.id;
            }
            self.model['employeeInfo'] = null;
            if (self.installment.cashPriceAmount > 0) {
                self.model.installment = self.installment;
                if (self.model.installment.installmentDetails && self.model.installment.installmentDetails.length > 0) {
                    for (var k = 0; k < self.model.installment.installmentDetails.length; k++) {
                        self.model.installment.installmentDetails[k].created = new Date().toDateString();
                        self.model.installment.installmentDetails[k].modified = new Date().toDateString();
                        self.model.installment.installmentDetails[k].createdBy = self.authService.accountInfo.userName;
                        self.model.installment.installmentDetails[k].createdFrom = "Browser";
                        self.model.installment.installmentDetails[k].modifiedBy = self.authService.accountInfo.userName;
                        self.model.installment.installmentDetails[k].id = "1";
                        self.model.installment.installmentDetails[k].shopId =
                            self.model.installment.installmentDetails[k].shopId != null ? self.model.installment.installmentDetails[k].shopId : "1";
                    }
                }
            }
            // setting delivery charge amount to local storage
            self.localStorageService.save(App.LocalStorageKeys.DeliveryChargeAmount, self.model.deliveryChargeAmount);
            //    self.loadOrderNumber();
            self.saveService.save(self.model, self.commandUrl + "/Add")
                .then(successCallback, errorCallback);
        };
        SaleController.prototype.saveComplete = function () {
            var self = this;
            self.model.orderState = App.OrderState.Completed;
            // self.shouldPrint = true;
            self.save();
        };
        SaleController.prototype.saveAndPrint = function () {
            var self = this;
            self.model.orderState = App.OrderState.Completed;
            this.shouldPrint = true;
            this.save();
        };
        SaleController.prototype.print = function (id) {
            var self = this;
            self.printModel = new App.SaleViewModel();
            var successCallback = function (response) {
                self.printModel = response.data;
                setTimeout(function (p) {
                    var printContents = document.getElementById("receipt").innerHTML;
                    var baseUrl = document.location.host + self.url.clientSubFolder;
                    var popupWin = window.open('', '_blank', 'scrollbars=no,menubar=no,toolbar=no,location=no,status=no,titlebar=no');
                    popupWin.window.focus();
                    popupWin.document.write('<!DOCTYPE html><html><head>' +
                        '<link rel="stylesheet" href="http://' +
                        baseUrl +
                        '/Content/bootstrap.min.css">' +
                        '</head><body style="width: auto; height:auto;background:white"><div class="container">' +
                        printContents +
                        '</div></body></html>');
                    popupWin.onbeforeunload = function (event) {
                        popupWin.close();
                        //return '';
                    };
                    popupWin.onabort = function (event) {
                        popupWin.document.close();
                        popupWin.close();
                    };
                    setTimeout(function () {
                        popupWin.print();
                    }, 1000);
                }, 1000);
                self.activate();
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            var searchRequest = new App.SearchRequest();
            searchRequest.id = this.stateParams["id"];
            searchRequest.page = -1;
            var httpUrl = self.url.saleQuery + "/Receipt?id=" + id;
            self.searchService.search(null, httpUrl).then(successCallback, errorCallback);
        };
        SaleController.prototype.resetOrderCustomer = function () {
            this.customer = new App.Customer();
            this.customerSearchRequest.keyword = "";
            this.customers = [];
            this.addresses = [];
            this.address = new App.CustomerAddress();
        };
        SaleController.prototype.resetOrderDealer = function () {
            this.dealer = new App.Dealer();
            this.dealerSearchRequest.keyword = "";
            this.dealers = [];
        };
        SaleController.prototype.resetCustomer = function () {
            this.customer.name = "";
            this.customer.phone = "";
        };
        SaleController.prototype.resetAddress = function () {
            this.address = new App.CustomerAddress();
        };
        SaleController.prototype.activate = function () {
            console.log('im in child activate. ');
            _super.prototype.activate.call(this);
            this.customer = new App.Customer();
            this.installment = new App.Installment();
            this.installmentDetail = new App.InstallmentDetail();
            this.addresses = [];
            this.address = new App.CustomerAddress();
            this.customerSearchRequest = new App.SearchRequest();
            //this.loadCustomers();
            this.productDetailSearchRequest = new App.SearchRequest();
            this.model = new App.SaleViewModel();
            //this.loadOrderNumber();
            this.model.saleFrom = App.SaleFrom.Facebook.toString();
            this.model.saleChannel = App.SaleChannel.InHouse;
            this.saleDetail = new App.SaleDetailViewModel();
            //this.loadProductDetails();
            this.setupDropdowns();
            this.selectedAccountInfo = new App.AccountInfo();
            this.loadAccountInfos();
            this.productDetails = [];
            this.resetOrderCustomer();
            this.dealer = new App.Dealer();
            this.dealerSearchRequest = new App.SearchRequest();
            this.setupLocalConfiguration();
            var self = this;
            this.loadWarehouses().then(function (warehouses) {
                if (self.user.warehouseId) {
                    self.model.warehouseId = self.user.warehouseId;
                }
                else {
                    self.model.warehouseId = warehouses[0].id;
                }
            });
        };
        SaleController.prototype.setupLocalConfiguration = function () {
            var self = this;
            if (self.localStorageService == null) {
                console.log('activation not completed');
                return;
            }
            // getting delivery charge amount from local storage
            self.model.deliveryChargeAmount = 0;
            if (self.isOnlineSale) {
                // console.log('i am in isonlinesale logic', self.isOnlineSale);
                var deliveryChargeAmount = self.localStorageService.get(App.LocalStorageKeys.DeliveryChargeAmount);
                if (!deliveryChargeAmount) {
                    deliveryChargeAmount = 0;
                    self.localStorageService.save(App.LocalStorageKeys.DeliveryChargeAmount, 0);
                }
                self.model.deliveryChargeAmount = (deliveryChargeAmount);
            }
            self.showOrderNumber = self.localStorageService.get(App.LocalStorageKeys.ShowOrderNumberAfterSave);
            self.addToCartIfResultIsOne = self.localStorageService.get(App.LocalStorageKeys.AddToCartIfResultIsOne);
        };
        SaleController.prototype.activateDealerSale = function () {
            var self = this;
            self.model.isDealerSale = true;
            self.model.orderState = App.OrderState.Completed;
        };
        SaleController.prototype.activateOnlineSale = function () {
            var self = this;
            self.isOnlineSale = true;
            self.model.saleFrom = App.SaleFrom.Facebook.toString();
        };
        SaleController.prototype.setupDropdowns = function () {
            var self = this;
            var success = function (response) {
                console.log(response);
                self.transactionMediums = response.transactionMediums;
                self.paymentGatewayServices = response.paymentGatewayServices;
                self.accountInfoTypes = response.accountInfoTypes;
                self.transactionFors = response.transactionFors;
                self.transactionWiths = response.transactionWiths;
                self.transactionFlowTypes = response.transactionFlowTypes;
                self.transaction = new App.Transaction();
                self.transaction.transactionMedium = "Cash";
                self.transaction.paymentGatewayService = "Cash";
                self.transaction.paymentGatewayServiceName = "Cash";
                self.transaction.accountInfoType = "Cash";
                self.accountInfoType = "Cash";
                self.paymentGatewayService = "Cash";
                self.saleDetailType = "Sale";
            };
            var error = function (error) {
                console.log(error);
            };
            self.searchService.get(self.url.transactionQuery + "/Dropdowns").then(success, error);
        };
        SaleController.prototype.loadAccountInfos = function () {
            var self = this;
            var success = function (response) {
                App.Display.log('loadAccountInfos result : ', response);
                self.accountInfos = response.Models;
                if (self.accountInfos.length > 0) {
                    for (var i = 0; i < self.accountInfos.length; i++) {
                        if (self.accountInfos[i].text == "Cash") {
                            self.selectedAccountInfo = self.accountInfos[i];
                            console.log(self.selectedAccountInfo);
                            self.transaction.accountInfoId = self.selectedAccountInfo.id;
                            break;
                        }
                    }
                }
            };
            var error = function (error) {
                App.Display.log(error);
            };
            self.searchService.search(self.searchRequest, self.url.accountInfoQuery + "/Dropdown")
                .then(success, error);
        };
        SaleController.prototype.accountInfoChanged = function () {
            this.transaction.accountInfoTitle = this.selectedAccountInfo["text"];
            this.transaction.accountInfoId = this.selectedAccountInfo.id;
            this.transaction.paymentGatewayServiceName = this.transaction.accountInfoTitle;
        };
        SaleController.prototype.addTransaction = function () {
            var self = this;
            self.model.transactions.push(self.transaction);
            self.updateTransactions();
        };
        SaleController.prototype.removeTransaction = function (index) {
            var self = this;
            self.model.transactions.splice(index, 1);
            self.updateTransactions();
        };
        SaleController.prototype.updateTransactions = function () {
            var self = this;
            self.model.paidAmount = 0;
            $.each(self.model.transactions, function (x) {
                var temp = this;
                self.model.paidAmount += temp.amount;
            });
            self.model.dueAmount = self.model.payableTotalAmount - self.model.paidAmount;
            self.transaction = new App.Transaction();
            self.transaction.transactionMedium = "Cash";
            self.transaction.paymentGatewayServiceName = "Cash";
            self.transaction.accountInfoType = "Cash";
            self.accountInfoChanged();
        };
        SaleController.prototype.changeShowAlertState = function () {
            var self = this;
            self.localStorageService.save(App.LocalStorageKeys.ShowOrderNumberAfterSave, self.showOrderNumber);
        };
        SaleController.prototype.changeSelectPrice = function () {
        };
        SaleController.prototype.loadAddressesDropdown = function (customerId) {
            var self = this;
            var successCallback = function (response) {
                console.log('addresses ', response);
                self.models = response.Models;
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            var searchRequest = new App.SearchRequest();
            searchRequest.parentId = customerId;
            searchRequest["isAddressActive"] = true;
            self.searchService
                .search(searchRequest, self.url.customerAddressQuery + "/Dropdown")
                .then(successCallback, errorCallback);
        };
        SaleController.prototype.loadAddressDetail = function (p) {
            console.log(p);
            var self = this;
            var successCallback = function (response) {
                console.log(response);
                self.address = response.data;
                self.isUpdateMode = true;
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            var id = self.searchRequest["addressId"];
            console.log(id);
        };
        SaleController.prototype.loadDistricts = function () {
            var self = this;
            var successCallback = function (response) {
                // console.log('locations in controller', response);
                self.locations = response;
                self.districts = self.customerService.loadDistricts();
                self.loadThanas();
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.customerService
                .loadLocations().then(successCallback, errorCallback);
        };
        SaleController.prototype.loadThanas = function () {
            var self = this;
            self.thanas = self.customerService.loadThanas(self.address.district);
            self.loadAreas();
        };
        SaleController.prototype.loadAreas = function () {
            var self = this;
            self.areas = self.customerService.loadAreas(self.address.thana);
            self.address.setThana(self.address.thana);
        };
        SaleController.prototype.getArea = function () {
            var self = this;
            self.address.setArea(self.address.area);
            self.area = self.customerService.getArea(self.address.area);
            self.address.postCode = self.area.postcode;
        };
        // navigation       
        SaleController.prototype.navigateTo = function (div) {
            this.$anchorScroll.yOffset = 150;
            this.location.hash(div);
            this.$anchorScroll();
        };
        SaleController.prototype.keyPressed = function (event) {
            //console.log('keypressed ', event);
            App.Display.log('keypressed', event);
            //shift +s
            var saveOk = event.shiftKey && event.keyCode === 83;
            if (saveOk) {
                var saleConfirmed = confirm("Do you want to save the sale?");
                if (saleConfirmed == true) {
                    this.saveAndPrint();
                }
            }
            //shift +m
            var paymentAmount = event.shiftKey && event.keyCode === 77;
            //shift +p
            var productSearch = event.shiftKey && event.keyCode === 80;
            //shift +c
            var customerSearch = event.shiftKey && event.keyCode === 67;
            var self = this;
            console.log('get key' + paymentAmount);
            if (paymentAmount) {
                var txtPayment = self.getElement('txtPaymentAmount');
                txtPayment.focus();
                txtPayment.value = '';
            }
            if (productSearch) {
                var txtProduct = self.getElement('txtProductSearch');
                txtProduct.focus();
                txtProduct.value = '';
            }
            if (customerSearch) {
                var txtCustomer = self.getElement('txtCustomerSearch');
                txtCustomer.focus();
                txtCustomer.value = '';
            }
        };
        SaleController.prototype.calculateProfitAmount = function () {
            var self = this;
            console.log(self.installment);
            self.installment.profitAmount =
                self.installment.cashPriceAmount * self.installment.profitPercent / 100;
            self.installment.installmentTotalAmount =
                self.installment.cashPriceAmount + self.installment.profitAmount;
            self.model.otherAmount = self.installment.profitAmount;
            this.updateCartTotal();
        };
        SaleController.prototype.calculateDownPaymentAmount = function () {
            var self = this;
            self.installment.downPaymentAmount = self.installment.installmentTotalAmount *
                self.installment.downPaymentPercent /
                100;
            self.installment.installmentDueAmount = self.installment.installmentTotalAmount -
                self.installment.downPaymentAmount;
        };
        SaleController.prototype.calculateInstallmentPerMonth = function () {
            var self = this;
            self.installment.installmentPerMonthAmount =
                self.installment.installmentDueAmount / self.installment.installmentMonth;
        };
        SaleController.prototype.calculatePriceDueAmount = function () {
            var self = this;
            self.installment.cashPriceDueAmount =
                self.installment.cashPriceAmount - self.installment.downPaymentAmount;
        };
        SaleController.prototype.calculateProfitAmountPerMonth = function () {
            var self = this;
            console.log(self.installment);
            self.installment.profitAmountPerMonth =
                self.installment.cashPriceDueAmount * self.installment.profitPercent / 100;
        };
        SaleController.prototype.calculateInstallmentProfitPerMonth = function () {
            var self = this;
            console.log(self.installment);
            self.installment.profitAmount = self.installment.profitAmountPerMonth * self.installment.installmentMonth;
            self.installment.installmentTotalAmount =
                self.installment.cashPriceDueAmount + self.installment.profitAmount;
            self.installment.installmentDueAmount =
                self.installment.cashPriceDueAmount + self.installment.profitAmount;
            self.installment.installmentPerMonthAmount =
                self.installment.installmentDueAmount / self.installment.installmentMonth;
        };
        SaleController.prototype.installmentSaleTypeChanged = function (saleType) {
            this.installment = new App.Installment();
            this.installmentDetail = new App.InstallmentDetail();
            this.installment.saleType = saleType;
        };
        SaleController.prototype.addInstallmentDate = function () {
            var self = this;
            self.installment.installmentDetails.push(self.installmentDetail);
            console.log(self.installment);
            self.installmentDetail = new App.InstallmentDetail();
            self.installmentTotal = 0;
            $.each(self.installment.installmentDetails, function (x) {
                var temp = this;
                self.installmentTotal += temp.scheduledAmount;
            });
        };
        SaleController.prototype.removeInstallmentDetails = function (index) {
            var self = this;
            self.installment.installmentDetails.splice(index, 1);
        };
        SaleController.prototype.dateChanged = function () {
            var self = this;
            console.log(self.orderDate);
            self.model.orderDate = self.orderDate.toDateString();
            self.model.requiredDeliveryDateByCustomer = self.requiredDeliveryDateByCustomer.toDateString();
        };
        SaleController.$inject = [
            "$scope", "$filter", "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", "CustomerService",
            "$uibModal", "LocalStorageService", "$anchorScroll", 'Excel'
        ];
        return SaleController;
    }(App.BaseController));
    App.SaleController = SaleController;
    angular.module("app").controller("SaleController", SaleController);
})(App || (App = {}));

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var App;
(function (App) {
    "use strict";
    var SaleDetailController = /** @class */ (function (_super) {
        __extends(SaleDetailController, _super);
        function SaleDetailController(location, state, stateParams, url, search, save, authService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.sale, url.saleQuery, excel) || this;
            _this.purchaseTotal = 0;
            if (_this.stateParams["id"]) {
                if (authService.accountInfo.role !== 'Deliveryman') {
                    _this.loadDeliverymans();
                }
                _this.loadDetail();
            }
            else {
                _this.back();
            }
            return _this;
        }
        SaleDetailController.prototype.loadDetail = function () {
            console.log(this.stateParams);
            var self = this;
            var successCallback = function (response) {
                self.model = response.data;
                self.showNextState = self.model.nextState != null;
                if (self.showNextState) {
                    self.userNotes = self.model.remarks;
                    self.model.remarks = '';
                }
                if (self.model.installmentId) {
                    self.loadInstallments(self.model.installmentId);
                }
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            var searchRequest = new App.SearchRequest();
            searchRequest.id = this.stateParams["id"];
            searchRequest.page = -1;
            var id = this.stateParams["id"];
            var httpUrl = self.url.saleQuery + "/Detail?id=" + id;
            self.searchService
                .search(searchRequest, httpUrl)
                .then(successCallback, errorCallback);
        };
        SaleDetailController.prototype.loadDeliverymans = function () {
            var self = this;
            var successCallback = function (response) {
                self.deliverymans = response.Models;
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            var searchRequest = new App.SearchRequest();
            searchRequest["role"] = "DeliveryMan";
            var httpUrl = self.url.employee + "Query" + "/Search";
            self.searchService
                .search(searchRequest, httpUrl)
                .then(successCallback, errorCallback);
        };
        SaleDetailController.prototype.deliverymanChanged = function (d) {
            var self = this;
            self.model.deliverymanName = d.userName;
            self.model.deliverymanId = d.id;
        };
        SaleDetailController.prototype.nextState = function () {
            var self = this;
            var successCallback = function (response) {
                self.loadDetail();
            };
            var errorCallback = function (error) {
                console.log(error);
                if (error.status === 500) {
                    alert(error.data.exceptionMessage);
                }
                else {
                    alert("Error Occurred. Please contact with Administrator");
                }
            };
            self.model.customer = null;
            self.model.transactions = null;
            self.saveService.update(self.model, self.url.sale + "/NextState").then(successCallback, errorCallback);
        };
        SaleDetailController.prototype.receiptView = function () {
            var self = this;
            self.stateService.go("root.receipt", { receipt: self.model });
        };
        SaleDetailController.prototype.loadInstallments = function (installmentId) {
            var self = this;
            var searchRequest = new App.SearchRequest();
            var success = function (response) {
                self.model.installment = response.data;
                console.log(self.model.installment);
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            searchRequest.id = installmentId;
            searchRequest.page = -1;
            var url = self.url.installmentQuery + '/SearchDetail';
            self.searchService.search(searchRequest, url).then(success, errorCallback);
        };
        SaleDetailController.prototype.installmentPay = function (p) {
            console.log(p);
        };
        SaleDetailController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", "$uibModal", 'Excel'
        ];
        return SaleDetailController;
    }(App.BaseController));
    App.SaleDetailController = SaleDetailController;
    angular.module("app").controller("SaleDetailController", SaleDetailController);
    var ReceiptController = /** @class */ (function (_super) {
        __extends(ReceiptController, _super);
        function ReceiptController(location, state, stateParams, url, search, save, authService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.sale, url.saleQuery, excel) || this;
            _this.totalQuantity = 0;
            _this.discountTotal = 0;
            _this.salePricePerUnitTotal = 0;
            if (_this.stateParams["id"]) {
                _this.loadDetail();
                _this.today = new Date();
            }
            else {
                _this.back();
            }
            _this.url = url;
            _this.isDivShow = false;
            return _this;
        }
        ReceiptController.prototype.loadDetail = function () {
            var _this = this;
            console.log(this.stateParams);
            var self = this;
            var successCallback = function (response) {
                self.model = response.data;
                console.log(self.model);
                for (var i = 0; i < self.model.saleDetails.length; i++) {
                    self.totalQuantity += self.model.saleDetails[i].quantity;
                    self.discountTotal += self.model.saleDetails[i].discountTotal;
                    self.salePricePerUnitTotal += self.model.saleDetails[i].salePricePerUnit;
                }
                if (_this.discountTotal > 0) {
                    _this.isDivShow = true;
                }
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            var searchRequest = new App.SearchRequest();
            searchRequest.id = this.stateParams["id"];
            searchRequest.page = -1;
            var id = this.stateParams["id"].toString();
            var httpUrl = self.url.saleQuery + "/Receipt?id=" + id;
            self.searchService.search(null, httpUrl).then(successCallback, errorCallback);
        };
        ReceiptController.prototype.ok = function () {
            window.print();
        };
        ReceiptController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", "$uibModal", 'Excel'
        ];
        return ReceiptController;
    }(App.BaseController));
    App.ReceiptController = ReceiptController;
    angular.module("app").controller("ReceiptController", ReceiptController);
    var Receipt2Controller = /** @class */ (function (_super) {
        __extends(Receipt2Controller, _super);
        function Receipt2Controller(location, state, stateParams, url, search, save, authService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.sale, url.saleQuery, excel) || this;
            _this.totalQuantity = 0;
            if (_this.stateParams["id"]) {
                _this.loadDetail();
                _this.today = new Date();
            }
            else {
                _this.back();
            }
            _this.url = url;
            return _this;
        }
        Receipt2Controller.prototype.loadDetail = function () {
            console.log(this.stateParams);
            var self = this;
            var successCallback = function (response) {
                self.model = response.data;
                for (var i = 0; i < self.model.saleDetails.length; i++) {
                    self.totalQuantity += self.model.saleDetails[i].quantity;
                }
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            var searchRequest = new App.SearchRequest();
            searchRequest.id = this.stateParams["id"];
            searchRequest.page = -1;
            var id = this.stateParams["id"].toString();
            var httpUrl = self.url.saleQuery + "/Receipt?id=" + id;
            self.searchService.search(null, httpUrl).then(successCallback, errorCallback);
        };
        Receipt2Controller.prototype.ok = function () {
            window.print();
        };
        Receipt2Controller.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", "$uibModal", 'Excel'
        ];
        return Receipt2Controller;
    }(App.BaseController));
    App.Receipt2Controller = Receipt2Controller;
    angular.module("app").controller("Receipt2Controller", Receipt2Controller);
    var Receipt3Controller = /** @class */ (function (_super) {
        __extends(Receipt3Controller, _super);
        function Receipt3Controller(location, state, stateParams, url, search, save, authService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.sale, url.saleQuery, excel) || this;
            _this.totalQuantity = 0;
            if (_this.stateParams["id"]) {
                _this.loadDetail();
                _this.today = new Date();
            }
            else {
                _this.back();
            }
            _this.url = url;
            return _this;
        }
        Receipt3Controller.prototype.loadDetail = function () {
            console.log(this.stateParams);
            var self = this;
            var successCallback = function (response) {
                console.log(response);
                self.model = response.data;
                for (var i = 0; i < self.model.saleDetails.length; i++) {
                    self.totalQuantity += self.model.saleDetails[i].quantity;
                }
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            var searchRequest = new App.SearchRequest();
            searchRequest.id = this.stateParams["id"];
            searchRequest.page = -1;
            var id = this.stateParams["id"].toString();
            var httpUrl = self.url.saleQuery + "/Receipt?id=" + id;
            self.searchService.search(null, httpUrl).then(successCallback, errorCallback);
        };
        Receipt3Controller.prototype.ok = function () {
            window.print();
        };
        Receipt3Controller.prototype.print = function (id) {
            if (id == null) {
                id = "receipt";
            }
            var printContents = document.getElementById(id).innerHTML;
            var popupWin;
            var baseUrl = 'http://' + document.location.host + this.url.clientSubFolder;
            console.log(baseUrl);
            var cssUrl = '';
            cssUrl = baseUrl + '/dist/css/all.css?t=074002082011';
            popupWin = window.open('', '_blank', 'scrollbars=no,menubar=no,toolbar=no,location=no,status=no,titlebar=no');
            popupWin.window.focus();
            popupWin.document.write('<!DOCTYPE html><html><head>' +
                '<link rel="stylesheet" ' +
                'href="' + cssUrl + '">' +
                '</head><body style="font-size:10px !important; line-height: 1.0 !important;">' +
                printContents +
                '</body></html>');
            popupWin.onbeforeunload = function (event) {
                popupWin.close();
            };
            popupWin.onabort = function (event) {
                popupWin.document.close();
                popupWin.close();
            };
            setTimeout(function () {
                popupWin.print();
            }, 1000);
        };
        Receipt3Controller.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", "$uibModal", 'Excel'
        ];
        return Receipt3Controller;
    }(App.BaseController));
    App.Receipt3Controller = Receipt3Controller;
    angular.module("app").controller("Receipt3Controller", Receipt3Controller);
    var SaleReturnController = /** @class */ (function (_super) {
        __extends(SaleReturnController, _super);
        function SaleReturnController(location, state, stateParams, url, search, save, authService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.sale, url.saleQuery, excel) || this;
            _this.saleDetailTypes = ["Sale", "Damage", "Gift", "Return"];
            if (_this.stateParams["id"]) {
                _this.saleDetail = new App.SaleDetailViewModel();
                _this.productDetailSearchRequest = new App.SearchRequest();
                _this.loadDetail();
            }
            else {
                _this.back();
            }
            _this.loadWarehouses().then(function (warehouses) {
                //this.model.warehouseId = warehouses[0].id;
            });
            return _this;
        }
        SaleReturnController.prototype.loadDetail = function () {
            var _this = this;
            console.log(this.stateParams);
            var self = this;
            var successCallback = function (response) {
                self.model = response.data;
                console.log(_this.model);
                self.due = self.model.dueAmount;
                self.model.transactions = [];
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            var searchRequest = new App.SearchRequest();
            searchRequest.id = this.stateParams["id"];
            searchRequest.page = -1;
            var id = this.stateParams["id"];
            var httpUrl = self.url.saleQuery + "/Detail?id=" + id;
            self.searchService
                .search(searchRequest, httpUrl)
                .then(successCallback, errorCallback);
            self.due = 0;
        };
        SaleReturnController.prototype.loadProductDetails = function () {
            var self = this;
            if (self.productDetailSearchRequest.keyword.length < 3) {
                return;
            }
            var successCallback = function (response) {
                console.log('products ', response);
                self.productDetails = response.Models;
                self.productDetailsCount = response.Count;
                // self.productDetailSearchRequest.keyword = "";
                if (self.productDetailsCount === 1) {
                    //    this.addToCart2(self.productDetails[0]);
                }
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.productDetailSearchRequest["isProductActive"] = true;
            // self.productDetailSearchRequest.page = -1;
            self.searchService
                .search(self.productDetailSearchRequest, self.url.productDetailQuery + "/Search")
                .then(successCallback, errorCallback);
        };
        SaleReturnController.prototype.getPriceAndName = function () {
            this.saleDetail.total = this.saleDetail.quantity * this.saleDetail.salePricePerUnit;
        };
        SaleReturnController.prototype.setProductDetail = function (detail) {
            this.saleDetail.salePricePerUnit = detail.salePrice;
            this.saleDetail.productDetailId = detail.id;
            this.saleDetail.name = detail.name;
            this.saleDetail.productDetail = detail;
            this.saleDetail.productDetailName = detail.name;
            this.saleDetail.quantity = 1;
            this.getPriceAndName();
        };
        SaleReturnController.prototype.addToCart = function () {
            this.model.saleDetails.push(this.saleDetail);
            this.updateCartTotal();
            this.saleDetail = new App.SaleDetailViewModel();
        };
        SaleReturnController.prototype.addToCart2 = function (detail) {
            var exists = this.model.saleDetails.some(function (x) { return x.productDetailId === detail.id; });
            if (exists) {
                alert('Item : ' + detail.name + " is already added in cart.");
                return;
            }
            this.setProductDetail(detail);
            this.addToCart();
        };
        SaleReturnController.prototype.decreaseFromCart = function (index) {
            //this.model.saleDetails.splice(index, 1);
            var salePrice = this.model.saleDetails[index].salePricePerUnit;
            var quantity = this.model.saleDetails[index].quantity - 1;
            this.model.saleDetails[index].quantity = quantity;
            this.model.saleDetails[index].total = salePrice * quantity;
            this.updateCartTotal();
        };
        //updateQuantity(index): void {
        //    let salePrice = this.model.saleDetails[index].salePricePerUnit;
        //    let quantity = this.model.saleDetails[index].quantity;
        //    this.model.saleDetails[index].quantity = quantity;
        //    this.model.saleDetails[index].total = salePrice * quantity;
        //    this.updateCartTotal();
        //}
        SaleReturnController.prototype.updateQuantity = function (index) {
            var salePrice = this.model.saleDetails[index].salePricePerUnit;
            var quantity = this.model.saleDetails[index].quantity;
            this.model.saleDetails[index].quantity = quantity;
            this.model.saleDetails[index].total = salePrice * quantity;
            this.updateCartTotal();
        };
        SaleReturnController.prototype.updateQuantityAll = function () {
            for (var i = 0; i < this.model.saleDetails.length; i++) {
                this.updateQuantity(i);
            }
        };
        SaleReturnController.prototype.updateRemarks = function (index) {
            var salePrice = this.model.saleDetails[index].salePricePerUnit;
            var remarks = this.model.saleDetails[index].remarks;
            this.model.saleDetails[index].remarks = remarks;
            this.updateCartTotal();
        };
        SaleReturnController.prototype.updateRemarksAll = function () {
            for (var i = 0; i < this.model.saleDetails.length; i++) {
                this.updateRemarks(i);
            }
        };
        SaleReturnController.prototype.increaseToCart = function (index) {
            var salePrice = this.model.saleDetails[index].salePricePerUnit;
            var quantity = this.model.saleDetails[index].quantity + 1;
            this.model.saleDetails[index].quantity = quantity;
            this.model.saleDetails[index].total = salePrice * quantity;
            this.updateCartTotal();
        };
        SaleReturnController.prototype.removeFromCart = function (index) {
            this.model.saleDetails.splice(index, 1);
            this.updateCartTotal();
        };
        SaleReturnController.prototype.updateCartTotal = function () {
            var _this = this;
            var self = this;
            self.due = 0;
            //self.transaction.amount = 0;
            self.model.productAmount = 0;
            self.model.saleDetails.forEach(function (p) { return _this.model.productAmount += p.total; });
            self.model.totalAmount = self.model.productAmount + self.model.otherAmount +
                self.model.deliveryChargeAmount +
                self.model.paymentServiceChargeAmount;
            self.model.payableTotalAmount = self.model.totalAmount - self.model.discountAmount;
            self.updateTransactions();
        };
        SaleReturnController.prototype.applyShippingAmount = function () {
            var self = this;
            self.updateCartTotal();
            //self.model.totalAmount = self.model.productAmount + self.model.deliveryChargeAmount;
            //self.model.payableTotalAmount = self.model.totalAmount;
            //self.updateTransactions();
        };
        SaleReturnController.prototype.updateTransactions = function () {
            var self = this;
            self.model.dueAmount = self.model.payableTotalAmount - self.model.paidAmount;
            self.updateDue();
        };
        SaleReturnController.prototype.updateDue = function () {
            var self = this;
            self.due = self.model.dueAmount;
        };
        SaleReturnController.prototype.save = function () {
            var self = this;
            self.model.customer = null;
            self.model.transactions = [];
            // self.model.transactions.push(self.transaction);
            console.log(this.model);
            var successCallback = function (response) {
                console.log(response);
                self.back();
            };
            var errorCallback = function (error) {
                console.log(error);
                if (error.status === 500) {
                    alert(error.data.exceptionMessage);
                }
                else {
                    alert("Error occurred");
                }
            };
            for (var i = 0; i < self.model.saleDetails.length; i++) {
                self.model.saleDetails[i].productDetail = null;
            }
            self.model.transactions = [];
            self.model.address = null;
            this.saveService.update(self.model, self.commandUrl + "/Return")
                .then(successCallback, errorCallback);
        };
        SaleReturnController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", "$uibModal", 'Excel'
        ];
        return SaleReturnController;
    }(App.BaseController));
    App.SaleReturnController = SaleReturnController;
    angular.module("app").controller("SaleReturnController", SaleReturnController);
    var SaleReturn2Controller = /** @class */ (function (_super) {
        __extends(SaleReturn2Controller, _super);
        function SaleReturn2Controller(location, state, stateParams, url, search, save, authService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.sale, url.saleQuery, excel) || this;
            if (_this.stateParams["id"]) {
                _this.saleDetail = new App.SaleDetailViewModel();
                _this.loadDetail();
            }
            else {
                _this.back();
            }
            _this.loadWarehouses().then(function (warehouses) {
                //this.model.warehouseId = warehouses[0].id;
            });
            return _this;
        }
        // saleDetailTypes: string[] = ["Damage", "Return"];
        SaleReturn2Controller.prototype.loadDetail = function () {
            console.log(this.stateParams);
            var self = this;
            var successCallback = function (response) {
                self.model = response.data;
                self.model.productAmount = 0;
                for (var i = 0; i < self.model.saleDetails.length; i++) {
                    self.model.saleDetails[i].quantity = 0;
                    self.model.saleDetails[i].total = 0;
                }
                self.due = self.model.dueAmount;
                self.model.transactions = [];
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            var searchRequest = new App.SearchRequest();
            searchRequest.id = this.stateParams["id"];
            searchRequest.page = -1;
            var id = this.stateParams["id"];
            var httpUrl = self.url.saleQuery + "/Detail?id=" + id;
            self.searchService
                .search(searchRequest, httpUrl)
                .then(successCallback, errorCallback);
            self.due = 0;
        };
        SaleReturn2Controller.prototype.decreaseFromCart = function (index) {
            //this.model.saleDetails.splice(index, 1);
            var salePrice = this.model.saleDetails[index].salePricePerUnit;
            var quantity = this.model.saleDetails[index].quantity - 1;
            this.model.saleDetails[index].quantity = quantity;
            this.model.saleDetails[index].total = salePrice * quantity;
            this.updateCartTotal();
        };
        SaleReturn2Controller.prototype.updateQuantity = function (index) {
            var salePrice = this.model.saleDetails[index].salePricePerUnit;
            var quantity = this.model.saleDetails[index].quantity;
            this.model.saleDetails[index].quantity = quantity;
            this.model.saleDetails[index].total = salePrice * quantity;
            this.updateCartTotal();
        };
        SaleReturn2Controller.prototype.updateQuantityAll = function () {
            for (var i = 0; i < this.model.saleDetails.length; i++) {
                this.updateQuantity(i);
            }
        };
        SaleReturn2Controller.prototype.updateRemarks = function (index) {
            var salePrice = this.model.saleDetails[index].salePricePerUnit;
            var remarks = this.model.saleDetails[index].remarks;
            this.model.saleDetails[index].remarks = remarks;
            this.updateCartTotal();
        };
        SaleReturn2Controller.prototype.updateRemarksAll = function () {
            for (var i = 0; i < this.model.saleDetails.length; i++) {
                this.updateRemarks(i);
            }
        };
        SaleReturn2Controller.prototype.increaseToCart = function (index) {
            var salePrice = this.model.saleDetails[index].salePricePerUnit;
            var quantity = this.model.saleDetails[index].quantity + 1;
            this.model.saleDetails[index].quantity = quantity;
            this.model.saleDetails[index].total = salePrice * quantity;
            this.updateCartTotal();
        };
        SaleReturn2Controller.prototype.updateCartTotal = function () {
            var _this = this;
            var self = this;
            self.model.productAmount = 0;
            self.model.saleDetails.forEach(function (p) { return _this.model.productAmount += p.total; });
        };
        SaleReturn2Controller.prototype.save = function () {
            var self = this;
            console.log(this.model);
            var successCallback = function (response) {
                console.log(response);
                self.back();
            };
            var errorCallback = function (error) {
                console.log(error);
                if (error.status === 500) {
                    alert(error.data.exceptionMessage);
                }
                else {
                    alert("Error occurred");
                }
            };
            for (var i = 0; i < self.model.saleDetails.length; i++) {
                self.model.saleDetails[i].productDetail = null;
                self.model.saleDetails[i].quantity = 0 - self.model.saleDetails[i].quantity;
                self.model.saleDetails[i].total = 0 - self.model.saleDetails[i].total;
            }
            this.saveService.update(self.model, self.commandUrl + "/Return2")
                .then(successCallback, errorCallback);
        };
        SaleReturn2Controller.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", "$uibModal", 'Excel'
        ];
        return SaleReturn2Controller;
    }(App.BaseController));
    App.SaleReturn2Controller = SaleReturn2Controller;
    angular.module("app").controller("SaleReturn2Controller", SaleReturn2Controller);
    var SaleTransactionController = /** @class */ (function (_super) {
        __extends(SaleTransactionController, _super);
        function SaleTransactionController(location, state, stateParams, url, search, save, authService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.sale, url.saleQuery, excel) || this;
            if (_this.stateParams["id"]) {
                _this.transaction = new App.Transaction();
                _this.loadDetail();
                _this.setupDropdowns();
                _this.selectedAccountInfo = new App.AccountInfo();
                _this.loadAccountInfos();
            }
            else {
                _this.back();
            }
            return _this;
        }
        SaleTransactionController.prototype.loadDetail = function () {
            var _this = this;
            console.log(this.stateParams);
            var self = this;
            var successCallback = function (response) {
                self.model = response.data;
                self.showNextState = self.model.nextState != null;
                if (self.showNextState) {
                    self.userNotes = self.model.remarks;
                    self.model.remarks = '';
                }
                console.log(_this.model);
                self.transaction.amount = self.model.dueAmount;
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            var searchRequest = new App.SearchRequest();
            searchRequest.id = this.stateParams["id"];
            searchRequest.page = -1;
            var id = this.stateParams["id"];
            var httpUrl = self.url.saleQuery + "/Detail?id=" + id;
            // var httpUrl = self.url.saleQuery + "/SearchDetail";
            self.searchService
                .search(searchRequest, httpUrl)
                .then(successCallback, errorCallback);
            //self.searchService.search(searchRequest, httpUrl).then(successCallback, errorCallback);
        };
        SaleTransactionController.prototype.setupDropdowns = function () {
            var self = this;
            var success = function (response) {
                console.log(response);
                self.transactionMediums = response.transactionMediums;
                //self.paymentGatewayServices = response.paymentGatewayServices;
                //self.accountInfoTypes = response.accountInfoTypes;
                //self.transactionFors = response.transactionFors;
                //self.transactionWiths = response.transactionWiths;
                //self.transactionFlowTypes = response.transactionFlowTypes;
                //self.transaction = new Transaction();
                self.transaction.transactionMedium = "Cash";
                //self.transaction.paymentGatewayService = "Cash";
                self.transaction.paymentGatewayServiceName = "Cash";
                //self.transaction.accountInfoType = "Cash";
                //self.accountInfoType = "Cash";
                //self.paymentGatewayService = "Cash";
            };
            var error = function (error) {
                console.log(error);
            };
            self.searchService.get(self.url.transactionQuery + "/Dropdowns").then(success, error);
            var accountSuccess = function (response) {
                console.log('account - ', response);
                var accountHeads = response.Models;
                var sale = accountHeads.filter(function (x) { return x.text === "Sale"; })[0];
                if (sale != null) {
                    self.transaction.accountHeadId = sale.id;
                    self.transaction.accountHeadName = sale.text;
                }
            };
            var accountRequest = new App.SearchRequest();
            self.searchService.search(accountRequest, self.url.accountHeadQuery + "/Dropdown")
                .then(accountSuccess, error);
        };
        SaleTransactionController.prototype.save = function () {
            var self = this;
            console.log(self.transaction);
            self.transaction.orderId = self.model.id;
            self.transaction.orderNumber = self.model.orderNumber;
            self.transaction.paymentGatewayServiceName = self.transaction.accountInfoTitle;
            self.transaction.transactionMediumName = self.transaction.transactionMedium;
            if (self.model.isDealerSale) {
                self.transaction.parentId = self.model.dealerId;
            }
            else {
                self.transaction.parentId = self.model.customerId;
            }
            self.transaction.transactionWith = "Customer";
            self.transaction.transactionFor = "Sale";
            self.transaction.transactionFlowType = "Income";
            self.transaction.transactionDate = self.transactionDate.toDateString();
            self.saveService.save(self.transaction, self.url.transaction + "/Add")
                .then(function (s) {
                //self.stateService.go('root.sales');
                self.back();
            }, function (e) {
                alert('error occurred');
                console.log(e);
            });
        };
        SaleTransactionController.prototype.loadAccountInfos = function () {
            var self = this;
            var success = function (response) {
                self.accountInfos = response.Models;
                if (self.accountInfos.length > 0) {
                    for (var i = 0; i < self.accountInfos.length; i++) {
                        if (self.accountInfos[i].text === "Cash") {
                            self.selectedAccountInfo = self.accountInfos[i];
                            self.transaction.accountInfoId = self.selectedAccountInfo.id;
                            self.transaction.accountInfoTitle = self.selectedAccountInfo.text;
                            break;
                        }
                    }
                }
            };
            var error = function (error) {
                App.Display.log(error);
            };
            self.searchService.search(self.searchRequest, self.url.accountInfoQuery + "/Dropdown")
                .then(success, error);
        };
        SaleTransactionController.prototype.accountInfoChanged = function () {
            this.transaction.accountInfoTitle = this.selectedAccountInfo["text"];
            this.transaction.accountInfoId = this.selectedAccountInfo.id;
        };
        SaleTransactionController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", "$uibModal", 'Excel'
        ];
        return SaleTransactionController;
    }(App.BaseController));
    App.SaleTransactionController = SaleTransactionController;
    angular.module("app").controller("SaleTransactionController", SaleTransactionController);
    var SaleInstallmentTransactionController = /** @class */ (function (_super) {
        __extends(SaleInstallmentTransactionController, _super);
        function SaleInstallmentTransactionController(location, state, stateParams, url, search, save, authService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.sale, url.saleQuery, excel) || this;
            if (_this.stateParams["id"]) {
                _this.transaction = new App.Transaction();
                console.log('i m in SaleInstallmentTransactionController and id is ' + _this.stateParams['id']);
                _this.loadDetail();
                _this.setupDropdowns();
                _this.selectedAccountInfo = new App.AccountInfo();
                _this.loadAccountInfos();
            }
            else {
                _this.back();
            }
            return _this;
        }
        SaleInstallmentTransactionController.prototype.loadDetail = function () {
            console.log(this.stateParams);
            var self = this;
            var successCallback = function (response) {
                self.model = response.data;
                console.log(self.model);
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            var searchRequest = new App.SearchRequest();
            searchRequest.id = this.stateParams["id"];
            searchRequest.page = -1;
            var id = this.stateParams["id"];
            var httpUrl = self.url.saleQuery + "/Detail?id=" + id;
            // var httpUrl = self.url.saleQuery + "/SearchDetail";
            self.searchService
                .search(searchRequest, httpUrl)
                .then(successCallback, errorCallback);
            //self.searchService.search(searchRequest, httpUrl).then(successCallback, errorCallback);
        };
        SaleInstallmentTransactionController.prototype.setupDropdowns = function () {
            var self = this;
            var success = function (response) {
                console.log(response);
                self.transactionMediums = response.transactionMediums;
                self.transaction.transactionMedium = "Cash";
                self.transaction.transactionMediumName = "Cash";
                self.transaction.paymentGatewayServiceName = "Cash";
            };
            var error = function (error) {
                console.log(error);
            };
            self.searchService.get(self.url.transactionQuery + "/Dropdowns").then(success, error);
            var accountSuccess = function (response) {
                console.log('account - ', response);
                var accountHeads = response.Models;
                var sale = accountHeads.filter(function (x) { return x.text === "Sale"; })[0];
                if (sale != null) {
                    self.transaction.accountHeadId = sale.id;
                    self.transaction.accountHeadName = sale.text;
                }
            };
            var accountRequest = new App.SearchRequest();
            self.searchService.search(accountRequest, self.url.accountHeadQuery + "/Dropdown")
                .then(accountSuccess, error);
        };
        SaleInstallmentTransactionController.prototype.save = function () {
            var self = this;
            console.log(self.transaction);
            self.transaction.orderId = self.model.id;
            self.transaction.transactionFor = "Sale";
            self.transaction.transactionFlowType = "Income";
            self.transaction.transactionDate = self.transactionDate.toDateString();
            self.saveService.save(self.transaction, self.url.transaction + "/Add")
                .then(function (s) {
                //self.stateService.go('root.sales');
                self.back();
            }, function (e) {
                alert('error occurred');
                console.log(e);
            });
        };
        SaleInstallmentTransactionController.prototype.loadAccountInfos = function () {
            var self = this;
            var success = function (response) {
                self.accountInfos = response.Models;
                if (self.accountInfos.length > 0) {
                    for (var i = 0; i < self.accountInfos.length; i++) {
                        if (self.accountInfos[i].text === "Cash") {
                            self.selectedAccountInfo = self.accountInfos[i];
                            self.transaction.accountInfoId = self.selectedAccountInfo.id;
                            self.transaction.accountInfoTitle = self.selectedAccountInfo.text;
                            break;
                        }
                    }
                }
            };
            var error = function (error) {
                App.Display.log(error);
            };
            self.searchService.search(self.searchRequest, self.url.accountInfoQuery + "/Dropdown")
                .then(success, error);
        };
        SaleInstallmentTransactionController.prototype.accountInfoChanged = function () {
            this.transaction.accountInfoTitle = this.selectedAccountInfo["text"];
            this.transaction.accountInfoId = this.selectedAccountInfo.id;
        };
        SaleInstallmentTransactionController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", "$uibModal", 'Excel'
        ];
        return SaleInstallmentTransactionController;
    }(App.BaseController));
    App.SaleInstallmentTransactionController = SaleInstallmentTransactionController;
    angular.module('app').controller('SaleInstallmentTransactionController', SaleInstallmentTransactionController);
    var SaleInstallmentDetailController = /** @class */ (function (_super) {
        __extends(SaleInstallmentDetailController, _super);
        function SaleInstallmentDetailController(location, state, stateParams, url, search, save, authService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, "", url.installmentDetailQuery, excel) || this;
            _this.search();
            return _this;
        }
        SaleInstallmentDetailController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", 'Excel'
        ];
        return SaleInstallmentDetailController;
    }(App.BaseController));
    App.SaleInstallmentDetailController = SaleInstallmentDetailController;
    angular.module("app").controller("SaleInstallmentDetailController", SaleInstallmentDetailController);
    var SaleTransactionEditController = /** @class */ (function (_super) {
        __extends(SaleTransactionEditController, _super);
        function SaleTransactionEditController(location, state, stateParams, url, search, save, authService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.transaction, url.transactionQuery, excel) || this;
            if (_this.stateParams["id"]) {
                _this.editWithCallBack(_this.stateParams["id"], _this.callBack);
            }
            else {
                _this.back();
            }
            return _this;
        }
        SaleTransactionEditController.prototype.setupDropdowns = function () {
            var self = this;
            var success = function (response) {
                console.log(response);
                self.transactionMediums = response.transactionMediums;
                self.paymentGatewayServices = response.paymentGatewayServices;
                //self.transaction.transactionMedium = self.transaction.transactionMediumName;
                //self.transaction.paymentGatewayService = "Cash";
                //self.transaction.paymentGatewayServiceName = "Cash";
            };
            var error = function (error) {
                console.log(error);
            };
            self.searchService.get(self.url.transactionQuery + "/Dropdowns").then(success, error);
        };
        SaleTransactionEditController.prototype.callBack = function (data, self) {
            self.setupDropdowns();
            self.selectedAccountInfo = new App.AccountInfo();
            self.loadAccountInfos(self);
        };
        SaleTransactionEditController.prototype.loadAccountInfos = function (self) {
            //var self = this;
            var success = function (response) {
                App.Display.log(response);
                self.accountInfos = response.Models;
                for (var i = 0; i < self.accountInfos.length; i++) {
                    if (self.accountInfos[i].id === self.model.accountInfoId) {
                        self.selectedAccountInfo = self.accountInfos[i];
                    }
                }
            };
            var error = function (error) {
                App.Display.log(error);
            };
            self.searchService.search(self.searchRequest, self.url.accountInfoQuery + "/Dropdown")
                .then(success, error);
        };
        SaleTransactionEditController.prototype.accountInfoChanged = function () {
            var self = this;
            self.model.accountInfoTitle = self.selectedAccountInfo["text"];
            self.model.accountInfoId = self.selectedAccountInfo.id;
        };
        SaleTransactionEditController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", "$uibModal", 'Excel'
        ];
        return SaleTransactionEditController;
    }(App.BaseController));
    App.SaleTransactionEditController = SaleTransactionEditController;
    angular.module("app").controller("SaleTransactionEditController", SaleTransactionEditController);
    var DealerSaleTransactionController = /** @class */ (function (_super) {
        __extends(DealerSaleTransactionController, _super);
        function DealerSaleTransactionController(location, state, stateParams, url, search, save, authService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.sale, url.saleQuery, excel) || this;
            if (_this.stateParams["id"]) {
                _this.transaction = new App.Transaction();
                _this.loadDetail();
                _this.setupDropdowns();
                _this.selectedAccountInfo = new App.AccountInfo();
                _this.loadAccountInfos();
            }
            else {
                _this.back();
            }
            return _this;
        }
        DealerSaleTransactionController.prototype.loadDetail = function () {
            var _this = this;
            console.log(this.stateParams);
            var self = this;
            var successCallback = function (response) {
                self.model = response.data;
                self.showNextState = self.model.nextState != null;
                if (self.showNextState) {
                    self.userNotes = self.model.remarks;
                    self.model.remarks = '';
                }
                console.log(_this.model);
                self.transaction.amount = self.model.dueAmount;
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            var searchRequest = new App.SearchRequest();
            searchRequest.id = this.stateParams["id"];
            searchRequest.page = -1;
            searchRequest["IsDealerSale"] = true;
            var id = this.stateParams["id"];
            var httpUrl = self.url.saleQuery + "/Detail?id=" + id;
            self.searchService
                .search(searchRequest, httpUrl)
                .then(successCallback, errorCallback);
        };
        DealerSaleTransactionController.prototype.activateDealerSale = function () {
            var self = this;
            self.model.isDealerSale = true;
        };
        DealerSaleTransactionController.prototype.setupDropdowns = function () {
            var _this = this;
            var self = this;
            var success = function (response) {
                console.log(response);
                self.transactionMediums = response.transactionMediums;
                self.paymentGatewayServices = response.paymentGatewayServices;
                self.accountInfoTypes = response.accountInfoTypes;
                self.accountInfoType = "Cash";
                self.transaction.transactionMedium = "Cash";
                self.transaction.paymentGatewayService = "Cash";
            };
            var error = function (error) {
                console.log(error);
            };
            self.searchService.get(self.url.transactionQuery + "/Dropdowns").then(success, error);
            var accountSuccess = function (response) {
                console.log('account - ', response);
                var accountHeads = response.Models;
                var sale = accountHeads.filter(function (x) { return x.text === "Sale"; })[0];
                if (sale != null) {
                    _this.transaction.accountHeadId = sale.id;
                    _this.transaction.accountHeadName = sale.text;
                }
            };
            var accountRequest = new App.SearchRequest();
            self.searchService.search(accountRequest, self.url.accountHeadQuery + "/Dropdown")
                .then(accountSuccess, error);
        };
        DealerSaleTransactionController.prototype.save = function () {
            console.log(this.transaction);
            var self = this;
            self.transaction.orderId = self.model.id;
            self.transaction.orderNumber = self.model.orderNumber;
            self.transaction.paymentGatewayServiceName = self.transaction.paymentGatewayServiceName;
            self.transaction.transactionMediumName = self.transaction.transactionMedium;
            if (self.model.isDealerSale) {
                self.transaction.parentId = self.model.dealerId;
            }
            else {
                self.transaction.parentId = self.model.customerId;
            }
            self.transaction.transactionFor = "Sale";
            self.transaction.transactionFlowType = "Income";
            self.transaction.transactionDate = self.transactionDate.toDateString();
            self.saveService.save(self.transaction, self.url.transaction + "/Add")
                .then(function (s) {
                self.back();
            }, function (e) {
                alert('error occurred');
                console.log(e);
            });
        };
        DealerSaleTransactionController.prototype.loadAccountInfos = function () {
            var self = this;
            var success = function (response) {
                App.Display.log(response);
                self.accountInfos = response.Models;
            };
            var error = function (error) {
                App.Display.log(error);
            };
            self.searchService.search(self.searchRequest, self.url.accountInfoQuery + "/Dropdown")
                .then(success, error);
        };
        DealerSaleTransactionController.prototype.accountInfoChanged = function () {
            var self = this;
            self.transaction.accountInfoTitle = self.selectedAccountInfo["text"];
            self.transaction.accountInfoId = self.selectedAccountInfo.id;
            self.transaction.paymentGatewayServiceName = self.transaction.accountInfoTitle;
        };
        DealerSaleTransactionController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", "$uibModal", 'Excel'
        ];
        return DealerSaleTransactionController;
    }(App.BaseController));
    App.DealerSaleTransactionController = DealerSaleTransactionController;
    angular.module("app").controller("DealerSaleTransactionController", DealerSaleTransactionController);
    var DealerSaleTransactionEditController = /** @class */ (function (_super) {
        __extends(DealerSaleTransactionEditController, _super);
        function DealerSaleTransactionEditController(location, state, stateParams, url, search, save, authService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.transaction, url.transactionQuery, excel) || this;
            if (_this.stateParams["id"]) {
                _this.transaction = new App.Transaction();
                _this.editWithCallBack(_this.stateParams["id"], _this.callBack);
                _this.setupDropdowns();
                _this.selectedAccountInfo = new App.AccountInfo();
                _this.loadAccountInfos();
            }
            else {
                _this.back();
            }
            return _this;
        }
        DealerSaleTransactionEditController.prototype.setupDropdowns = function () {
            var self = this;
            var success = function (response) {
                console.log(response);
                self.transactionMediums = response.transactionMediums;
                self.paymentGatewayServices = response.paymentGatewayServices;
                self.accountInfoTypes = response.accountInfoTypes;
                self.accountInfoType = "Cash";
                self.transaction.transactionFlowType = "Income";
            };
            var error = function (error) {
                console.log(error);
            };
            self.searchService.get(self.url.transactionQuery + "/Dropdowns").then(success, error);
        };
        DealerSaleTransactionEditController.prototype.callBack = function (data) {
            console.log(data);
        };
        DealerSaleTransactionEditController.prototype.loadAccountInfos = function () {
            var self = this;
            var success = function (response) {
                App.Display.log(response);
                self.accountInfos = response.Models;
            };
            var error = function (error) {
                App.Display.log(error);
            };
            self.searchService.search(self.searchRequest, self.url.accountInfoQuery + "/Dropdown")
                .then(success, error);
        };
        DealerSaleTransactionEditController.prototype.accountInfoChanged = function () {
            var self = this;
            self.transaction.accountInfoTitle = self.selectedAccountInfo["text"];
            self.transaction.accountInfoId = self.selectedAccountInfo.id;
            //self.transaction.paymentGatewayServiceName = self.transaction.accountInfoTitle;
        };
        DealerSaleTransactionEditController.prototype.update = function () {
            var self = this;
            self.model.transactionFlowType = "Income";
            self.model.transactionFor = "Sale";
            _super.prototype.update.call(this);
        };
        DealerSaleTransactionEditController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", "$uibModal", 'Excel'
        ];
        return DealerSaleTransactionEditController;
    }(App.BaseController));
    App.DealerSaleTransactionEditController = DealerSaleTransactionEditController;
    angular.module("app").controller("DealerSaleTransactionEditController", DealerSaleTransactionEditController);
})(App || (App = {}));

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var App;
(function (App) {
    "use strict";
    var PendingSalesController = /** @class */ (function (_super) {
        __extends(PendingSalesController, _super);
        function PendingSalesController($rootScope, location, state, stateParams, url, search, save, authService, localStorageService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.sale, url.saleQuery, excel) || this;
            _this.saleFroms = [
                "All", "BizBook365", "Facebook", "Website", "PhoneCall", "MobileApp", "Referral", "Other"
            ];
            _this.saleChannels = ["All", "Inhouse", "CashOnDelivery", "Courier", "Condition"];
            _this.headers = [
                "id", "date", "orderNumber", "payableTotalAmount", "paidAmount", "dueAmount", "customerName",
                "customerPhone"
            ];
            _this.total = 0;
            _this.due = 0;
            _this.searchDates = [];
            _this.searchDate = [
                "Created", "Modified", "OrderDate"
            ];
            _this.rootScopeService = $rootScope;
            _this.localStorageService = localStorageService;
            _this.searchRequest["orderState"] = "Pending";
            //this.searchRequest["DateSearchColumn"] = this.searchDate;
            //this.searchRequest["saleFrom"] = this.saleFroms[0];
            //this.searchRequest["saleChannel"] = this.saleChannels[0];
            //this.searchRequest["thana"] = this.thanas[0];
            _this.searchRequest.startDate = _this.startDate.toJSON();
            _this.searchRequest.endDate = _this.endDate.toJSON();
            for (var enumMember in App.SearchDate) {
                if (App.SearchDate.hasOwnProperty(enumMember)) {
                    var isValueProperty = parseInt(enumMember, 10) >= 0;
                    if (isValueProperty) {
                        var i = App.SearchDate[enumMember];
                        _this.searchDates.push(i);
                    }
                }
            }
            var searchDate1 = _this.localStorageService.get(App.LocalStorageKeys.SearchDate);
            if (searchDate1 == null) {
                searchDate1 = _this.searchDates[0];
                _this.localStorageService.save(App.LocalStorageKeys.SearchDate, searchDate1);
            }
            _this.searchRequest["dateSearchColumn"] = searchDate1;
            _this.due = 0;
            _this.total = 0;
            _this.setSearchKeyword();
            _this.setStartDate();
            _this.setEndDate();
            var page = _this.localStorageService.get(App.LocalStorageKeys.PendingSaleListPageNo);
            if (!page) {
                _this.localStorageService.save(App.LocalStorageKeys.PendingSaleListPageNo, 1);
                page = 1;
            }
            _this.searchRequest.page = page;
            _this.searchByWarehouse().then(function (result) {
                console.log('searched.');
            });
            _this.orderStates = [
                "Created", "ReadyToDeparture", "OnTheWay", "Delivered", "Completed", "Cancel"
            ];
            _this.rootScopeService.$on("orderCreated", function (data) {
                console.info('loading pending triggered by notification hub');
                _this.search();
            });
            return _this;
        }
        PendingSalesController.prototype.loadData = function () {
            var self = this;
            if (this.startDate != null) {
                this.searchRequest.startDate = this.startDate.toDateString();
                self.localStorageService.save(App.LocalStorageKeys.startDate, self.startDate);
            }
            if (this.endDate != null) {
                this.searchRequest.endDate = this.endDate.toDateString();
                self.localStorageService.save(App.LocalStorageKeys.endDate, self.endDate);
            }
            this.search();
        };
        PendingSalesController.prototype.search = function () {
            var self = this;
            this.due = 0;
            this.total = 0;
            var successCallback = function (response) {
                console.log(response);
                self.models = response.Models;
                if (self.models.length === 0) {
                    console.log('No search result found');
                }
                else {
                    self.csvModels = [];
                    for (var i = 0; i < self.models.length; i++) {
                        self.total += self.models[i].totalAmount;
                        self.due += self.models[i].dueAmount;
                        self.csvModels.push(self.generateCsvModel(self.models[i]));
                    }
                }
                self.model.nextOrderState = "Created";
                self.changeStateAll(self.model.nextOrderState);
                self.totalCount = response.Count;
                self.searchRequest.totalPage = Math.ceil(response.Count / 10);
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.searchService.search(self.searchRequest, self.queryUrl + "/Search")
                .then(successCallback, errorCallback);
        };
        PendingSalesController.prototype.changeSearchDate = function () {
            var self = this;
            self.localStorageService.save(App.LocalStorageKeys.SearchDate, self.searchRequest["dateSearchColumn"]);
            self.search();
        };
        PendingSalesController.prototype.nextStateAll = function () {
            _super.prototype.nextStateAll.call(this, this.models);
        };
        PendingSalesController.prototype.updateStateAll = function () {
            _super.prototype.updateStateAll.call(this, this.models);
        };
        PendingSalesController.prototype.completeState = function (model) {
            model.nextOrderState = App.OrderState.Completed;
            _super.prototype.updateState.call(this, model);
        };
        PendingSalesController.prototype.cancelState = function (model) {
            model.nextOrderState = App.OrderState.Cancel;
            _super.prototype.updateState.call(this, model);
        };
        PendingSalesController.prototype.goto = function (page) {
            var self = this;
            self.localStorageService.save(App.LocalStorageKeys.PendingSaleListPageNo, page);
            _super.prototype.goto.call(this, page);
        };
        PendingSalesController.prototype.showReceipt = function (id) {
            var self = this;
            var name = self.localStorageService.get2(App.LocalStorageKeys.ReceiptName);
            if (!name) {
                name = 'root.receipt2';
                self.localStorageService.save(App.LocalStorageKeys.ReceiptName, name);
            }
            self.navigateState(name, { id: id });
        };
        PendingSalesController.$inject = [
            "$rootScope", "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", "LocalStorageService", 'Excel'
        ];
        return PendingSalesController;
    }(App.BaseController));
    App.PendingSalesController = PendingSalesController;
    angular.module("app").controller("PendingSalesController", PendingSalesController);
    var CreatedSalesController = /** @class */ (function (_super) {
        __extends(CreatedSalesController, _super);
        function CreatedSalesController(location, state, stateParams, url, search, save, authService, localStorageService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.sale, url.saleQuery, excel) || this;
            _this.saleFroms = [
                "All", "BizBook365", "Facebook", "Website", "PhoneCall", "MobileApp", "Referral", "Other"
            ];
            _this.saleChannels = ["All", "Inhouse", "CashOnDelivery", "Courier", "Condition"];
            _this.headers = [
                "id", "date", "orderNumber", "payableTotalAmount", "paidAmount", "dueAmount", "customerName",
                "customerPhone"
            ];
            _this.total = 0;
            _this.due = 0;
            _this.localStorageService = localStorageService;
            _this.searchRequest["orderState"] = "Created";
            //this.searchRequest["saleFrom"] = this.saleFroms[0];
            //this.searchRequest["saleChannel"] = this.saleChannels[0];
            //this.searchRequest["thana"] = this.thanas[0];
            _this.setSearchKeyword();
            _this.loadCouriers();
            var page = _this.localStorageService.get(App.LocalStorageKeys.CreatedSaleListPageNo);
            if (!page) {
                _this.localStorageService.save(App.LocalStorageKeys.CreatedSaleListPageNo, 1);
                page = 1;
            }
            _this.searchRequest.page = page;
            _this.orderStates = [
                "Pending", "ReadyToDeparture", "OnTheWay", "Delivered", "Completed", "Cancel"
            ];
            _this.searchByWarehouse().then(function (result) {
                console.log('searched.');
            });
            return _this;
        }
        CreatedSalesController.prototype.search = function () {
            var self = this;
            this.due = 0;
            this.total = 0;
            var successCallback = function (response) {
                console.log(response);
                self.models = response.Models;
                if (self.models.length === 0) {
                    console.log('No search result found');
                }
                else {
                    for (var i = 0; i < self.models.length; i++) {
                        self.total += self.models[i].totalAmount;
                        self.due += self.models[i].dueAmount;
                    }
                }
                self.model.nextOrderState = "ReadyToDeparture";
                self.changeStateAll(self.model.nextOrderState);
                self.totalCount = response.Count;
                self.searchRequest.totalPage = Math.ceil(response.Count / 10);
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.searchService.search(self.searchRequest, self.queryUrl + "/Search")
                .then(successCallback, errorCallback);
        };
        CreatedSalesController.prototype.loadCouriers = function () {
            var self = this;
            var successCallback = function (response) {
                console.log('courier' + response);
                self.couriers = response.Models;
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.searchService.search(self.searchRequest, self.url.courierQuery + "/Dropdown")
                .then(successCallback, errorCallback);
        };
        CreatedSalesController.prototype.courierChanged = function (d) {
            var self = this;
            for (var i = 0; i < self.models.length; i++) {
                self.models[i].courierShopId = d;
            }
            console.log('changed courier with ', d);
        };
        CreatedSalesController.prototype.nextStateAll = function () {
            _super.prototype.nextStateAll.call(this, this.models);
        };
        CreatedSalesController.prototype.updateStateAll = function () {
            _super.prototype.updateStateAll.call(this, this.models);
        };
        CreatedSalesController.prototype.prevState = function (model) {
            model.nextOrderState = App.OrderState.Pending;
            _super.prototype.updateState.call(this, model);
        };
        CreatedSalesController.prototype.completeState = function (model) {
            model.nextOrderState = App.OrderState.Completed;
            _super.prototype.updateState.call(this, model);
        };
        CreatedSalesController.prototype.cancelState = function (model) {
            model.nextOrderState = App.OrderState.Cancel;
            _super.prototype.updateState.call(this, model);
        };
        CreatedSalesController.prototype.goto = function (page) {
            var self = this;
            self.localStorageService.save(App.LocalStorageKeys.CreatedSaleListPageNo, page);
            _super.prototype.goto.call(this, page);
        };
        CreatedSalesController.prototype.showReceipt = function (id) {
            var self = this;
            var name = self.localStorageService.get2(App.LocalStorageKeys.ReceiptName);
            if (!name) {
                name = 'root.receipt2';
                self.localStorageService.save(App.LocalStorageKeys.ReceiptName, name);
            }
            self.navigateState(name, { id: id });
        };
        CreatedSalesController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", "LocalStorageService", 'Excel'
        ];
        return CreatedSalesController;
    }(App.BaseController));
    App.CreatedSalesController = CreatedSalesController;
    angular.module("app").controller("CreatedSalesController", CreatedSalesController);
    var ReadyToDepartureSalesController = /** @class */ (function (_super) {
        __extends(ReadyToDepartureSalesController, _super);
        function ReadyToDepartureSalesController(location, state, stateParams, url, search, save, authService, localStorageService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.sale, url.saleQuery, excel) || this;
            _this.saleFroms = [
                "All", "BizBook365", "Facebook", "Website", "PhoneCall", "MobileApp", "Referral", "Other"
            ];
            _this.saleChannels = ["All", "Inhouse", "CashOnDelivery", "Courier", "Condition"];
            _this.total = 0;
            _this.due = 0;
            _this.localStorageService = localStorageService;
            _this.searchRequest["orderState"] = "ReadyToDeparture";
            //this.searchRequest["saleFrom"] = this.saleFroms[0];
            //this.searchRequest["saleChannel"] = this.saleChannels[0];
            //this.searchRequest["thana"] = this.thanas[0];
            _this.loadWarehouses().then(function (result) {
                if (_this.warehouses.length == 1) {
                    _this.searchRequest.warehouseId = _this.warehouses[0].id;
                }
                else {
                    var whId = _this.localStorageService.get(App.LocalStorageKeys.WarehouseId);
                    if (whId != null) {
                        _this.searchRequest.warehouseId = whId;
                    }
                }
                return _this.search();
            });
            _this.orderStates = [
                "Pending", "Created", "OnTheWay", "Delivered", "Completed", "Cancel"
            ];
            _this.setSearchKeyword();
            var page = _this.localStorageService.get(App.LocalStorageKeys.ReadyToDepartureSaleListPageNo);
            if (!page) {
                _this.localStorageService.save(App.LocalStorageKeys.ReadyToDepartureSaleListPageNo, 1);
                page = 1;
            }
            _this.searchRequest.page = page;
            _this.searchByWarehouse().then(function (result) {
                console.log('searched.');
                _this.loadDeliverymans();
            });
            return _this;
        }
        ReadyToDepartureSalesController.prototype.search = function () {
            var self = this;
            this.due = 0;
            this.total = 0;
            var successCallback = function (response) {
                console.log(response);
                self.models = response.Models;
                if (self.models.length === 0) {
                    console.log('No search result found');
                }
                else {
                    for (var i = 0; i < self.models.length; i++) {
                        self.total += self.models[i].payableTotalAmount;
                        self.due += self.models[i].dueAmount;
                    }
                }
                self.model.nextOrderState = "OnTheWay";
                self.changeStateAll(self.model.nextOrderState);
                self.totalCount = response.Count;
                self.searchRequest.totalPage = Math.ceil(response.Count / 10);
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.searchService.search(self.searchRequest, self.queryUrl + "/Search")
                .then(successCallback, errorCallback);
        };
        ReadyToDepartureSalesController.prototype.prevState = function (model) {
            model.nextOrderState = App.OrderState.Created;
            _super.prototype.updateState.call(this, model);
        };
        ReadyToDepartureSalesController.prototype.completeState = function (model) {
            model.nextOrderState = App.OrderState.Completed;
            _super.prototype.updateState.call(this, model);
        };
        ReadyToDepartureSalesController.prototype.cancelState = function (model) {
            model.nextOrderState = App.OrderState.Cancel;
            _super.prototype.updateState.call(this, model);
        };
        ReadyToDepartureSalesController.prototype.loadDeliverymans = function () {
            var self = this;
            var successCallback = function (response) {
                self.deliverymans = response.Models;
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            var request = new App.SearchRequest();
            request['isEmployeeActive'] = true;
            request["RoleId"] = "9e9c6351-f8a0-492f-8e9b-4098a8f889e6";
            request.warehouseId = self.searchRequest.warehouseId;
            request.page = -1;
            var httpUrl = self.url.employeeInfo + "Query" + "/Search";
            self.searchService
                .search(request, httpUrl)
                .then(successCallback, errorCallback);
        };
        ReadyToDepartureSalesController.prototype.deliverymanChanged = function (d) {
            var self = this;
            for (var i = 0; i < self.models.length; i++) {
                self.models[i].deliverymanId = d.id;
                self.models[i].deliverymanName = d.email;
            }
        };
        ReadyToDepartureSalesController.prototype.deliverymanChangedSingle = function (p) {
            var self = this;
            for (var i = 0; i < self.deliverymans.length; i++) {
                if (self.deliverymans[i].id === p.deliverymanId) {
                    p.deliverymanName = self.deliverymans[i].email;
                    break;
                }
            }
        };
        ReadyToDepartureSalesController.prototype.goto = function (page) {
            var self = this;
            self.localStorageService.save(App.LocalStorageKeys.ReadyToDepartureSaleListPageNo, page);
            _super.prototype.goto.call(this, page);
        };
        ReadyToDepartureSalesController.prototype.showReceipt = function (id) {
            var self = this;
            var name = self.localStorageService.get2(App.LocalStorageKeys.ReceiptName);
            if (!name) {
                name = 'root.receipt2';
                self.localStorageService.save(App.LocalStorageKeys.ReceiptName, name);
            }
            self.navigateState(name, { id: id });
        };
        ReadyToDepartureSalesController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", "LocalStorageService", 'Excel'
        ];
        return ReadyToDepartureSalesController;
    }(App.BaseController));
    App.ReadyToDepartureSalesController = ReadyToDepartureSalesController;
    angular.module("app").controller("ReadyToDepartureSalesController", ReadyToDepartureSalesController);
    var OnTheWaySalesController = /** @class */ (function (_super) {
        __extends(OnTheWaySalesController, _super);
        function OnTheWaySalesController(location, state, stateParams, url, search, save, authService, locationStorageService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.sale, url.saleQuery, excel) || this;
            _this.saleFroms = [
                "All", "BizBook365", "Facebook", "Website", "PhoneCall", "MobileApp", "Referral", "Other"
            ];
            _this.saleChannels = ["All", "Inhouse", "CashOnDelivery", "Courier", "Condition"];
            _this.productAmountTotal = 0;
            _this.totalDeliveryChargeAmount = 0;
            _this.total = 0;
            _this.due = 0;
            _this.localStorageService = locationStorageService;
            _this.searchRequest["orderState"] = "OnTheWay";
            //this.searchRequest["saleFrom"] = this.saleFroms[0];
            //this.searchRequest["saleChannel"] = this.saleChannels[0];
            //this.searchRequest["thana"] = this.thanas[0];
            _this.orderStates = [
                "Pending", "Created", "ReadyToDeparture", "Delivered", "Completed", "Cancel"
            ];
            _this.setSearchKeyword();
            var page = _this.localStorageService.get(App.LocalStorageKeys.OnTheWaySaleListPageNo);
            if (!page) {
                _this.localStorageService.save(App.LocalStorageKeys.OnTheWaySaleListPageNo, 1);
                page = 1;
            }
            _this.searchRequest.page = page;
            _this.searchByWarehouse().then(function (result) {
                console.log('searched.');
                _this.loadDeliverymans();
            });
            return _this;
        }
        OnTheWaySalesController.prototype.search = function () {
            var self = this;
            this.productAmountTotal = 0;
            this.totalDeliveryChargeAmount = 0;
            this.due = 0;
            this.total = 0;
            var successCallback = function (response) {
                console.log(response);
                self.models = response.Models;
                if (self.models.length === 0) {
                    console.log('No search result found');
                }
                else {
                    for (var i = 0; i < self.models.length; i++) {
                        self.productAmountTotal += self.models[i].productAmount;
                        self.totalDeliveryChargeAmount += self.models[i].deliveryChargeAmount;
                        self.total += self.models[i].totalAmount;
                        self.due += self.models[i].dueAmount;
                    }
                }
                self.model.nextOrderState = "Delivered";
                self.changeStateAll(self.model.nextOrderState);
                self.totalCount = response.Count;
                self.searchRequest.totalPage = Math.ceil(response.Count / 10);
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.searchService.search(self.searchRequest, self.queryUrl + "/Search")
                .then(successCallback, errorCallback);
        };
        OnTheWaySalesController.prototype.nextStateAll = function () {
            _super.prototype.nextStateAll.call(this, this.models);
        };
        OnTheWaySalesController.prototype.updateStateAll = function () {
            _super.prototype.updateStateAll.call(this, this.models);
        };
        OnTheWaySalesController.prototype.prevState = function (model) {
            model.nextOrderState = App.OrderState.ReadyToDeparture;
            _super.prototype.updateState.call(this, model);
        };
        OnTheWaySalesController.prototype.completeState = function (model) {
            model.nextOrderState = App.OrderState.Completed;
            _super.prototype.updateState.call(this, model);
        };
        OnTheWaySalesController.prototype.cancelState = function (model) {
            model.nextOrderState = App.OrderState.Cancel;
            _super.prototype.updateState.call(this, model);
        };
        OnTheWaySalesController.prototype.loadDeliverymans = function () {
            var self = this;
            var successCallback = function (response) {
                self.deliverymans = response.Models;
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            var request = new App.SearchRequest();
            request['isEmployeeActive'] = true;
            request["RoleId"] = "9e9c6351-f8a0-492f-8e9b-4098a8f889e6";
            request.warehouseId = self.searchRequest.warehouseId;
            request.page = -1;
            var httpUrl = self.url.employeeInfo + "Query" + "/Search";
            self.searchService
                .search(request, httpUrl)
                .then(successCallback, errorCallback);
        };
        OnTheWaySalesController.prototype.deliverymanChanged = function (d) {
            var self = this;
            self.search();
        };
        OnTheWaySalesController.prototype.goto = function (page) {
            var self = this;
            self.localStorageService.save(App.LocalStorageKeys.OnTheWaySaleListPageNo, page);
            _super.prototype.goto.call(this, page);
        };
        OnTheWaySalesController.prototype.showReceipt = function (id) {
            var self = this;
            var name = self.localStorageService.get2(App.LocalStorageKeys.ReceiptName);
            if (!name) {
                name = 'root.receipt2';
                self.localStorageService.save(App.LocalStorageKeys.ReceiptName, name);
            }
            self.navigateState(name, { id: id });
        };
        OnTheWaySalesController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", "LocalStorageService", 'Excel'
        ];
        return OnTheWaySalesController;
    }(App.BaseController));
    App.OnTheWaySalesController = OnTheWaySalesController;
    angular.module("app").controller("OnTheWaySalesController", OnTheWaySalesController);
    var OnTheWaySalesDuesController = /** @class */ (function (_super) {
        __extends(OnTheWaySalesDuesController, _super);
        function OnTheWaySalesDuesController(location, state, stateParams, url, search, save, authService, locationStorageService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.sale, url.saleQuery, excel) || this;
            //showNextState: boolean;
            //saleFroms: string[] = [
            //    "All", "BizBook365", "Facebook", "Website", "PhoneCall", "MobileApp", "Referral", "Other"
            //];
            //saleChannels: string[] = ["All", "Inhouse", "CashOnDelivery", "Courier", "Condition"];
            _this.productAmountTotal = 0;
            _this.totalDeliveryChargeAmount = 0;
            _this.total = 0;
            _this.due = 0;
            _this.newlyPaid = 0;
            _this.localStorageService = locationStorageService;
            _this.searchRequest["orderState"] = "OnTheWay";
            //this.searchRequest["saleFrom"] = this.saleFroms[0];
            //this.searchRequest["saleChannel"] = this.saleChannels[0];
            //this.searchRequest["thana"] = this.thanas[0];
            //this.orderStates = [
            //    "Pending", "Created", "ReadyToDeparture", "Delivered", "Completed", "Cancel"
            //];
            _this.setSearchKeyword();
            _this.searchRequest.page = -1;
            _this.searchByWarehouse().then(function (result) {
                console.log('searched.');
                _this.loadDeliverymans();
            });
            _this.transaction = new App.Transaction();
            _this.transactionDate = new Date();
            _this.setupDropdowns();
            _this.selectedAccountInfo = new App.AccountInfo();
            _this.loadAccountInfos();
            return _this;
        }
        OnTheWaySalesDuesController.prototype.setupDropdowns = function () {
            var _this = this;
            var self = this;
            var success = function (response) {
                console.log(response);
                self.transactionMediums = response.transactionMediums;
                self.paymentGatewayServices = response.paymentGatewayServices;
                self.accountInfoTypes = response.accountInfoTypes;
                self.accountInfoType = "Cash";
                self.transaction.transactionMedium = "Cash";
                self.transaction.paymentGatewayService = "Cash";
            };
            var error = function (error) {
                console.log(error);
            };
            self.searchService.get(self.url.transactionQuery + "/Dropdowns").then(success, error);
            var accountSuccess = function (response) {
                console.log('account - ', response);
                var accountHeads = response.Models;
                var sale = accountHeads.filter(function (x) { return x.text === "Sale"; })[0];
                if (sale != null) {
                    _this.transaction.accountHeadId = sale.id;
                    _this.transaction.accountHeadName = sale.text;
                }
            };
            var accountRequest = new App.SearchRequest();
            self.searchService.search(accountRequest, self.url.accountHeadQuery + "/Dropdown")
                .then(accountSuccess, error);
        };
        OnTheWaySalesDuesController.prototype.loadAccountInfos = function () {
            var self = this;
            var success = function (response) {
                App.Display.log(response);
                self.accountInfos = response.Models;
                self.accountInfoChanged();
            };
            var error = function (error) {
                App.Display.log(error);
            };
            self.searchService.search(self.searchRequest, self.url.accountInfoQuery + "/Dropdown")
                .then(success, error);
        };
        OnTheWaySalesDuesController.prototype.accountInfoChanged = function () {
            var self = this;
            self.transaction.accountInfoTitle = self.selectedAccountInfo["text"];
            self.transaction.accountInfoId = self.selectedAccountInfo.id;
            self.transaction.paymentGatewayServiceName = self.transaction.accountInfoTitle;
            self.transaction.transactionMediumName = self.transaction.transactionMedium;
        };
        OnTheWaySalesDuesController.prototype.search = function () {
            var self = this;
            this.productAmountTotal = 0;
            this.totalDeliveryChargeAmount = 0;
            this.due = 0;
            this.total = 0;
            var successCallback = function (response) {
                console.log(response);
                self.models = response.Models;
                if (self.models.length === 0) {
                    console.log('No search result found');
                }
                else {
                    for (var i = 0; i < self.models.length; i++) {
                        self.models[i]["newlyPaid"] = 0;
                        self.productAmountTotal += self.models[i].productAmount;
                        self.totalDeliveryChargeAmount += self.models[i].deliveryChargeAmount;
                        self.total += self.models[i].totalAmount;
                        self.due += self.models[i].dueAmount;
                    }
                    self.updateNewlyPaidAmounts();
                }
                self.model.nextOrderState = "Delivered";
                self.changeStateAll(self.model.nextOrderState);
                self.totalCount = response.Count;
                self.searchRequest.totalPage = Math.ceil(response.Count / 10);
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.searchService.search(self.searchRequest, self.queryUrl + "/Search")
                .then(successCallback, errorCallback);
        };
        OnTheWaySalesDuesController.prototype.loadDeliverymans = function () {
            var self = this;
            var successCallback = function (response) {
                self.deliverymans = response.Models;
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            var request = new App.SearchRequest();
            request['isEmployeeActive'] = true;
            request["RoleId"] = "9e9c6351-f8a0-492f-8e9b-4098a8f889e6";
            request.warehouseId = self.searchRequest.warehouseId;
            request.page = -1;
            var httpUrl = self.url.employeeInfo + "Query" + "/Search";
            self.searchService
                .search(request, httpUrl)
                .then(successCallback, errorCallback);
        };
        OnTheWaySalesDuesController.prototype.deliverymanChanged = function (d) {
            var self = this;
            self.search();
        };
        OnTheWaySalesDuesController.prototype.goto = function (page) {
            var self = this;
            self.localStorageService.save(App.LocalStorageKeys.OnTheWaySaleListPageNo, page);
            _super.prototype.goto.call(this, page);
        };
        OnTheWaySalesDuesController.prototype.showReceipt = function (id) {
            var self = this;
            var name = self.localStorageService.get2(App.LocalStorageKeys.ReceiptName);
            if (!name) {
                name = 'root.receipt2';
                self.localStorageService.save(App.LocalStorageKeys.ReceiptName, name);
            }
            self.navigateState(name, { id: id });
        };
        OnTheWaySalesDuesController.prototype.updateNewlyPaidAmounts = function () {
            var self = this;
            self.newlyPaid = 0;
            self.models.forEach(function (x) {
                var m = x;
                console.log(m.newlyPaid);
                self.newlyPaid += m.newlyPaid;
            });
        };
        OnTheWaySalesDuesController.prototype.save = function () {
            var self = this;
            var payload = new App.SalesDuesUpdateModel();
            payload.transaction = self.transaction;
            payload.sales = self.models;
            var successCallback = function (response) {
                self.transaction = new App.Transaction();
                self.search();
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.transaction.transactionDate = self.transactionDate.toDateString();
            var l = 0;
            // process and prepare data
            for (var i = 0; i < self.models.length; i++) {
                l += self.models[i]["newlyPaid"];
            }
            if (l !== self.transaction.amount) {
                alert('Transaction amount and product breakdown amount is not equal. returning');
                return;
            }
            self.saveService.save(payload, self.commandUrl + "/SalesDuesUpdate").then(successCallback, errorCallback);
        };
        OnTheWaySalesDuesController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", "LocalStorageService", 'Excel'
        ];
        return OnTheWaySalesDuesController;
    }(App.BaseController));
    App.OnTheWaySalesDuesController = OnTheWaySalesDuesController;
    angular.module("app").controller("OnTheWaySalesDuesController", OnTheWaySalesDuesController);
    var DeliveredSalesController = /** @class */ (function (_super) {
        __extends(DeliveredSalesController, _super);
        function DeliveredSalesController(location, state, stateParams, url, search, save, authService, localStorageService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.sale, url.saleQuery, excel) || this;
            _this.saleFroms = [
                "All", "BizBook365", "Facebook", "Website", "PhoneCall", "MobileApp", "Referral", "Other"
            ];
            _this.saleChannels = ["All", "Inhouse", "CashOnDelivery", "Courier", "Condition"];
            _this.total = 0;
            _this.due = 0;
            _this.localStorageService = localStorageService;
            _this.searchRequest["orderState"] = "Delivered";
            //this.searchRequest["saleFrom"] = this.saleFroms[0];
            //this.searchRequest["saleChannel"] = this.saleChannels[0];
            //this.searchRequest["thana"] = this.thanas[0];
            _this.orderStates = [
                "Pending", "Created", "ReadyToDeparture", "OnTheWay", "Completed", "Cancel"
            ];
            _this.setSearchKeyword();
            var page = _this.localStorageService.get(App.LocalStorageKeys.DeliveredSaleListPageNo);
            if (!page) {
                _this.localStorageService.save(App.LocalStorageKeys.DeliveredSaleListPageNo, 1);
                page = 1;
            }
            _this.searchRequest.page = page;
            _this.searchByWarehouse().then(function (result) {
                console.log('searched.');
            });
            return _this;
        }
        DeliveredSalesController.prototype.search = function () {
            var self = this;
            this.due = 0;
            this.total = 0;
            var successCallback = function (response) {
                console.log(response);
                self.models = response.Models;
                if (self.models.length === 0) {
                    console.log('No search result found');
                }
                else {
                    for (var i = 0; i < self.models.length; i++) {
                        self.total += self.models[i].totalAmount;
                        self.due += self.models[i].dueAmount;
                    }
                }
                self.model.nextOrderState = "Completed";
                self.changeStateAll(self.model.nextOrderState);
                self.totalCount = response.Count;
                self.searchRequest.totalPage = Math.ceil(response.Count / 10);
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.searchService.search(self.searchRequest, self.queryUrl + "/Search")
                .then(successCallback, errorCallback);
        };
        DeliveredSalesController.prototype.prevState = function (model) {
            model.nextOrderState = App.OrderState.OnTheWay;
            _super.prototype.updateState.call(this, model);
        };
        DeliveredSalesController.prototype.cancelState = function (model) {
            model.nextOrderState = App.OrderState.Cancel;
            _super.prototype.updateState.call(this, model);
        };
        DeliveredSalesController.prototype.showReceipt = function (id) {
            var self = this;
            var name = self.localStorageService.get2(App.LocalStorageKeys.ReceiptName);
            if (!name) {
                name = 'root.receipt2';
                self.localStorageService.save(App.LocalStorageKeys.ReceiptName, name);
            }
            self.navigateState(name, { id: id });
        };
        DeliveredSalesController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", "LocalStorageService", 'Excel'
        ];
        return DeliveredSalesController;
    }(App.BaseController));
    App.DeliveredSalesController = DeliveredSalesController;
    angular.module("app").controller("DeliveredSalesController", DeliveredSalesController);
    var DeliveredProductCategoriesController = /** @class */ (function (_super) {
        __extends(DeliveredProductCategoriesController, _super);
        function DeliveredProductCategoriesController(location, state, stateParams, url, search, save, authService, localStorageService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.sale, url.saleQuery, excel) || this;
            _this.sales = [];
            _this.total = 0;
            _this.due = 0;
            _this.localStorageService = localStorageService;
            _this.searchRequest["orderState"] = "Delivered";
            //this.searchRequest["saleFrom"] = this.saleFroms[0];
            //this.searchRequest["saleChannel"] = this.saleChannels[0];
            //this.searchRequest["thana"] = this.thanas[0];
            _this.orderStates = [
                "Pending", "Created", "ReadyToDeparture", "OnTheWay", "Completed", "Cancel"
            ];
            _this.setSearchKeyword();
            _this.searchRequest.page = -1;
            _this.search();
            return _this;
        }
        DeliveredProductCategoriesController.prototype.search = function () {
            var self = this;
            var successCallback = function (response) {
                console.log(response);
                self.models = response.data;
                if (self.models.length === 0) {
                    console.log('No search result found');
                }
                else {
                    for (var i = 0; i < self.models.length; i++) {
                        // todo
                        self.total += self.models[i]["total"];
                        self.due += self.models[i]["due"];
                    }
                }
                self.searchRequest.totalPage = Math.ceil(response.Count / 10);
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.searchService.search(self.searchRequest, self.queryUrl + "/DeliveredProductCategories")
                .then(successCallback, errorCallback);
            var success = function (response) {
                console.log(response);
                self.sales = (response.Models);
            };
            self.searchService.search(self.searchRequest, self.queryUrl + "/Search")
                .then(success, errorCallback);
        };
        DeliveredProductCategoriesController.prototype.updateStateAll = function () {
            _super.prototype.updateStateAll.call(this, this.sales);
            this.total = 0;
            this.due = 0;
        };
        DeliveredProductCategoriesController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", "LocalStorageService", 'Excel'
        ];
        return DeliveredProductCategoriesController;
    }(App.BaseController));
    App.DeliveredProductCategoriesController = DeliveredProductCategoriesController;
    angular.module('app').controller("DeliveredProductCategoriesController", DeliveredProductCategoriesController);
    var CompletedSalesController = /** @class */ (function (_super) {
        __extends(CompletedSalesController, _super);
        function CompletedSalesController(location, state, stateParams, url, search, save, authService, localStorageService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.sale, url.saleQuery, excel) || this;
            _this.saleFroms = [
                "All", "BizBook365", "Facebook", "Website", "PhoneCall", "MobileApp", "Referral", "Other"
            ];
            _this.saleChannels = ["All", "Inhouse", "CashOnDelivery", "Courier", "Condition"];
            _this.total = 0;
            _this.due = 0;
            _this.localStorageService = localStorageService;
            _this.searchRequest["orderState"] = "Completed";
            //this.searchRequest["saleFrom"] = this.saleFroms[0];
            //this.searchRequest["saleChannel"] = this.saleChannels[0];
            //this.searchRequest["thana"] = this.thanas[0];
            _this.setSearchKeyword();
            var page = _this.localStorageService.get(App.LocalStorageKeys.CompletedSaleListPageNo);
            if (!page) {
                _this.localStorageService.save(App.LocalStorageKeys.CompletedSaleListPageNo, 1);
                page = 1;
            }
            _this.searchRequest.page = page;
            _this.searchByWarehouse().then(function (result) {
                console.log('searched.');
            });
            return _this;
        }
        CompletedSalesController.prototype.search = function () {
            var self = this;
            this.due = 0;
            this.total = 0;
            var successCallback = function (response) {
                console.log(response);
                self.models = response.Models;
                if (self.models.length === 0) {
                    console.log('No search result found');
                }
                else {
                    for (var i = 0; i < self.models.length; i++) {
                        self.total += self.models[i].totalAmount;
                        self.due += self.models[i].dueAmount;
                    }
                }
                self.totalCount = response.Count;
                self.searchRequest.totalPage = Math.ceil(response.Count / 10);
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.searchService.search(self.searchRequest, self.queryUrl + "/Search")
                .then(successCallback, errorCallback);
        };
        CompletedSalesController.prototype.goto = function (page) {
            var self = this;
            self.localStorageService.save(App.LocalStorageKeys.CompletedSaleListPageNo, page);
            _super.prototype.goto.call(this, page);
        };
        CompletedSalesController.prototype.showReceipt = function (id) {
            var self = this;
            var name = self.localStorageService.get2(App.LocalStorageKeys.ReceiptName);
            if (!name) {
                name = 'root.receipt2';
                self.localStorageService.save(App.LocalStorageKeys.ReceiptName, name);
            }
            self.navigateState(name, { id: id });
        };
        CompletedSalesController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", "LocalStorageService", 'Excel'
        ];
        return CompletedSalesController;
    }(App.BaseController));
    App.CompletedSalesController = CompletedSalesController;
    angular.module("app").controller("CompletedSalesController", CompletedSalesController);
    var CancelledSalesController = /** @class */ (function (_super) {
        __extends(CancelledSalesController, _super);
        function CancelledSalesController(location, state, stateParams, url, search, save, authService, localStorageService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.sale, url.saleQuery, excel) || this;
            _this.saleFroms = [
                "All", "BizBook365", "Facebook", "Website", "PhoneCall", "MobileApp", "Referral", "Other"
            ];
            _this.saleChannels = ["All", "Inhouse", "CashOnDelivery", "Courier", "Condition"];
            _this.total = 0;
            _this.due = 0;
            _this.localStorageService = localStorageService;
            _this.setSearchKeyword();
            _this.searchRequest["orderState"] = "Cancel";
            //this.searchRequest["saleFrom"] = this.saleFroms[0];
            //this.searchRequest["saleChannel"] = this.saleChannels[0];
            //this.searchRequest["thana"] = this.thanas[0];
            _this.searchByWarehouse().then(function (result) {
                console.log('searched.');
            });
            return _this;
        }
        CancelledSalesController.prototype.search = function () {
            var self = this;
            this.due = 0;
            this.total = 0;
            var successCallback = function (response) {
                console.log(response);
                self.models = response.Models;
                if (self.models.length === 0) {
                    console.log('No search result found');
                }
                else {
                    for (var i = 0; i < self.models.length; i++) {
                        self.total += self.models[i].totalAmount;
                        self.due += self.models[i].dueAmount;
                    }
                }
                self.totalCount = response.Count;
                self.searchRequest.totalPage = Math.ceil(response.Count / 10);
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.searchService.search(self.searchRequest, self.queryUrl + "/Search")
                .then(successCallback, errorCallback);
        };
        CancelledSalesController.prototype.showReceipt = function (id) {
            var self = this;
            var name = self.localStorageService.get2(App.LocalStorageKeys.ReceiptName);
            if (!name) {
                name = 'root.receipt2';
                self.localStorageService.save(App.LocalStorageKeys.ReceiptName, name);
            }
            self.navigateState(name, { id: id });
        };
        CancelledSalesController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", "LocalStorageService", 'Excel'
        ];
        return CancelledSalesController;
    }(App.BaseController));
    App.CancelledSalesController = CancelledSalesController;
    angular.module("app").controller("CancelledSalesController", CancelledSalesController);
    var ReadyToDepartureCouriersControllers = /** @class */ (function (_super) {
        __extends(ReadyToDepartureCouriersControllers, _super);
        function ReadyToDepartureCouriersControllers(location, state, statParams, url, search, save, authService, excel) {
            var _this = _super.call(this, location, state, statParams, url, search, save, authService, url.sale, url.saleQuery, excel) || this;
            //orderStates: string[] = ["ReadyToDeparture"];
            _this.total = 0;
            _this.due = 0;
            _this.searchRequest["thana"] = _this.thanas[0];
            _this.searchRequest["orderState"] = App.OrderState.ReadyToDeparture;
            //this.searchRequest["orderState"] = this.orderStates[0];
            _this.couriersSearch();
            return _this;
        }
        ReadyToDepartureCouriersControllers.prototype.couriersSearch = function () {
            var self = this;
            this.due = 0;
            this.total = 0;
            var successCallback = function (response) {
                console.log(response);
                self.models = response.Models;
                if (self.models.length === 0) {
                    console.log('No search result found');
                }
                else {
                    for (var i = 0; i < self.models.length; i++) {
                        self.total += self.models[i].totalAmount;
                        self.due += self.models[i].dueAmount;
                    }
                }
                self.totalCount = response.Count;
                self.searchRequest.totalPage = Math.ceil(response.Count / 10);
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.searchService.search(self.searchRequest, self.queryUrl + "/SearchReadyToDeparture")
                .then(successCallback, errorCallback);
        };
        ReadyToDepartureCouriersControllers.prototype.nextStateAll = function () {
            _super.prototype.nextStateAll.call(this, this.models);
        };
        ReadyToDepartureCouriersControllers.prototype.loadDeliverymans = function () {
            var self = this;
            var successCallback = function (response) {
                self.deliverymans = response.Models;
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            var searchRequest = new App.SearchRequest();
            searchRequest["role"] = "DeliveryMan";
            var httpUrl = self.url.employee + "Query" + "/Search";
            self.searchService.search(searchRequest, httpUrl).then(successCallback, errorCallback);
        };
        ReadyToDepartureCouriersControllers.prototype.deliverymanChanged = function (d) {
            var self = this;
            console.log("deliverymanChanged", d);
            for (var i = 0; i < self.models.length; i++) {
                self.models[i].deliverymanId = d.id;
                self.models[i].deliverymanName = d.userName;
            }
            console.log(self.models);
        };
        ReadyToDepartureCouriersControllers.$inject = [
            "$location", "$state", "$stateParams", "UrlService",
            "SearchService", "SaveService", "AuthService", 'Excel'
        ];
        return ReadyToDepartureCouriersControllers;
    }(App.BaseController));
    App.ReadyToDepartureCouriersControllers = ReadyToDepartureCouriersControllers;
    angular.module("app").controller("ReadyToDepartureCouriersControllers", ReadyToDepartureCouriersControllers);
    var OnTheWayCouriersController = /** @class */ (function (_super) {
        __extends(OnTheWayCouriersController, _super);
        function OnTheWayCouriersController(location, state, stateParams, url, search, save, authService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.sale, url.saleQuery, excel) || this;
            //orderStates: string[] = ["OnTheWay"];
            _this.total = 0;
            _this.due = 0;
            _this.searchRequest["thana"] = _this.thanas[0];
            _this.searchRequest["orderState"] = App.OrderState.OnTheWay;
            _this.search();
            return _this;
        }
        OnTheWayCouriersController.prototype.search = function () {
            var self = this;
            this.due = 0;
            this.total = 0;
            var successCallback = function (response) {
                console.log(response);
                self.models = response.Models;
                if (self.models.length === 0) {
                    console.log('No search result found');
                }
                else {
                    for (var i = 0; i < self.models.length; i++) {
                        self.total += self.models[i].totalAmount;
                        self.due += self.models[i].dueAmount;
                    }
                }
                self.totalCount = response.Count;
                self.searchRequest.totalPage = Math.ceil(response.Count / 10);
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.searchService.search(self.searchRequest, self.queryUrl + "/SearchReadyToDeparture")
                .then(successCallback, errorCallback);
        };
        OnTheWayCouriersController.prototype.nextStateAll = function () {
            _super.prototype.nextStateAll.call(this, this.models);
        };
        OnTheWayCouriersController.prototype.loadDeliverymans = function () {
            var self = this;
            var successCallback = function (response) {
                self.deliverymans = response.Models;
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            var searchRequest = new App.SearchRequest();
            searchRequest["role"] = "DeliveryMan";
            var httpUrl = self.url.employee + "Query" + "/Search";
            self.searchService
                .search(searchRequest, httpUrl)
                .then(successCallback, errorCallback);
        };
        OnTheWayCouriersController.prototype.deliverymanChanged = function (d) {
            var self = this;
            self.search();
        };
        OnTheWayCouriersController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", 'Excel'
        ];
        return OnTheWayCouriersController;
    }(App.BaseController));
    App.OnTheWayCouriersController = OnTheWayCouriersController;
    angular.module("app").controller("OnTheWayCouriersController", OnTheWayCouriersController);
    var DeliveredCouriersController = /** @class */ (function (_super) {
        __extends(DeliveredCouriersController, _super);
        function DeliveredCouriersController(location, state, stateParams, url, search, save, authService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.sale, url.saleQuery, excel) || this;
            _this.total = 0;
            _this.due = 0;
            _this.searchRequest["thana"] = _this.thanas[0];
            _this.searchRequest["orderState"] = App.OrderState.Delivered;
            _this.search();
            return _this;
        }
        DeliveredCouriersController.prototype.search = function () {
            var self = this;
            this.due = 0;
            this.total = 0;
            var successCallback = function (response) {
                console.log(response);
                self.models = response.Models;
                if (self.models.length === 0) {
                    console.log('No search result found');
                }
                else {
                    for (var i = 0; i < self.models.length; i++) {
                        self.total += self.models[i].totalAmount;
                        self.due += self.models[i].dueAmount;
                    }
                }
                self.totalCount = response.Count;
                self.searchRequest.totalPage = Math.ceil(response.Count / 10);
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.searchService.search(self.searchRequest, self.queryUrl + "/SearchReadyToDeparture")
                .then(successCallback, errorCallback);
        };
        DeliveredCouriersController.prototype.nextStateAll = function () {
            _super.prototype.nextStateAll.call(this, this.models);
        };
        DeliveredCouriersController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", 'Excel'
        ];
        return DeliveredCouriersController;
    }(App.BaseController));
    App.DeliveredCouriersController = DeliveredCouriersController;
    angular.module("app").controller("DeliveredCouriersController", DeliveredCouriersController);
    var DealerSalesController = /** @class */ (function (_super) {
        __extends(DealerSalesController, _super);
        function DealerSalesController(location, state, stateParams, url, search, save, authService, localStorageService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.sale, url.saleQuery, excel) || this;
            _this.total = 0;
            _this.due = 0;
            var self = _this;
            self.localStorageService = localStorageService;
            self.searchRequest.startDate = self.startDate.toJSON();
            self.searchRequest.endDate = self.endDate.toJSON();
            _this.searchRequest["orderState"] = "Completed";
            _this.loadWarehouses().then(function (result) {
                if (self.warehouses.length === 1) {
                    self.searchRequest.warehouseId = self.warehouses[0].id;
                }
                else {
                    var whId = self.localStorageService.get(App.LocalStorageKeys.WarehouseId);
                    if (whId != null) {
                        self.searchRequest.warehouseId = whId;
                    }
                }
                return self.search();
            });
            self.search();
            return _this;
        }
        DealerSalesController.prototype.loadData = function () {
            if (this.startDate != null) {
                this.searchRequest.startDate = this.startDate.toDateString();
            }
            if (this.endDate != null) {
                this.searchRequest.endDate = this.endDate.toDateString();
            }
            this.search();
        };
        DealerSalesController.prototype.search = function () {
            var self = this;
            self.total = 0;
            self.due = 0;
            var successCallback = function (response) {
                console.log('dealer-- ' + response.Models);
                self.models = response.Models;
                console.log('dealer-- ' + self.models);
                if (self.models.length === 0) {
                    console.log('No search result found');
                }
                else {
                    for (var i = 0; i < self.models.length; i++) {
                        self.total += self.models[i].totalAmount;
                        self.due += self.models[i].dueAmount;
                    }
                }
                self.totalCount = response.Count;
                self.searchRequest.totalPage = Math.ceil(response.Count / 10);
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.searchRequest["IsDealerSale"] = true;
            self.searchRequest.isIncludeParents = true;
            self.searchService
                .search(self.searchRequest, self.queryUrl + "/Search")
                .then(successCallback, errorCallback);
        };
        DealerSalesController.prototype.receiptPrint = function (id) {
            var self = this;
            var name = self.localStorageService.get2(App.LocalStorageKeys.ReceiptName);
            if (name == null) {
                name = 'root.receipt3';
                self.localStorageService.save(App.LocalStorageKeys.ReceiptName, name);
            }
            self.navigateState(name, { id: id });
        };
        DealerSalesController.prototype.activateDealerSale = function () {
            var self = this;
            self.model.isDealerSale = true;
        };
        DealerSalesController.$inject = [
            "$location", "$state", "$stateParams", "UrlService", "SearchService", "SaveService",
            "AuthService", "LocalStorageService", 'Excel'
        ];
        return DealerSalesController;
    }(App.BaseController));
    App.DealerSalesController = DealerSalesController;
    angular.module("app").controller("DealerSalesController", DealerSalesController);
    var DealerSalesCancelController = /** @class */ (function (_super) {
        __extends(DealerSalesCancelController, _super);
        function DealerSalesCancelController(location, state, stateParams, url, search, save, authService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.sale, url.saleQuery, excel) || this;
            _this.purchaseTotal = 0;
            if (_this.stateParams["id"]) {
                if (authService.accountInfo.role !== 'Deliveryman') {
                    _this.loadDeliverymans();
                }
                _this.loadDetail();
            }
            else {
                _this.back();
            }
            return _this;
        }
        DealerSalesCancelController.prototype.loadDetail = function () {
            console.log(this.stateParams);
            var self = this;
            var successCallback = function (response) {
                self.model = response.data;
                self.showNextState = self.model.nextState != null;
                if (self.showNextState) {
                    self.userNotes = self.model.remarks;
                    self.model.remarks = '';
                }
                if (self.model.installmentId) {
                    self.loadInstallments(self.model.installmentId);
                }
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            var searchRequest = new App.SearchRequest();
            searchRequest.id = this.stateParams["id"];
            searchRequest.page = -1;
            var id = this.stateParams["id"];
            var httpUrl = self.url.saleQuery + "/Detail?id=" + id;
            self.searchService
                .search(searchRequest, httpUrl)
                .then(successCallback, errorCallback);
        };
        DealerSalesCancelController.prototype.loadDeliverymans = function () {
            var self = this;
            var successCallback = function (response) {
                self.deliverymans = response.Models;
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            var searchRequest = new App.SearchRequest();
            searchRequest["role"] = "DeliveryMan";
            var httpUrl = self.url.employee + "Query" + "/Search";
            self.searchService
                .search(searchRequest, httpUrl)
                .then(successCallback, errorCallback);
        };
        DealerSalesCancelController.prototype.deliverymanChanged = function (d) {
            var self = this;
            self.model.deliverymanName = d.userName;
            self.model.deliverymanId = d.id;
        };
        DealerSalesCancelController.prototype.nextState = function () {
            var self = this;
            var successCallback = function (response) {
                self.loadDetail();
            };
            var errorCallback = function (error) {
                console.log(error);
                if (error.status === 500) {
                    alert(error.data.exceptionMessage);
                }
                else {
                    alert("Error Occurred. Please contact with Administrator");
                }
            };
            self.model.customer = null;
            self.model.transactions = null;
            self.saveService.update(self.model, self.url.sale + "/NextState").then(successCallback, errorCallback);
        };
        DealerSalesCancelController.prototype.receiptView = function () {
            var self = this;
            self.stateService.go("root.receipt", { receipt: self.model });
        };
        DealerSalesCancelController.prototype.loadInstallments = function (installmentId) {
            var self = this;
            var searchRequest = new App.SearchRequest();
            var success = function (response) {
                self.model.installment = response.data;
                console.log(self.model.installment);
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            searchRequest.id = installmentId;
            searchRequest.page = -1;
            var url = self.url.installmentQuery + '/SearchDetail';
            self.searchService.search(searchRequest, url).then(success, errorCallback);
        };
        DealerSalesCancelController.prototype.installmentPay = function (p) {
            console.log(p);
        };
        DealerSalesCancelController.prototype.updateState = function () {
            var self = this;
            var successCallback = function (response) {
                self.search();
            };
            var errorCallback = function (error) {
                console.log(error);
                if (error.status === 500) {
                    alert(error.data.exceptionMessage);
                }
                else {
                    alert("Error Occurred. Please contact with Administrator");
                }
            };
            this.saveService.update(self.model, self.url.sale + "/UpdateState")
                .then(successCallback, errorCallback);
        };
        DealerSalesCancelController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", "$uibModal", 'Excel'
        ];
        return DealerSalesCancelController;
    }(App.BaseController));
    App.DealerSalesCancelController = DealerSalesCancelController;
    angular.module("app").controller("DealerSalesCancelController", DealerSalesCancelController);
    var ProductPendingListController = /** @class */ (function (_super) {
        __extends(ProductPendingListController, _super);
        function ProductPendingListController(location, state, stateParams, url, search, save, authService, localStorageService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.sale, url.saleQuery, excel) || this;
            _this.totalQuantity = 0;
            _this.totalPrice = 0;
            _this.search();
            return _this;
        }
        ProductPendingListController.prototype.search = function () {
            var self = this;
            self.totalQuantity = 0;
            self.totalPrice = 0;
            var successCallback = function (response) {
                App.Display.log('i am in pending product success callback');
                console.log(response.data);
                self.models = response.data.histories;
                self.sales = response.data.sales;
                for (var j = 0; j < self.sales.length; j++) {
                    self.sales[j].nextOrderState = "Created";
                }
                for (var i = 0; i < response.data.histories.length; i++) {
                    self.totalQuantity += response.data.histories[i].quantity;
                    self.totalPrice += response.data.histories[i].total;
                }
                self.totalCount = response.Count;
                self.searchRequest.totalPage = Math.ceil(response.Count / 10);
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.searchRequest["orderState"] = "Pending";
            self.searchRequest.page = -1;
            self.searchRequest.isIncludeParents = true;
            self.searchService.search(self.searchRequest, self.queryUrl + "/PendingProducts")
                .then(successCallback, errorCallback);
        };
        ProductPendingListController.prototype.updateStateAll = function () {
            _super.prototype.updateStateAll.call(this, this.sales);
        };
        ProductPendingListController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", "LocalStorageService", 'Excel'
        ];
        return ProductPendingListController;
    }(App.BaseController));
    App.ProductPendingListController = ProductPendingListController;
    angular.module("app").controller("ProductPendingListController", ProductPendingListController);
    var WareHouseWiseProductPendingListController = /** @class */ (function (_super) {
        __extends(WareHouseWiseProductPendingListController, _super);
        function WareHouseWiseProductPendingListController(location, state, stateParams, url, search, save, authService, localStorageService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.sale, url.saleQuery, excel) || this;
            _this.totalQuantity = 0;
            _this.totalPrice = 0;
            _this.totalOnHand = 0;
            _this.localStorageService = localStorageService;
            _this.loadWarehouses().then(function (result) {
                if (_this.warehouses.length === 1) {
                    _this.searchRequest.warehouseId = _this.warehouses[0].id;
                }
                else {
                    var whId = _this.localStorageService.get(App.LocalStorageKeys.WarehouseId);
                    if (whId != null) {
                        _this.searchRequest.warehouseId = whId;
                    }
                }
                return _this.search();
            });
            _this.search();
            return _this;
        }
        WareHouseWiseProductPendingListController.prototype.search = function () {
            var self = this;
            self.totalQuantity = 0;
            self.totalPrice = 0;
            self.totalOnHand = 0;
            var successCallback = function (response) {
                App.Display.log('i am in pending product success callback');
                console.log(response.data);
                self.models = response.data.histories;
                self.sales = response.data.sales;
                for (var j = 0; j < self.sales.length; j++) {
                    self.sales[j].nextOrderState = "Created";
                }
                for (var i = 0; i < response.data.histories.length; i++) {
                    self.totalQuantity += response.data.histories[i].quantity;
                    self.totalPrice += response.data.histories[i].total;
                    self.totalOnHand += response.data.histories[i].onHand;
                }
                self.totalCount = response.Count;
                self.searchRequest.totalPage = Math.ceil(response.Count / 10);
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.searchRequest["orderState"] = "Pending";
            self.searchRequest.page = -1;
            self.searchRequest.isIncludeParents = true;
            self.searchService.search(self.searchRequest, self.queryUrl + "/PendingProducts")
                .then(successCallback, errorCallback);
        };
        WareHouseWiseProductPendingListController.prototype.updateStateAll = function () {
            _super.prototype.updateStateAll.call(this, this.sales);
        };
        WareHouseWiseProductPendingListController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", "LocalStorageService", 'Excel'
        ];
        return WareHouseWiseProductPendingListController;
    }(App.BaseController));
    App.WareHouseWiseProductPendingListController = WareHouseWiseProductPendingListController;
    angular.module("app").controller("WareHouseWiseProductPendingListController", WareHouseWiseProductPendingListController);
})(App || (App = {}));

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var App;
(function (App) {
    var SaleSalesmanController = /** @class */ (function (_super) {
        __extends(SaleSalesmanController, _super);
        function SaleSalesmanController(location, state, stateParams, url, search, save, authService, localStorageService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.sale, url.saleQuery, excel) || this;
            _this.orderFroms = [];
            _this.orderTypes = [];
            _this.saleFroms = [
                "All", "BizBook365", "Facebook", "Website", "PhoneCall", "MobileApp", "Referral", "Other"
            ];
            _this.saleChannels = ["All", "Inhouse", "CashOnDelivery", "Courier", "Condition"];
            _this.headers = [];
            _this.keys = [];
            //orderbyValue: string = "RequiredDeliveryDateByCustomer";
            _this.isAccendingValue = true;
            _this.totalProductAmount = 0;
            _this.totalDiscount = 0;
            _this.total = 0;
            _this.totalPaid = 0;
            _this.due = 0;
            _this.totalCost = 0;
            _this.totalProfit = 0;
            _this.localStorageService = localStorageService;
            _this.Excel = excel;
            var searchKeyword = _this.localStorageService.get(App.LocalStorageKeys.SearchKeyword);
            if (!searchKeyword) {
                searchKeyword = "";
                _this.localStorageService.save(App.LocalStorageKeys.SearchKeyword, searchKeyword);
            }
            _this.searchRequest.orderBy = "Modified";
            _this.searchRequest.isAscending = "False";
            _this.searchRequest["onlyDues"] = false;
            _this.searchRequest.keyword = searchKeyword;
            _this.searchRequest.startDate = _this.startDate.toJSON();
            _this.searchRequest.endDate = _this.endDate.toJSON();
            _this.search();
            _this.loadEmplyees();
            return _this;
        }
        SaleSalesmanController.prototype.searchOrders = function () {
            if (this.startDate != null) {
                this.searchRequest.startDate = this.startDate.toDateString();
            }
            if (this.endDate != null) {
                this.searchRequest.endDate = this.endDate.toDateString();
            }
            this.search();
        };
        SaleSalesmanController.prototype.getHeaders = function () {
            return this.headers;
        };
        SaleSalesmanController.prototype.saveSearchKeyword = function () {
            var self = this;
            self.localStorageService.save(App.LocalStorageKeys.SearchKeyword, self.searchRequest.keyword);
        };
        SaleSalesmanController.prototype.saveOrderByValue = function () {
            var self = this;
            self.localStorageService.save(App.LocalStorageKeys.OrderByKeyword, self.searchRequest.orderBy);
            self.localStorageService.save(App.LocalStorageKeys.IsAscendingValue, self.searchRequest.isAscending);
            this.search();
        };
        SaleSalesmanController.prototype.search = function () {
            var self = this;
            self.totalProductAmount = 0;
            self.totalDiscount = 0;
            self.totalPaid = 0;
            self.total = 0;
            self.totalProfit = 0;
            self.totalCost = 0;
            self.due = 0;
            var successCallback = function (response) {
                console.log(response);
                self.models = response.Models;
                if (self.models.length === 0) {
                    console.log('No search result found');
                }
                else {
                    //vm.searchRequest.keyword
                    //super.ensureKeysAreSaved(LocalStorageKeys.SaleListGridKeys, self.models[0]);
                    self.ensureKeysAreSaved(App.LocalStorageKeys.SaleListGridKeys, self.models[0]);
                    self.generateCsvModels();
                    for (var i = 0; i < self.models.length; i++) {
                        self.totalProductAmount += self.models[i].productAmount;
                        self.totalDiscount += self.models[i].discountAmount;
                        self.totalPaid += self.models[i].paidAmount;
                        self.total += self.models[i].payableTotalAmount;
                        self.totalCost += self.models[i].costAmount;
                        self.due += self.models[i].dueAmount;
                        self.totalProfit += self.models[i].profitAmount;
                    }
                }
                self.totalCount = response.Count;
                self.searchRequest.totalPage = Math.ceil(response.Count / 10);
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.searchService
                .search(self.searchRequest, self.queryUrl + "/Search")
                .then(successCallback, errorCallback);
        };
        SaleSalesmanController.prototype.loadData = function () {
            this.searchRequest.startDate = this.startDate.toJSON();
            this.searchRequest.endDate = this.endDate.toJSON();
            this.search();
        };
        SaleSalesmanController.prototype.loadEmplyees = function () {
            var self = this;
            var successCallback = function (response) {
                console.log(response);
                self.employees = response.Models;
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            var dropdownSearchRequest = new App.SearchRequest("");
            dropdownSearchRequest["role"] = "Salesman";
            self.searchService
                .search(dropdownSearchRequest, self.url.employeeInfoQuery + "/Dropdown")
                .then(successCallback, errorCallback);
        };
        SaleSalesmanController.prototype.employeeInfoChanged = function (emp) {
            var self = this;
            self.model.employeeInfoId = emp.id;
            self.model.employeeInfoName = emp.text;
            self.searchRequest['SalesmanId'] = emp.id;
            self.search();
        };
        SaleSalesmanController.prototype.goto = function (page) {
            var self = this;
            self.localStorageService.save(App.LocalStorageKeys.SaleListPageNo, page);
            _super.prototype.goto.call(this, page);
        };
        SaleSalesmanController.prototype.saveChangedState = function () {
            var self = this;
            self.localStorageService.save(App.LocalStorageKeys.OrderState, self.searchRequest["orderState"]);
            self.search();
        };
        SaleSalesmanController.prototype.updateKeys = function () {
            var self = this;
            self.localStorageService.save(App.LocalStorageKeys.SaleListGridKeys, self.keys);
            self.generateCsvModels();
        };
        SaleSalesmanController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", "LocalStorageService", 'Excel'
        ];
        return SaleSalesmanController;
    }(App.BaseController));
    App.SaleSalesmanController = SaleSalesmanController;
    angular.module("app").controller("SaleSalesmanController", SaleSalesmanController);
})(App || (App = {}));

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var App;
(function (App) {
    var BrandsController = /** @class */ (function (_super) {
        __extends(BrandsController, _super);
        function BrandsController(location, state, stateParams, url, search, save, authService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.brand, url.brandQuery, excel) || this;
            _this.headers = ["id", "brandCode", "name", "modified"];
            _this.search();
            return _this;
        }
        BrandsController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", 'Excel'
        ];
        return BrandsController;
    }(App.BaseController));
    App.BrandsController = BrandsController;
    angular.module('app').controller('BrandsController', BrandsController);
    var BrandController = /** @class */ (function (_super) {
        __extends(BrandController, _super);
        function BrandController(location, state, stateParams, url, search, save, authService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.brand, url.brandQuery, excel) || this;
            _this.isUpdateMode = false;
            if (_this.stateParams["id"]) {
                _this.isUpdateMode = true;
                _this.edit2(_this.stateParams["id"]);
            }
            return _this;
        }
        BrandController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", 'Excel'
        ];
        return BrandController;
    }(App.BaseController));
    App.BrandController = BrandController;
    angular.module("app").controller("BrandController", BrandController);
})(App || (App = {}));

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var App;
(function (App) {
    var CourierController = /** @class */ (function (_super) {
        __extends(CourierController, _super);
        function CourierController(location, state, stateParams, url, search, save, authService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.courier, url.courierQuery, excel) || this;
            // this.model.courierShopId = "00000000-0000-0000-0000-000000000001";
            _this.isUpdateMode = false;
            if (_this.stateParams["id"]) {
                _this.isUpdateMode = true;
                _this.edit(_this.stateParams["id"]);
            }
            _this.loadDropdown();
            return _this;
        }
        CourierController.prototype.loadDropdown = function () {
            var self = this;
            var successCallback = function (response) {
                console.log('addresses ', response);
                self.shops = response.Models;
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.searchService
                .search(self.searchRequest, self.url.shopQueryDropdown)
                .then(successCallback, errorCallback);
        };
        CourierController.$inject = ["$location", "$state", "$stateParams", "UrlService", "SearchService", "SaveService", "AuthService", 'Excel'];
        return CourierController;
    }(App.BaseController));
    App.CourierController = CourierController;
    angular.module("app").controller("CourierController", CourierController);
    var CouriersController = /** @class */ (function (_super) {
        __extends(CouriersController, _super);
        function CouriersController(location, state, stateParams, url, search, save, authService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.courier, url.courierQuery, excel) || this;
            _this.headers = ["id", "courierShopName", "courierShopPhone", "contactPersonName", "modified"];
            _this.search();
            return _this;
        }
        CouriersController.$inject = ["$location", "$state", "$stateParams", "UrlService", "SearchService", "SaveService", "AuthService", 'Excel'];
        return CouriersController;
    }(App.BaseController));
    App.CouriersController = CouriersController;
    angular.module("app").controller("CouriersController", CouriersController);
})(App || (App = {}));

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var App;
(function (App) {
    var DealerController = /** @class */ (function (_super) {
        __extends(DealerController, _super);
        function DealerController(location, state, stateParams, url, search, save, authService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.dealer, url.dealerQuery, excel) || this;
            _this.isUpdateMode = false;
            if (_this.stateParams["id"]) {
                _this.isUpdateMode = true;
                _this.model = new App.Dealer();
                _this.model.isVerified = true;
                _this.edit(_this.stateParams["id"]);
            }
            return _this;
        }
        DealerController.$inject = ["$location", "$state", "$stateParams", "UrlService", "SearchService",
            "SaveService", "AuthService", 'Excel'];
        return DealerController;
    }(App.BaseController));
    App.DealerController = DealerController;
    angular.module("app").controller("DealerController", DealerController);
    var DealersController = /** @class */ (function (_super) {
        __extends(DealersController, _super);
        function DealersController(location, state, stateParams, url, search, save, authService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.dealer, url.dealerQuery, excel) || this;
            _this.headers = ["id", "name", "phone", "postCode", "modified"];
            _this.search();
            return _this;
        }
        DealersController.$inject = ["$location", "$state", "$stateParams", "UrlService",
            "SearchService", "SaveService", "AuthService", 'Excel'];
        return DealersController;
    }(App.BaseController));
    App.DealersController = DealersController;
    angular.module("app").controller("DealersController", DealersController);
    var DealerHistoryController = /** @class */ (function (_super) {
        __extends(DealerHistoryController, _super);
        function DealerHistoryController(location, $state, $stateParams, url, searchService, saveService, auth, excel) {
            var _this = _super.call(this, location, $state, $stateParams, url, searchService, saveService, auth, url.dealer, url.dealerQuery, excel) || this;
            _this.headers = ["date", "invoiceNumber", "transactionNumber", "type", "total", "paid"];
            if (_this.stateParams["id"]) {
                _this.loadDealerHistory();
            }
            return _this;
        }
        DealerHistoryController.prototype.loadDealerHistory = function () {
            var self = this;
            var successCallback = function (response) {
                self.response = response.data;
                App.Display.log('dealer history', self.response);
                self.csvModels = [];
                for (var i = 0; i < self.response.histories.length; i++) {
                    self.csvModels.push(self.generateCsvModel(self.response.histories[i]));
                }
            };
            var errorCallback = function (error) {
                console.log(error);
                alert('Error occurred');
            };
            var searchRequest = new App.SearchRequest();
            searchRequest.parentId = this.stateParams["id"];
            searchRequest.page = -1;
            searchRequest["isDealerSale"] = true;
            self.searchService
                .search(searchRequest, self.url.saleQuery + "/BuyerHistory")
                .then(successCallback, errorCallback);
        };
        DealerHistoryController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", 'Excel'
        ];
        return DealerHistoryController;
    }(App.BaseController));
    App.DealerHistoryController = DealerHistoryController;
    angular.module("app").controller("DealerHistoryController", DealerHistoryController);
    var DealerProductHistoryController = /** @class */ (function (_super) {
        __extends(DealerProductHistoryController, _super);
        function DealerProductHistoryController(location, $state, $stateParams, url, searchService, saveService, auth, excel) {
            var _this = _super.call(this, location, $state, $stateParams, url, searchService, saveService, auth, url.dealer, url.dealerQuery, excel) || this;
            _this.totalQuantity = 0;
            _this.totalUnitPrice = 0;
            _this.totalPrice = 0;
            if (_this.stateParams["id"]) {
                _this.loadDealerProductHistory();
            }
            return _this;
        }
        DealerProductHistoryController.prototype.loadDealerProductHistory = function () {
            var self = this;
            self.totalUnitPrice = 0;
            self.totalQuantity = 0;
            self.totalPrice = 0;
            var successCallback = function (response) {
                self.response = response.data;
                App.Display.log('i am in history', self.response);
                self.csvModels = [];
                for (var i = 0; i < self.response.histories.length; i++) {
                    self.totalUnitPrice += self.response.histories[i].unitPrice;
                    self.totalQuantity += self.response.histories[i].quantity;
                    self.totalPrice += self.response.histories[i].total;
                    // do your stuff for csv model generation
                    self.csvModels.push(self.generateCsvModel(self.response.histories[i]));
                }
            };
            var errorCallback = function (error) {
                console.log(error);
                alert('Error occurred');
            };
            var searchRequest = new App.SearchRequest();
            searchRequest.parentId = this.stateParams["id"];
            searchRequest.page = -1;
            searchRequest["isDealerSale"] = true;
            self.searchService
                .search(searchRequest, self.url.saleQuery + "/ProductHistory")
                .then(successCallback, errorCallback);
        };
        DealerProductHistoryController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", 'Excel'
        ];
        return DealerProductHistoryController;
    }(App.BaseController));
    App.DealerProductHistoryController = DealerProductHistoryController;
    angular.module("app").controller("DealerProductHistoryController", DealerProductHistoryController);
    var DealerProductDueController = /** @class */ (function (_super) {
        __extends(DealerProductDueController, _super);
        function DealerProductDueController(location, $state, $stateParams, url, searchService, saveService, auth, excel) {
            var _this = _super.call(this, location, $state, $stateParams, url, searchService, saveService, auth, url.dealerProduct, url.dealerProductQuery, excel) || this;
            if (_this.stateParams["id"]) {
                _this.dealerId = _this.stateParams["id"];
                //this.searchRequest["dealerId"] = this.stateParams["id"];
                _this.searchRequest.isIncludeParents = true;
                _this.search();
                _this.transaction = new App.Transaction();
                _this.setupDropdowns();
                _this.selectedAccountInfo = new App.AccountInfo();
                _this.loadAccountInfos();
            }
            return _this;
        }
        DealerProductDueController.prototype.setupDropdowns = function () {
            var _this = this;
            var self = this;
            var success = function (response) {
                console.log(response);
                self.transactionMediums = response.transactionMediums;
                self.paymentGatewayServices = response.paymentGatewayServices;
                self.accountInfoTypes = response.accountInfoTypes;
                self.accountInfoType = "Cash";
                self.transaction.transactionMedium = "Cash";
                self.transaction.paymentGatewayService = "Cash";
            };
            var error = function (error) {
                console.log(error);
            };
            self.searchService.get(self.url.transactionQuery + "/Dropdowns").then(success, error);
            var accountSuccess = function (response) {
                console.log('account - ', response);
                var accountHeads = response.Models;
                var sale = accountHeads.filter(function (x) { return x.text === "Sale"; })[0];
                if (sale != null) {
                    _this.transaction.accountHeadId = sale.id;
                    _this.transaction.accountHeadName = sale.text;
                }
            };
            var accountRequest = new App.SearchRequest();
            self.searchService.search(accountRequest, self.url.accountHeadQuery + "/Dropdown")
                .then(accountSuccess, error);
        };
        DealerProductDueController.prototype.save = function () {
            var self = this;
            App.Display.log(self.models);
            var successCallback = function (response) {
                App.Display.log(response);
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.transaction.transactionDate = self.transactionDate.toDateString();
            var dealerProductTransactions = [];
            var l = 0;
            // process and prepare data
            for (var i = 0; i < self.models.length; i++) {
                var m = new App.DealerProductTransaction();
                m.amount = self.models[i].newlyPaid;
                m.dealerProductId = self.models[i].id;
                dealerProductTransactions.push(m);
                l += dealerProductTransactions[i].amount;
            }
            if (l !== self.transaction.amount) {
                alert('Transaction amount and product breakdown amount is not equal. returning');
                return;
            }
            var updateModel = new App.DealerProductDetailUpdateModel();
            updateModel.dealerId = self.dealerId;
            updateModel.dealerProductTransactions = dealerProductTransactions;
            updateModel.transaction = self.transaction;
            self.saveService.update(updateModel, self.commandUrl + "/UpdateDues").then(successCallback, errorCallback);
        };
        DealerProductDueController.prototype.loadAccountInfos = function () {
            var self = this;
            var success = function (response) {
                App.Display.log(response);
                self.accountInfos = response.Models;
            };
            var error = function (error) {
                App.Display.log(error);
            };
            self.searchService.search(self.searchRequest, self.url.accountInfoQuery + "/Dropdown")
                .then(success, error);
        };
        DealerProductDueController.prototype.accountInfoChanged = function () {
            var self = this;
            self.transaction.accountInfoTitle = self.selectedAccountInfo["text"];
            self.transaction.accountInfoId = self.selectedAccountInfo.id;
            self.transaction.paymentGatewayServiceName = self.transaction.accountInfoTitle;
            self.transaction.transactionMediumName = self.transaction.transactionMedium;
        };
        DealerProductDueController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", 'Excel'
        ];
        return DealerProductDueController;
    }(App.BaseController));
    App.DealerProductDueController = DealerProductDueController;
    angular.module("app").controller("DealerProductDueController", DealerProductDueController);
})(App || (App = {}));

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var App;
(function (App) {
    var ShopsController = /** @class */ (function (_super) {
        __extends(ShopsController, _super);
        function ShopsController(location, state, stateParams, url, search, save, authService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.shop, url.shopQuery, excel) || this;
            _this.search();
            return _this;
        }
        ShopsController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService",
            'Excel'
        ];
        return ShopsController;
    }(App.BaseController));
    App.ShopsController = ShopsController;
    angular.module('app').controller('ShopsController', ShopsController);
    var ShopController = /** @class */ (function (_super) {
        __extends(ShopController, _super);
        function ShopController(location, state, stateParams, url, search, save, authService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.shop, url.shopQuery, excel) || this;
            _this.isUpdateMode = false;
            if (_this.stateParams["id"]) {
                _this.isUpdateMode = true;
                console.log(_this.queryUrl);
                _this.edit(_this.stateParams["id"]);
            }
            return _this;
        }
        ShopController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService",
            'Excel'
        ];
        return ShopController;
    }(App.BaseController));
    App.ShopController = ShopController;
    angular.module("app").controller("ShopController", ShopController);
    var MyShopController = /** @class */ (function (_super) {
        __extends(MyShopController, _super);
        function MyShopController(location, state, stateParams, url, search, save, authService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.myShop, url.myShopQuery, excel) || this;
            _this.isUpdateMode = true;
            _this.edit("");
            return _this;
        }
        MyShopController.prototype.update = function () {
            var self = this;
            var successCallback = function (response) {
                self.location.path("/");
            };
            var errorCallback = function (error) {
                console.log(error);
                alert(error);
            };
            self.saveService.update(self.model, self.commandUrl + "/Edit").then(successCallback, errorCallback);
        };
        MyShopController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService",
            'Excel'
        ];
        return MyShopController;
    }(App.BaseController));
    App.MyShopController = MyShopController;
    angular.module("app").controller("MyShopController", MyShopController);
})(App || (App = {}));

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var App;
(function (App) {
    "use strict";
    var SuppliersController = /** @class */ (function (_super) {
        __extends(SuppliersController, _super);
        function SuppliersController(location, state, stateParams, url, search, save, authService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.supplier, url.supplierQuery, excel) || this;
            _this.headers = ["id", "name", "phone", "modified"];
            _this.search();
            return _this;
        }
        SuppliersController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", 'Excel'
        ];
        return SuppliersController;
    }(App.BaseController));
    App.SuppliersController = SuppliersController;
    angular.module('app').controller('SuppliersController', SuppliersController);
    var SupplierController = /** @class */ (function (_super) {
        __extends(SupplierController, _super);
        function SupplierController(location, state, stateParams, url, search, save, authService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.supplier, url.supplierQuery, excel) || this;
            _this.isUpdateMode = false;
            if (_this.stateParams["id"]) {
                _this.isUpdateMode = true;
                _this.edit(_this.stateParams["id"]);
            }
            return _this;
        }
        SupplierController.$inject = ["$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", 'Excel'];
        return SupplierController;
    }(App.BaseController));
    App.SupplierController = SupplierController;
    angular.module("app").controller("SupplierController", SupplierController);
    var SupplierHistoryController = /** @class */ (function (_super) {
        __extends(SupplierHistoryController, _super);
        function SupplierHistoryController(location, state, stateParams, url, search, save, authService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.supplier, url.supplierQuery, excel) || this;
            _this.headers = ["id", "type", "total", "paid", "date"];
            _this.isUpdateMode = false;
            if (_this.stateParams["id"]) {
                _this.isUpdateMode = true;
                _this.loadSupplierHistory(_this.stateParams["id"]);
            }
            return _this;
        }
        SupplierHistoryController.prototype.loadSupplierHistory = function (id) {
            var self = this;
            var onSuccess = function (response) {
                self.response = response.data;
                App.Display.log(response.data);
                self.csvModels = [];
                for (var i = 0; i < self.response.histories.length; i++) {
                    self.csvModels.push(self.generateCsvModel(self.response.histories[i]));
                }
            };
            var onError = function (error) {
                console.log(error);
                alert('Error occurred');
            };
            var searchRequest = new App.SearchRequest();
            searchRequest.parentId = id;
            var url = self.queryUrl + '/History';
            self.searchService.search(searchRequest, url).then(onSuccess, onError);
        };
        SupplierHistoryController.$inject = ["$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", 'Excel'];
        return SupplierHistoryController;
    }(App.BaseController));
    App.SupplierHistoryController = SupplierHistoryController;
    angular.module("app").controller("SupplierHistoryController", SupplierHistoryController);
    var SupplierProductHistoryController = /** @class */ (function (_super) {
        __extends(SupplierProductHistoryController, _super);
        function SupplierProductHistoryController(location, state, stateParams, url, search, save, authService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.supplier, url.supplierQuery, excel) || this;
            _this.totalQuantity = 0;
            _this.totalUnitPrice = 0;
            _this.totalPrice = 0;
            if (_this.stateParams["id"]) {
                _this.loadSupplierProductHistory();
            }
            return _this;
        }
        SupplierProductHistoryController.prototype.loadSupplierProductHistory = function () {
            var self = this;
            var successCallback = function (response) {
                self.response = response.data;
                console.log("response" + self.response);
                self.csvModels = [];
                for (var i = 0; i < self.response.histories.length; i++) {
                    self.totalUnitPrice += self.response.histories[i].unitPrice;
                    self.totalQuantity += self.response.histories[i].quantity;
                    self.totalPrice += self.response.histories[i].total;
                    self.csvModels.push(self.generateCsvModel(self.response.histories[i]));
                }
            };
            var errorCallback = function (error) {
                console.log(error);
                alert("Error");
            };
            var searchRequest = new App.SearchRequest();
            searchRequest.parentId = this.stateParams["id"];
            searchRequest.page = -1;
            self.
                searchService.
                search(searchRequest, self.url.purchaseQuery + "/ProductHistory").
                then(successCallback, errorCallback);
        };
        SupplierProductHistoryController.$inject = ["$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", 'Excel'];
        return SupplierProductHistoryController;
    }(App.BaseController));
    App.SupplierProductHistoryController = SupplierProductHistoryController;
    angular.module("app").controller("SupplierProductHistoryController", SupplierProductHistoryController);
    var SupplierProductDueController = /** @class */ (function (_super) {
        __extends(SupplierProductDueController, _super);
        function SupplierProductDueController(location, $state, $stateParams, url, searchService, saveService, auth, excel) {
            var _this = _super.call(this, location, $state, $stateParams, url, searchService, saveService, auth, url.supplierProduct, url.supplierProductQuery, excel) || this;
            if (_this.stateParams["id"]) {
                _this.supplierId = _this.stateParams["id"];
                _this.searchRequest.isIncludeParents = true;
                _this.searchRequest.parentId = _this.supplierId;
                _this.search();
                _this.transaction = new App.Transaction();
                _this.setupDropdowns();
                _this.selectedAccountInfo = new App.AccountInfo();
                _this.loadAccountInfos();
            }
            return _this;
        }
        SupplierProductDueController.prototype.setupDropdowns = function () {
            var _this = this;
            var self = this;
            var success = function (response) {
                console.log(response);
                self.transactionMediums = response.transactionMediums;
                self.paymentGatewayServices = response.paymentGatewayServices;
                self.accountInfoTypes = response.accountInfoTypes;
                self.accountInfoType = "Cash";
                self.transaction.transactionMedium = "Cash";
                self.transaction.paymentGatewayService = "Cash";
            };
            var error = function (error) {
                console.log(error);
            };
            self.searchService.get(self.url.transactionQuery + "/Dropdowns").then(success, error);
            var accountSuccess = function (response) {
                console.log('account - ', response);
                var accountHeads = response.Models;
                var purchase = accountHeads.filter(function (x) { return x.text === "Purchase"; })[0];
                if (purchase != null) {
                    _this.transaction.accountHeadId = purchase.id;
                    _this.transaction.accountHeadName = purchase.text;
                }
            };
            var accountRequest = new App.SearchRequest();
            self.searchService.search(accountRequest, self.url.accountHeadQuery + "/Dropdown")
                .then(accountSuccess, error);
        };
        SupplierProductDueController.prototype.loadAccountInfos = function () {
            var self = this;
            var success = function (response) {
                console.log(response);
                self.accountInfos = response.Models;
            };
            var error = function (error) {
                console.log(error);
            };
            self.searchService.search(self.searchRequest, self.url.accountInfoQuery + "/Dropdown")
                .then(success, error);
        };
        SupplierProductDueController.prototype.accountInfoChanged = function () {
            var self = this;
            self.transaction.accountInfoTitle = self.selectedAccountInfo["text"];
            self.transaction.accountInfoId = self.selectedAccountInfo.id;
            self.transaction.paymentGatewayServiceName = self.transaction.accountInfoTitle;
            self.transaction.transactionMediumName = self.transaction.transactionMedium;
        };
        SupplierProductDueController.prototype.save = function () {
            var self = this;
            console.log("update model-" + self.models);
            var successCallback = function (response) {
                console.log(response);
                self.back();
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            var supplierProductTransactions = [];
            var val = 0;
            for (var i = 0; i < self.models.length; i++) {
                var m = new App.SupplierProductTransaction();
                m.amount = self.models[i].newlyPaid;
                m.supplierProductId = self.models[i].id;
                supplierProductTransactions.push(m);
                val += supplierProductTransactions[i].amount;
            }
            if (val !== self.transaction.amount) {
                alert('Transaction amount and product breakdown amount is not equal. returning');
                return;
            }
            var updateModel = new App.SupplierProductDetailUpdateModel();
            updateModel.supplierId = self.supplierId;
            updateModel.supplierProductTransactions = supplierProductTransactions;
            updateModel.transaction = self.transaction;
            self.saveService.update(updateModel, self.commandUrl + "/UpdateDues")
                .then(successCallback, errorCallback);
        };
        SupplierProductDueController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", 'Excel'
        ];
        return SupplierProductDueController;
    }(App.BaseController));
    App.SupplierProductDueController = SupplierProductDueController;
    angular.module("app").controller("SupplierProductDueController", SupplierProductDueController);
})(App || (App = {}));

var App;
(function (App) {
    var BaseReportController = /** @class */ (function () {
        function BaseReportController(scope, url, search, reportName) {
            this.hideDropdown = true;
            var self = this;
            var timestamp = new Date().toString();
            self.gridOptions = {
                enableGridMenu: true,
                enableSelectAll: true,
                exporterCsvFilename: reportName + timestamp + '.csv',
                exporterPdfDefaultStyle: { fontSize: 9 },
                exporterPdfTableStyle: { margin: [30, 30, 30, 30] },
                exporterPdfTableHeaderStyle: { fontSize: 10, bold: true, italics: true, color: 'red' },
                exporterPdfHeader: { text: "My Header", style: 'headerStyle' },
                exporterPdfFooter: function (currentPage, pageCount) {
                    return { text: currentPage.toString() + ' of ' + pageCount.toString(), style: 'footerStyle' };
                },
                exporterPdfCustomFormatter: function (docDefinition) {
                    docDefinition.styles.headerStyle = { fontSize: 22, bold: true };
                    docDefinition.styles.footerStyle = { fontSize: 10, bold: true };
                    return docDefinition;
                },
                exporterPdfOrientation: 'portrait',
                exporterPdfPageSize: 'LETTER',
                exporterPdfMaxGridWidth: 500,
                exporterCsvLinkElement: angular.element(document.querySelectorAll(".custom-csv-link-location")),
                onRegisterApi: function (gridApi) {
                    self.gridApi = gridApi;
                }
            };
            self.searchService = search;
            self.urlService = url;
            self.startDate = new Date();
            self.endDate = new Date();
        }
        BaseReportController.prototype.openStartDate = function () {
            this.startDatePopUp = true;
        };
        BaseReportController.prototype.openEndDate = function () {
            this.endDatePopUp = true;
        };
        return BaseReportController;
    }());
    App.BaseReportController = BaseReportController;
})(App || (App = {}));

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var App;
(function (App) {
    var ProductDetailsAmountReportController = /** @class */ (function (_super) {
        __extends(ProductDetailsAmountReportController, _super);
        function ProductDetailsAmountReportController(scope, url, search) {
            var _this = _super.call(this, scope, url, search, 'ProductDetail-report-') || this;
            _this.title = "Product Detail By Amount";
            _this.loadData();
            return _this;
        }
        ProductDetailsAmountReportController.prototype.$onInit = function () { };
        ProductDetailsAmountReportController.prototype.loadData = function () {
            var _this = this;
            var successCallback = function (response) {
                console.log(response.data);
                _this.gridOptions["data"] = response.data;
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            var request = new App.SearchRequest("", "Date", "False");
            request["ReportType"] = "Daily";
            request.shopId = "1";
            request.page = -1;
            request.startDate = this.startDate.toJSON();
            request["ProductReportType"] = "ProductDetailByAmount";
            this.searchService.search(request, this.urlService.productDetailQueryReport).then(successCallback, errorCallback);
        };
        ProductDetailsAmountReportController.$inject = ["$scope", "UrlService", "SearchService"];
        return ProductDetailsAmountReportController;
    }(App.BaseReportController));
    App.ProductDetailsAmountReportController = ProductDetailsAmountReportController;
    angular.module('app').controller("ProductDetailsAmountReportController", ProductDetailsAmountReportController);
    var ProductDetailsHistoryReportController = /** @class */ (function (_super) {
        __extends(ProductDetailsHistoryReportController, _super);
        function ProductDetailsHistoryReportController(scope, url, search) {
            var _this = _super.call(this, scope, url, search, 'ProductDetail-report-') || this;
            var self = _this;
            self.hideDropdown = false;
            self.hideStartDate = true;
            self.title = "Product Detail History";
            self.loadDropdown();
            return _this;
        }
        ProductDetailsHistoryReportController.prototype.$onInit = function () { };
        ProductDetailsHistoryReportController.prototype.loadData = function () {
            var _this = this;
            var successCallback = function (response) {
                console.log(response.data);
                _this.gridOptions["data"] = response.data;
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            var request = new App.SearchRequest("", "Date", "False");
            request["ReportType"] = "Daily";
            request.shopId = "1";
            request.page = -1;
            request["ProductReportType"] = "ProductDetailByAmount";
            request['ProductDetailId'] = this.selectedItem.id;
            this.searchService.search(request, this.urlService.productDetailQueryReport).then(successCallback, errorCallback);
        };
        ProductDetailsHistoryReportController.prototype.loadDropdown = function () {
            var self = this;
            var successCallback = function (response) {
                console.log('items ', response);
                self.items = response.Models;
                self.selectedItem = self.items[0];
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            var request = new App.SearchRequest("", "Name", "True", "");
            self.searchService
                .search(request, self.urlService.productDetailQuery + "/Dropdown")
                .then(successCallback, errorCallback);
        };
        ProductDetailsHistoryReportController.prototype.dropdownChanged = function () {
            this.loadData();
        };
        ProductDetailsHistoryReportController.$inject = ["$scope", "UrlService", "SearchService"];
        return ProductDetailsHistoryReportController;
    }(App.BaseReportController));
    App.ProductDetailsHistoryReportController = ProductDetailsHistoryReportController;
    angular.module('app').controller("ProductDetailsHistoryReportController", ProductDetailsHistoryReportController);
    var ProductDetailsHistoryReport2Controller = /** @class */ (function (_super) {
        __extends(ProductDetailsHistoryReport2Controller, _super);
        function ProductDetailsHistoryReport2Controller(location, state, stateParams, url, search, save, authService, localStorageService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.productDetailQueryReport, url.productDetailQueryReport, excel) || this;
            _this.selectedItem = "";
            _this.totalQuantityStartToday = 0;
            _this.totalQuantityEndingToday = 0;
            _this.totalQuantityPurchaseToday = 0;
            _this.totalQuantitySalePendingToday = 0;
            _this.totalQuantitySaleProcessingToday = 0;
            _this.totalQuantitySaleDoneToday = 0;
            _this.totalAmountSaleToday = 0;
            _this.totalAmountCostForSaleToday = 0;
            //headers = ["amountAveragePurchasePricePerUnitToday", "amountAverageSalePriceToday", "amountCostForSaleToday", "amountPaidToday", "amountPayableToday", "amountProfitPercentInAllProductsToday", "amountProfitPercentToday", "amountProfitToday", "amountPurchasePercentInAllProductsToday", "amountPurchaseToday", "amountReceivableToday", "amountReceivedToday", "amountSalePercentInAllProductsToday", "amountSaleToCustomerToday", "amountSaleToDealerToday","amountSaleToday",];
            _this.headers = ["date", "productDetailName", "quantityStartingToday", "quantityEndingToday", "quantityPurchaseToday", "quantitySaleToday", "amountSaleToday", "amountCostForSaleToday"];
            var self = _this;
            self.localStorageService = localStorageService;
            self.productDropdownRequest = new App.SearchRequest();
            self.productDropdownRequest["isProductActive"] = true;
            self.loadDropdown();
            self.searchRequest = new App.SearchRequest();
            self.loadWarehouses().then(function (result) {
                if (self.warehouses.length === 1) {
                    self.searchRequest.warehouseId = self.warehouses[0].id;
                }
                else {
                    self.searchRequest.warehouseId = self.warehouses[0].id;
                    var whId = self.localStorageService.get(App.LocalStorageKeys.WarehouseId);
                    if (whId != null) {
                        self.searchRequest.warehouseId = whId;
                    }
                }
                self.loadData();
            });
            return _this;
        }
        ProductDetailsHistoryReport2Controller.prototype.$onInit = function () { };
        ProductDetailsHistoryReport2Controller.prototype.loadData = function () {
            var self = this;
            self.totalQuantityStartToday = 0;
            self.totalQuantityEndingToday = 0;
            self.totalQuantityPurchaseToday = 0;
            self.totalQuantitySalePendingToday = 0;
            self.totalQuantitySaleProcessingToday = 0;
            self.totalQuantitySaleDoneToday = 0;
            self.totalAmountSaleToday = 0;
            self.totalAmountCostForSaleToday = 0;
            var successCallback = function (response) {
                self.models = response.data.item2;
                self.csvModels = [];
                self.chartLabels = [];
                self.chartData = [];
                for (var i = 0; i < self.models.length; i++) {
                    self.csvModels.push(self.generateCsvModel(self.models[i]));
                }
                for (var i_1 = 0; i_1 < response.data.item2.length; i_1++) {
                    self.totalQuantityStartToday += response.data.item2[i_1].quantityStartingToday;
                    self.totalQuantityEndingToday += response.data.item2[i_1].quantityEndingToday;
                    self.totalQuantityPurchaseToday += response.data.item2[i_1].quantityPurchaseToday;
                    self.totalQuantitySalePendingToday += response.data.item2[i_1].quantitySalePendingToday;
                    self.totalQuantitySaleProcessingToday += response.data.item2[i_1].quantitySaleProcessingToday;
                    self.totalQuantitySaleDoneToday += response.data.item2[i_1].quantitySaleDoneToday;
                    self.totalAmountSaleToday += response.data.item2[i_1].amountSaleToday;
                    self.totalAmountCostForSaleToday += response.data.item2[i_1].amountCostForSaleToday;
                    self.chartLabels.push(self.models[i_1].modified);
                    self.chartData.push(self.models[i_1].amountPaidToday);
                }
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            var request = new App.SearchRequest();
            request["startDate"] = self.startDate.toLocaleString();
            request["endDate"] = self.endDate.toLocaleString();
            request.shopId = "1";
            request.page = -1;
            request["productReportType"] = "ProductDetailHistory";
            request['parentId'] = self.selectedItem.id;
            request['warehouseId'] = self.searchRequest.warehouseId;
            this.searchService.search(request, self.url.productDetailQuery + '/HistoryByDate').then(successCallback, errorCallback);
        };
        ProductDetailsHistoryReport2Controller.prototype.loadDropdown = function () {
            var self = this;
            var successCallback = function (response) {
                self.productDetails = response.Models;
                self.selectedItem = self.productDetails[0];
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.productDropdownRequest.page = -1;
            self.searchService
                .search(self.productDropdownRequest, self.url.productDetailQuery + "/Dropdown")
                .then(successCallback, errorCallback);
        };
        ProductDetailsHistoryReport2Controller.prototype.dropdownChanged = function () {
            var self = this;
            self.loadData();
        };
        ProductDetailsHistoryReport2Controller.prototype.selectedTypeAhead = function (a, b, c, d) {
            App.Display.log(this.selectedItem);
        };
        ProductDetailsHistoryReport2Controller.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", 'localStorageService', 'Excel'
        ];
        return ProductDetailsHistoryReport2Controller;
    }(App.BaseController));
    App.ProductDetailsHistoryReport2Controller = ProductDetailsHistoryReport2Controller;
    angular.module('app').controller("ProductDetailsHistoryReport2Controller", ProductDetailsHistoryReport2Controller);
    var ProductDetailsStockReportController = /** @class */ (function (_super) {
        __extends(ProductDetailsStockReportController, _super);
        function ProductDetailsStockReportController(location, state, stateParams, url, search, save, authService, localStorageService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.productDetailQuery, url.productDetailQueryReport, excel) || this;
            _this.selectedItem = "";
            _this.totalQuantityStartToday = 0;
            _this.totalQuantityEndingToday = 0;
            _this.totalQuantityPurchaseToday = 0;
            _this.totalQuantitySaleToday = 0;
            _this.totalAmountSaleToday = 0;
            _this.totalAmountCostForSaleToday = 0;
            _this.headers = ["date", "productDetailName", "quantityStartingToday", "quantityEndingToday", "quantityPurchaseToday", "quantitySaleToday", "amountSaleToday", "amountCostForSaleToday", 'Excel'];
            var self = _this;
            self.hideEndDate = false;
            self.searchRequest["isProductActive"] = true;
            self.localStorageService = localStorageService;
            _this.searchRequest.startDate = _this.startDate.toJSON();
            _this.searchRequest.endDate = _this.endDate.toJSON();
            _this.loadWarehouses().then(function (result) {
                if (self.warehouses.length === 1) {
                    self.searchRequest.warehouseId = self.warehouses[0].id;
                }
                else {
                    var whId = self.localStorageService.get(App.LocalStorageKeys.WarehouseId);
                    if (whId != null) {
                        self.searchRequest.warehouseId = whId;
                    }
                }
                //return self.search();
                self.loadData();
            });
            return _this;
        }
        ProductDetailsStockReportController.prototype.$onInit = function () { };
        ProductDetailsStockReportController.prototype.loadData = function () {
            var self = this;
            self.totalQuantityPurchaseToday = 0;
            self.totalQuantitySaleToday = 0;
            self.totalAmountSaleToday = 0;
            var successCallback = function (response) {
                console.log(response.data);
                self.models = response.data.item1;
                self.chartLabels = [];
                self.chartData = [];
                self.csvModels = [];
                for (var i = 0; i < self.models.length; i++) {
                    self.csvModels.push(self.generateCsvModel(self.models[i]));
                }
                for (var i_2 = 0; i_2 < response.data.item1.length; i_2++) {
                    self.totalQuantityStartToday += response.data.item1[i_2].quantityStartingToday;
                    self.totalQuantityEndingToday += response.data.item1[i_2].quantityEndingToday;
                    self.totalQuantityPurchaseToday += response.data.item1[i_2].quantityPurchaseToday;
                    self.totalQuantitySaleToday += response.data.item1[i_2].quantitySaleToday;
                    self.totalAmountSaleToday += response.data.item1[i_2].amountSaleToday;
                    self.totalAmountCostForSaleToday += response.data.item1[i_2].amountCostForSaleToday;
                    self.chartLabels.push(self.models[i_2].modified);
                    self.chartData.push(self.models[i_2].amountProfitToday);
                }
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            var request = new App.SearchRequest();
            request["startDate"] = self.startDate.toLocaleString();
            request["endDate"] = self.endDate.toLocaleString();
            request.shopId = "1";
            request.page = -1;
            request["isProductActive"] = self.searchRequest["isProductActive"];
            request["productReportType"] = "ProductDetailStockReport";
            request["warehouseId"] = self.searchRequest.warehouseId;
            console.log('Product stock' + request);
            this.searchService.search(request, self.url.productDetailQueryReport).then(successCallback, errorCallback);
        };
        ProductDetailsStockReportController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", "LocalStorageService",
        ];
        return ProductDetailsStockReportController;
    }(App.BaseController));
    App.ProductDetailsStockReportController = ProductDetailsStockReportController;
    angular.module('app').controller("ProductDetailsStockReportController", ProductDetailsStockReportController);
})(App || (App = {}));

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var App;
(function (App) {
    var SaleIndividualReportController = /** @class */ (function (_super) {
        __extends(SaleIndividualReportController, _super);
        function SaleIndividualReportController(location, state, stateParams, url, search, save, authService, localStorageService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.sale, url.saleQuery, excel) || this;
            _this.orderFroms = [];
            _this.orderTypes = [];
            _this.saleFroms = [
                "All", "BizBook365", "Facebook", "Website", "PhoneCall", "MobileApp", "Referral", "Other"
            ];
            _this.saleChannels = ["All", "Inhouse", "CashOnDelivery", "Courier", "Condition"];
            _this.headers = [];
            _this.keys = [];
            _this.orderbyValue = "RequiredDeliveryDateByCustomer";
            _this.isAccendingValue = true;
            _this.totalProductAmount = 0;
            _this.totalDiscount = 0;
            _this.total = 0;
            _this.totalPaid = 0;
            _this.due = 0;
            _this.totalCost = 0;
            _this.totalProfit = 0;
            _this.totalPaidByCash = 0;
            _this.totalPaidByOther = 0;
            _this.localStorageService = localStorageService;
            _this.Excel = excel;
            _this.searchRequest.isIncludeParents = true;
            _this.searchRequest.orderBy = "Modified";
            _this.searchRequest.isAscending = "False";
            _this.searchRequest["onlyDues"] = false;
            _this.searchRequest.startDate = _this.startDate.toJSON();
            _this.searchRequest.endDate = _this.endDate.toJSON();
            _this.loadWarehouses().then(function (result) {
                if (_this.warehouses.length == 1) {
                    _this.searchRequest.warehouseId = _this.warehouses[0].id;
                }
                else {
                    var whId = _this.localStorageService.get(App.LocalStorageKeys.WarehouseId);
                    if (whId != null) {
                        _this.searchRequest.warehouseId = whId;
                    }
                }
                return _this.search();
            });
            return _this;
        }
        SaleIndividualReportController.prototype.loadData = function () {
            if (this.startDate != null) {
                this.searchRequest.startDate = this.startDate.toDateString();
            }
            if (this.endDate != null) {
                this.searchRequest.endDate = this.endDate.toDateString();
            }
            this.search();
        };
        SaleIndividualReportController.prototype.getHeaders = function () {
            return this.headers;
        };
        SaleIndividualReportController.prototype.saveSearchKeyword = function () {
            var self = this;
            self.localStorageService.save(App.LocalStorageKeys.SearchKeyword, self.searchRequest.keyword);
        };
        SaleIndividualReportController.prototype.saveOrderByValue = function () {
            var self = this;
            self.localStorageService.save(App.LocalStorageKeys.OrderByKeyword, self.searchRequest.orderBy);
            self.localStorageService.save(App.LocalStorageKeys.IsAscendingValue, self.searchRequest.isAscending);
            this.search();
        };
        SaleIndividualReportController.prototype.search = function () {
            var self = this;
            self.totalProductAmount = 0;
            self.totalDiscount = 0;
            self.totalPaid = 0;
            self.total = 0;
            self.totalProfit = 0;
            self.totalCost = 0;
            self.due = 0;
            var successCallback = function (response) {
                console.log(response);
                self.models = response.Models;
                self.chartLabels = [];
                self.chartData = [];
                if (self.models.length === 0) {
                    console.log('No search result found');
                }
                else {
                    //vm.searchRequest.keyword
                    //super.ensureKeysAreSaved(LocalStorageKeys.SaleListGridKeys, self.models[0]);
                    self.ensureKeysAreSaved(App.LocalStorageKeys.SaleListGridKeys, self.models[0]);
                    self.generateCsvModels();
                    for (var i = 0; i < self.models.length; i++) {
                        self.totalProductAmount += self.models[i].productAmount;
                        self.totalDiscount += self.models[i].discountAmount;
                        self.totalPaid += self.models[i].paidAmount;
                        self.total += self.models[i].payableTotalAmount;
                        self.totalCost += self.models[i].costAmount;
                        self.due += self.models[i].dueAmount;
                        self.totalProfit += self.models[i].profitAmount;
                        self.totalPaidByCash += self.models[i].paidByCashAmount;
                        self.totalPaidByOther += self.models[i].paidByOtherAmount;
                        self.chartLabels.push(self.models[i].orderNumber);
                        self.chartData.push(self.models[i].productAmount);
                    }
                }
                self.totalCount = response.Count;
                self.searchRequest.totalPage = Math.ceil(response.Count / 10);
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.searchService
                .search(self.searchRequest, self.queryUrl + "/Search")
                .then(successCallback, errorCallback);
        };
        SaleIndividualReportController.prototype.goto = function (page) {
            var self = this;
            self.localStorageService.save(App.LocalStorageKeys.SaleListPageNo, page);
            _super.prototype.goto.call(this, page);
        };
        SaleIndividualReportController.prototype.saveChangedState = function () {
            var self = this;
            self.localStorageService.save(App.LocalStorageKeys.OrderState, self.searchRequest["orderState"]);
            self.search();
        };
        SaleIndividualReportController.prototype.updateKeys = function () {
            var self = this;
            self.localStorageService.save(App.LocalStorageKeys.SaleListGridKeys, self.keys);
            self.generateCsvModels();
        };
        SaleIndividualReportController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", "LocalStorageService", 'Excel'
        ];
        return SaleIndividualReportController;
    }(App.BaseController));
    App.SaleIndividualReportController = SaleIndividualReportController;
    angular.module("app").controller("SaleIndividualReportController", SaleIndividualReportController);
    var DailySalesOverviewReportController = /** @class */ (function (_super) {
        __extends(DailySalesOverviewReportController, _super);
        function DailySalesOverviewReportController(location, state, stateParams, url, search, save, authService, localStorageService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.sale, url.saleQuery, excel) || this;
            _this.orderFroms = [];
            _this.productAmountTotal = 0;
            _this.costAmountTotal = 0;
            _this.payableAmountTotal = 0;
            _this.paidAmountTotal = 0;
            _this.dueAmountTotal = 0;
            _this.orderCountTotal = 0;
            _this.averageOrderAmountTotal = 0;
            _this.newCustomersCountTotal = 0;
            console.log('i m in DailySalesOverview');
            var self = _this;
            self.localStorageService = localStorageService;
            _this.searchRequest.startDate = _this.startDate.toJSON();
            _this.searchRequest.endDate = _this.endDate.toJSON();
            for (var enumMember in App.SaleFrom) {
                if (App.SaleFrom.hasOwnProperty(enumMember)) {
                    var isValueProperty = parseInt(enumMember, 10) >= 0;
                    if (isValueProperty) {
                        var i = App.SaleFrom[enumMember];
                        _this.orderFroms.push(i);
                    }
                }
            }
            _this.loadWarehouses().then(function (result) {
                if (self.warehouses.length === 1) {
                    self.searchRequest.warehouseId = self.warehouses[0].id;
                }
                else {
                    var whId = self.localStorageService.get(App.LocalStorageKeys.WarehouseId);
                    if (whId != null) {
                        self.searchRequest.warehouseId = whId;
                    }
                }
                return self.search();
            });
            return _this;
        }
        DailySalesOverviewReportController.prototype.loadData = function () {
            if (this.startDate != null) {
                this.searchRequest.startDate = this.startDate.toDateString();
            }
            if (this.endDate != null) {
                this.searchRequest.endDate = this.endDate.toDateString();
            }
            this.search();
        };
        DailySalesOverviewReportController.prototype.search = function () {
            var self = this;
            self.productAmountTotal = 0;
            self.costAmountTotal = 0;
            self.payableAmountTotal = 0;
            self.paidAmountTotal = 0;
            self.dueAmountTotal = 0;
            self.orderCountTotal = 0;
            self.averageOrderAmountTotal = 0;
            self.newCustomersCountTotal = 0;
            var successCallback = function (response) {
                console.log(response);
                self.models = response.data;
                self.chartLabels = [];
                self.chartData = [];
                if (self.models.length === 0) {
                    console.log('No search result found');
                }
                else {
                    //vm.searchRequest.keyword                   
                    self.generateCsvModels();
                    for (var i = 0; i < self.models.length; i++) {
                        var m = self.models[i];
                        self.productAmountTotal += m.productAmount;
                        self.costAmountTotal += m.costAmount;
                        self.payableAmountTotal += m.payableAmount;
                        self.paidAmountTotal += m.paidAmount;
                        self.dueAmountTotal += m.dueAmount;
                        self.orderCountTotal += m.orderCount;
                        self.newCustomersCountTotal += m.newCustomersCount;
                        var d = new Date(self.models[i].date);
                        self.chartLabels.push(d.toDateString());
                        self.chartData.push(self.models[i].productAmount);
                    }
                    self.averageOrderAmountTotal = self.payableAmountTotal / self.orderCountTotal;
                }
                self.totalCount = response.Count;
                self.searchRequest.totalPage = Math.ceil(response.Count / 10);
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.searchService
                .search(self.searchRequest, self.queryUrl + "/DailySalesOverview")
                .then(successCallback, errorCallback);
        };
        DailySalesOverviewReportController.prototype.saveChangeOrderFrom = function () {
            var self = this;
            self.localStorageService.save(App.LocalStorageKeys.SaleFrom, self.searchRequest["saleFrom"]);
            self.search();
        };
        DailySalesOverviewReportController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", "LocalStorageService", 'Excel'
        ];
        return DailySalesOverviewReportController;
    }(App.BaseController));
    App.DailySalesOverviewReportController = DailySalesOverviewReportController;
    angular.module("app").controller("DailySalesOverviewReportController", DailySalesOverviewReportController);
    var MonthlySalesOverviewReportController = /** @class */ (function (_super) {
        __extends(MonthlySalesOverviewReportController, _super);
        function MonthlySalesOverviewReportController(location, state, stateParams, url, search, save, authService, localStorageService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.sale, url.saleQuery, excel) || this;
            _this.orderFroms = [];
            _this.productAmountTotal = 0;
            _this.costAmountTotal = 0;
            _this.payableAmountTotal = 0;
            _this.paidAmountTotal = 0;
            _this.dueAmountTotal = 0;
            _this.orderCountTotal = 0;
            _this.averageOrderAmountTotal = 0;
            _this.newCustomersCountTotal = 0;
            console.log('i m in DailySalesOverview');
            var self = _this;
            self.localStorageService = localStorageService;
            _this.searchRequest.startDate = _this.startDate.toJSON();
            _this.searchRequest.endDate = _this.endDate.toJSON();
            for (var enumMember in App.SaleFrom) {
                if (App.SaleFrom.hasOwnProperty(enumMember)) {
                    var isValueProperty = parseInt(enumMember, 10) >= 0;
                    if (isValueProperty) {
                        var i = App.SaleFrom[enumMember];
                        _this.orderFroms.push(i);
                    }
                }
            }
            _this.loadWarehouses().then(function (result) {
                if (self.warehouses.length === 1) {
                    self.searchRequest.warehouseId = self.warehouses[0].id;
                }
                else {
                    var whId = self.localStorageService.get(App.LocalStorageKeys.WarehouseId);
                    if (whId != null) {
                        self.searchRequest.warehouseId = whId;
                    }
                }
                return self.search();
            });
            return _this;
        }
        MonthlySalesOverviewReportController.prototype.loadData = function () {
            if (this.startDate != null) {
                this.searchRequest.startDate = this.startDate.toDateString();
            }
            if (this.endDate != null) {
                this.searchRequest.endDate = this.endDate.toDateString();
            }
            this.search();
        };
        MonthlySalesOverviewReportController.prototype.search = function () {
            var self = this;
            self.productAmountTotal = 0;
            self.costAmountTotal = 0;
            self.payableAmountTotal = 0;
            self.paidAmountTotal = 0;
            self.dueAmountTotal = 0;
            self.orderCountTotal = 0;
            self.averageOrderAmountTotal = 0;
            self.newCustomersCountTotal = 0;
            var successCallback = function (response) {
                console.log(response);
                self.models = response.data;
                self.chartLabels = [];
                self.chartData = [];
                if (self.models.length === 0) {
                    console.log('No search result found');
                }
                else {
                    //vm.searchRequest.keyword                   
                    self.generateCsvModels();
                    for (var i = 0; i < self.models.length; i++) {
                        var m = self.models[i];
                        self.productAmountTotal += m.productAmount;
                        self.costAmountTotal += m.costAmount;
                        self.payableAmountTotal += m.payableAmount;
                        self.paidAmountTotal += m.paidAmount;
                        self.dueAmountTotal += m.dueAmount;
                        self.orderCountTotal += m.orderCount;
                        self.newCustomersCountTotal += m.newCustomersCount;
                        var d = new Date(self.models[i].date);
                        self.chartLabels.push(d.toDateString());
                        self.chartData.push(self.models[i].productAmount);
                    }
                    self.averageOrderAmountTotal = self.payableAmountTotal / self.orderCountTotal;
                }
                self.totalCount = response.Count;
                self.searchRequest.totalPage = Math.ceil(response.Count / 10);
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.searchService
                .search(self.searchRequest, self.queryUrl + "/MonthlySalesOverview")
                .then(successCallback, errorCallback);
        };
        MonthlySalesOverviewReportController.prototype.saveChangeOrderFrom = function () {
            var self = this;
            self.localStorageService.save(App.LocalStorageKeys.SaleFrom, self.searchRequest["saleFrom"]);
            self.search();
        };
        MonthlySalesOverviewReportController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", "LocalStorageService", 'Excel'
        ];
        return MonthlySalesOverviewReportController;
    }(App.BaseController));
    App.MonthlySalesOverviewReportController = MonthlySalesOverviewReportController;
    angular.module("app").controller("MonthlySalesOverviewReportController", MonthlySalesOverviewReportController);
    var YearlySalesOverviewReportController = /** @class */ (function (_super) {
        __extends(YearlySalesOverviewReportController, _super);
        function YearlySalesOverviewReportController(location, state, stateParams, url, search, save, authService, localStorageService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.sale, url.saleQuery, excel) || this;
            _this.orderFroms = [];
            _this.productAmountTotal = 0;
            _this.costAmountTotal = 0;
            _this.payableAmountTotal = 0;
            _this.paidAmountTotal = 0;
            _this.dueAmountTotal = 0;
            _this.orderCountTotal = 0;
            _this.averageOrderAmountTotal = 0;
            _this.newCustomersCountTotal = 0;
            console.log('i m in DailySalesOverview');
            var self = _this;
            self.localStorageService = localStorageService;
            _this.searchRequest.startDate = _this.startDate.toJSON();
            _this.searchRequest.endDate = _this.endDate.toJSON();
            for (var enumMember in App.SaleFrom) {
                if (App.SaleFrom.hasOwnProperty(enumMember)) {
                    var isValueProperty = parseInt(enumMember, 10) >= 0;
                    if (isValueProperty) {
                        var i = App.SaleFrom[enumMember];
                        _this.orderFroms.push(i);
                    }
                }
            }
            _this.loadWarehouses().then(function (result) {
                if (self.warehouses.length === 1) {
                    self.searchRequest.warehouseId = self.warehouses[0].id;
                }
                else {
                    var whId = self.localStorageService.get(App.LocalStorageKeys.WarehouseId);
                    if (whId != null) {
                        self.searchRequest.warehouseId = whId;
                    }
                }
                return self.search();
            });
            return _this;
        }
        YearlySalesOverviewReportController.prototype.loadData = function () {
            if (this.startDate != null) {
                this.searchRequest.startDate = this.startDate.toDateString();
            }
            if (this.endDate != null) {
                this.searchRequest.endDate = this.endDate.toDateString();
            }
            this.search();
        };
        YearlySalesOverviewReportController.prototype.search = function () {
            var self = this;
            self.productAmountTotal = 0;
            self.costAmountTotal = 0;
            self.payableAmountTotal = 0;
            self.paidAmountTotal = 0;
            self.dueAmountTotal = 0;
            self.orderCountTotal = 0;
            self.averageOrderAmountTotal = 0;
            self.newCustomersCountTotal = 0;
            var successCallback = function (response) {
                console.log(response);
                self.models = response.data;
                self.chartLabels = [];
                self.chartData = [];
                if (self.models.length === 0) {
                    console.log('No search result found');
                }
                else {
                    //vm.searchRequest.keyword                   
                    self.generateCsvModels();
                    for (var i = 0; i < self.models.length; i++) {
                        var m = self.models[i];
                        self.productAmountTotal += m.productAmount;
                        self.costAmountTotal += m.costAmount;
                        self.payableAmountTotal += m.payableAmount;
                        self.paidAmountTotal += m.paidAmount;
                        self.dueAmountTotal += m.dueAmount;
                        self.orderCountTotal += m.orderCount;
                        self.newCustomersCountTotal += m.newCustomersCount;
                        var d = new Date(self.models[i].date);
                        self.chartLabels.push(d.toDateString());
                        self.chartData.push(self.models[i].productAmount);
                    }
                    self.averageOrderAmountTotal = self.payableAmountTotal / self.orderCountTotal;
                }
                self.totalCount = response.Count;
                self.searchRequest.totalPage = Math.ceil(response.Count / 10);
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.searchService
                .search(self.searchRequest, self.queryUrl + "/YearlySalesOverview")
                .then(successCallback, errorCallback);
        };
        YearlySalesOverviewReportController.prototype.saveChangeOrderFrom = function () {
            var self = this;
            self.localStorageService.save(App.LocalStorageKeys.SaleFrom, self.searchRequest["saleFrom"]);
            self.search();
        };
        YearlySalesOverviewReportController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", "LocalStorageService", 'Excel'
        ];
        return YearlySalesOverviewReportController;
    }(App.BaseController));
    App.YearlySalesOverviewReportController = YearlySalesOverviewReportController;
    angular.module("app").controller("YearlySalesOverviewReportController", YearlySalesOverviewReportController);
    var CustomerSearchBySaleReportController = /** @class */ (function (_super) {
        __extends(CustomerSearchBySaleReportController, _super);
        function CustomerSearchBySaleReportController(location, state, stateParams, url, search, save, authService, localStorageService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.sale, url.saleQuery, excel) || this;
            _this.orderCountTotal = 0;
            _this.payableAmountTotal = 0;
            _this.paidAmountTotal = 0;
            _this.dueAmountTotal = 0;
            _this.averageAmountTotal = 0;
            console.log('i m in CustomerSearchBySaleReportController');
            var self = _this;
            self.localStorageService = localStorageService;
            _this.searchRequest.startDate = _this.startDate.toJSON();
            _this.searchRequest.endDate = _this.endDate.toJSON();
            _this.loadWarehouses().then(function (result) {
                if (self.warehouses.length === 1) {
                    self.searchRequest.warehouseId = self.warehouses[0].id;
                }
                else {
                    var whId = self.localStorageService.get(App.LocalStorageKeys.WarehouseId);
                    if (whId != null) {
                        self.searchRequest.warehouseId = whId;
                    }
                }
                // implement search                 
                return self.search();
            });
            return _this;
        }
        CustomerSearchBySaleReportController.prototype.search = function () {
            var self = this;
            self.orderCountTotal = 0;
            self.payableAmountTotal = 0;
            self.paidAmountTotal = 0;
            self.dueAmountTotal = 0;
            self.averageAmountTotal = 0;
            var successCallback = function (response) {
                console.log('i m in CustomerSearchBySale response: ');
                console.log(response);
                self.models = response.data;
                self.chartLabels = [];
                self.chartData = [];
                if (self.models.length === 0) {
                    console.log('No search result found');
                }
                else {
                    //vm.searchRequest.keyword                   
                    self.generateCsvModels();
                    for (var i = 0; i < self.models.length; i++) {
                        var m = self.models[i];
                        self.orderCountTotal += m.orderCount;
                        self.payableAmountTotal += m.payableAmount;
                        self.paidAmountTotal += m.paidAmount;
                        self.dueAmountTotal += m.dueAmount;
                        self.chartLabels.push(self.models[i].customer.name);
                        self.chartData.push(self.models[i].paidAmount);
                    }
                    self.averageAmountTotal = self.payableAmountTotal / self.orderCountTotal;
                }
                self.totalCount = response.Count;
                self.searchRequest.totalPage = Math.ceil(response.Count / 10);
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.searchService
                .search(self.searchRequest, self.queryUrl + "/CustomerSearchBySale")
                .then(successCallback, errorCallback);
        };
        // inject
        CustomerSearchBySaleReportController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", "LocalStorageService", 'Excel'
        ];
        return CustomerSearchBySaleReportController;
    }(App.BaseController));
    App.CustomerSearchBySaleReportController = CustomerSearchBySaleReportController;
    angular.module('app').controller('CustomerSearchBySaleReportController', CustomerSearchBySaleReportController);
    var SalesByProductReportController = /** @class */ (function (_super) {
        __extends(SalesByProductReportController, _super);
        function SalesByProductReportController(location, state, stateParams, url, search, save, authService, localStorageService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.sale, url.saleQuery, excel) || this;
            _this.quantityTotal = 0;
            _this.costAmountTotal = 0;
            _this.priceAmountTotal = 0;
            _this.discountAmountTotal = 0;
            _this.amountTotal = 0;
            _this.paidAmountTotal = 0;
            _this.dueAmountTotal = 0;
            _this.saleCountTotal = 0;
            console.log("i am in SalesByProductReportController");
            var self = _this;
            self.localStorageService = localStorageService;
            _this.searchRequest.startDate = _this.startDate.toJSON();
            _this.searchRequest.endDate = _this.endDate.toJSON();
            _this.loadWarehouses().then(function (result) {
                if (self.warehouses.length === 1) {
                    self.searchRequest.warehouseId = self.warehouses[0].id;
                }
                else {
                    var whId = self.localStorageService.get(App.LocalStorageKeys.WarehouseId);
                    if (whId != null) {
                        self.searchRequest.warehouseId = whId;
                    }
                }
                return self.search();
            });
            return _this;
        }
        SalesByProductReportController.prototype.search = function () {
            var self = this;
            self.quantityTotal = 0;
            self.priceAmountTotal = 0;
            self.discountAmountTotal = 0;
            self.amountTotal = 0;
            self.paidAmountTotal = 0;
            self.dueAmountTotal = 0;
            self.saleCountTotal = 0;
            var successCallback = function (response) {
                console.log('i m in SalesByProduct response: ');
                console.log(response);
                self.models = response.data;
                self.chartLabels = [];
                self.chartData = [];
                if (self.models.length === 0) {
                    console.log('No search result found');
                }
                else {
                    //vm.searchRequest.keyword                   
                    self.generateCsvModels();
                    for (var i = 0; i < self.models.length; i++) {
                        var m = self.models[i];
                        self.quantityTotal += m.quantity;
                        self.costAmountTotal += m.costTotal;
                        self.priceAmountTotal += m.priceTotal;
                        self.discountAmountTotal += m.discountTotal;
                        self.amountTotal += m.total;
                        self.paidAmountTotal += m.paid;
                        self.dueAmountTotal += m.due;
                        self.saleCountTotal += m.saleCount;
                        self.chartLabels.push(self.models[i].product.name);
                        self.chartData.push(self.models[i].total);
                    }
                }
                self.totalCount = response.Count;
                self.searchRequest.totalPage = Math.ceil(response.Count / 10);
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.searchService
                .search(self.searchRequest, self.queryUrl + "/SalesByProductDetail")
                .then(successCallback, errorCallback);
        };
        SalesByProductReportController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", "LocalStorageService", 'Excel'
        ];
        return SalesByProductReportController;
    }(App.BaseController));
    App.SalesByProductReportController = SalesByProductReportController;
    angular.module("app").controller("SalesByProductReportController", SalesByProductReportController);
    var SalesByProductDetailReportController = /** @class */ (function (_super) {
        __extends(SalesByProductDetailReportController, _super);
        function SalesByProductDetailReportController(location, state, stateParams, url, search, save, authService, localStorageService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.sale, url.saleQuery, excel) || this;
            _this.quantityTotal = 0;
            _this.costAmountTotal = 0;
            _this.priceAmountTotal = 0;
            _this.discountAmountTotal = 0;
            _this.amountTotal = 0;
            _this.paidAmountTotal = 0;
            _this.dueAmountTotal = 0;
            _this.percentTotal = 0;
            _this.saleCountTotal = 0;
            console.log("i am in SalesByProductDetailReportController");
            var self = _this;
            self.localStorageService = localStorageService;
            _this.searchRequest.startDate = _this.startDate.toJSON();
            _this.searchRequest.endDate = _this.endDate.toJSON();
            _this.loadWarehouses().then(function (result) {
                if (self.warehouses.length === 1) {
                    self.searchRequest.warehouseId = self.warehouses[0].id;
                }
                else {
                    var whId = self.localStorageService.get(App.LocalStorageKeys.WarehouseId);
                    if (whId != null) {
                        self.searchRequest.warehouseId = whId;
                    }
                }
                return self.search();
            });
            return _this;
        }
        SalesByProductDetailReportController.prototype.search = function () {
            var self = this;
            self.quantityTotal = 0;
            self.costAmountTotal = 0;
            self.priceAmountTotal = 0;
            self.discountAmountTotal = 0;
            self.amountTotal = 0;
            self.paidAmountTotal = 0;
            self.dueAmountTotal = 0;
            self.percentTotal = 0;
            self.saleCountTotal = 0;
            var successCallback = function (response) {
                console.log('i am in  SalesByProductDetail response:');
                console.log(response);
                self.models = response.data;
                self.chartLabels = [];
                self.chartData = [];
                if (self.models.length === 0) {
                    console.log('No search result found');
                }
                else {
                    self.generateCsvModels();
                    for (var i = 0; i < self.models.length; i++) {
                        var m = self.models[i];
                        self.quantityTotal += m.quantity;
                        self.costAmountTotal += m.costTotal;
                        self.priceAmountTotal += m.priceTotal;
                        self.discountAmountTotal += m.discountTotal;
                        self.amountTotal += m.total;
                        self.paidAmountTotal += m.paid;
                        self.dueAmountTotal += m.due;
                        self.percentTotal += m.totalPercent;
                        self.saleCountTotal += m.saleCount;
                        self.chartLabels.push(self.models[i].product.name);
                        self.chartData.push(self.models[i].total);
                    }
                }
                self.totalCount = response.Count;
                self.searchRequest.totalPage = Math.ceil(response.Count / 10);
            };
            var erroCallback = function (error) {
                console.log(error);
                return error;
            };
            self.searchService.search(self.searchRequest, self.queryUrl + "/SalesByProductDetail")
                .then(successCallback, erroCallback);
        };
        SalesByProductDetailReportController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", "LocalStorageService", "Excel"
        ];
        return SalesByProductDetailReportController;
    }(App.BaseController));
    App.SalesByProductDetailReportController = SalesByProductDetailReportController;
    angular.module("app").controller("SalesByProductDetailReportController", SalesByProductDetailReportController);
    var SalesByProductCategoryReportController = /** @class */ (function (_super) {
        __extends(SalesByProductCategoryReportController, _super);
        function SalesByProductCategoryReportController(location, state, stateParams, url, search, save, authService, localStorageService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.sale, url.saleQuery, excel) || this;
            _this.quantityTotal = 0;
            _this.costAmountTotal = 0;
            _this.priceAmountTotal = 0;
            _this.discountAmountTotal = 0;
            _this.amountTotal = 0;
            _this.paidAmountTotal = 0;
            _this.dueAmountTotal = 0;
            _this.percentTotal = 0;
            _this.saleCountTotal = 0;
            console.log("i am in SalesByProductCategoryReportController");
            var self = _this;
            self.localStorageService = localStorageService;
            self.searchRequest.startDate = self.startDate.toJSON();
            self.searchRequest.endDate = self.endDate.toJSON();
            _this.loadWarehouses().then(function (result) {
                if (self.warehouses.length === 1) {
                    self.searchRequest.warehouseId = self.warehouses[0].id;
                }
                else {
                    var whId = self.localStorageService.get(App.LocalStorageKeys.WarehouseId);
                    if (whId != null) {
                        self.searchRequest.warehouseId = whId;
                    }
                }
                return self.search();
            });
            return _this;
        }
        SalesByProductCategoryReportController.prototype.search = function () {
            var self = this;
            self.quantityTotal = 0;
            self.costAmountTotal = 0;
            self.priceAmountTotal = 0;
            self.discountAmountTotal = 0;
            self.amountTotal = 0;
            self.paidAmountTotal = 0;
            self.dueAmountTotal = 0;
            self.percentTotal = 0;
            self.saleCountTotal = 0;
            var successCallback = function (response) {
                console.log('i am in SalesByProductCategory response: ');
                console.log(response);
                self.models = response.data;
                self.chartLabels = [];
                self.chartData = [];
                if (self.models.length === 0) {
                    console.log('No search result found');
                }
                else {
                    self.generateCsvModels();
                    for (var i = 0; i < self.models.length; i++) {
                        var m = self.models[i];
                        self.quantityTotal += m.quantity;
                        self.costAmountTotal += m.costTotal;
                        self.priceAmountTotal += m.priceTotal;
                        self.discountAmountTotal += m.discountTotal;
                        self.amountTotal += m.total;
                        self.paidAmountTotal += m.paid;
                        self.dueAmountTotal += m.due;
                        self.percentTotal += m.totalPercent;
                        self.saleCountTotal += m.saleCount;
                        self.chartLabels.push(self.models[i].product.name);
                        self.chartData.push(self.models[i].total);
                    }
                }
                self.totalCount = response.Count;
                self.searchRequest.totalPage = Math.ceil(response.Count / 10);
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.searchService.search(self.searchRequest, self.queryUrl + "/SalesByProductCategory")
                .then(successCallback, errorCallback);
        };
        SalesByProductCategoryReportController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", "LocalStorageService", "Excel"
        ];
        return SalesByProductCategoryReportController;
    }(App.BaseController));
    App.SalesByProductCategoryReportController = SalesByProductCategoryReportController;
    angular.module("app").controller("SalesByProductCategoryReportController", SalesByProductCategoryReportController);
    var SalesByProductGroupReportController = /** @class */ (function (_super) {
        __extends(SalesByProductGroupReportController, _super);
        function SalesByProductGroupReportController(location, sate, stateParams, url, search, save, authService, localStorageService, excel) {
            var _this = _super.call(this, location, sate, stateParams, url, search, save, authService, url.sale, url.saleQuery, excel) || this;
            _this.quantityTotal = 0;
            _this.costAmountTotal = 0;
            _this.priceAmountTotal = 0;
            _this.discountAmountTotal = 0;
            _this.amountTotal = 0;
            _this.paidAmountTotal = 0;
            _this.dueAmountTotal = 0;
            _this.saleCountTotal = 0;
            _this.percentTotal = 0;
            console.log("i am in SalesByProductGroupReportController");
            var self = _this;
            self.localStorageService = localStorageService;
            _this.searchRequest.startDate = _this.startDate.toJSON();
            _this.searchRequest.endDate = _this.endDate.toJSON();
            _this.loadWarehouses().then(function (result) {
                if (self.warehouses.length === 1) {
                    self.searchRequest.warehouseId = self.warehouses[0].id;
                }
                else {
                    var whId = self.localStorageService.get(App.LocalStorageKeys.WarehouseId);
                    if (whId != null) {
                        self.searchRequest.warehouseId = whId;
                    }
                }
                return self.search();
            });
            return _this;
        }
        SalesByProductGroupReportController.prototype.search = function () {
            var self = this;
            self.quantityTotal = 0;
            self.costAmountTotal = 0;
            self.priceAmountTotal = 0;
            self.discountAmountTotal = 0;
            self.amountTotal = 0;
            self.paidAmountTotal = 0;
            self.dueAmountTotal = 0;
            self.percentTotal = 0;
            self.saleCountTotal = 0;
            var successCallback = function (response) {
                console.log('i am in  SalesByProductGroup response: ');
                console.log(response);
                self.models = response.data;
                self.chartLabels = [];
                self.chartData = [];
                self.quantityTotal = 0;
                self.costAmountTotal = 0;
                self.priceAmountTotal = 0;
                self.discountAmountTotal = 0;
                self.amountTotal = 0;
                self.paidAmountTotal = 0;
                self.dueAmountTotal = 0;
                self.percentTotal = 0;
                self.saleCountTotal = 0;
                if (self.models.length === 0) {
                    console.log('No search result found');
                }
                else {
                    self.generateCsvModels();
                    for (var i = 0; i < self.models.length; i++) {
                        var m = self.models[i];
                        self.quantityTotal += m.quantity;
                        self.costAmountTotal += m.costTotal;
                        self.priceAmountTotal += m.priceTotal;
                        self.discountAmountTotal += m.discountTotal;
                        self.amountTotal += m.total;
                        self.paidAmountTotal += m.paid;
                        self.dueAmountTotal += m.due;
                        self.percentTotal += m.totalPercent;
                        self.saleCountTotal += m.saleCount;
                        self.chartLabels.push(self.models[i].product.name);
                        self.chartData.push(self.models[i].total);
                    }
                }
                self.totalCount = response.Count;
                self.searchRequest.totalPage = Math.ceil(response.Count / 10);
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.searchService.search(self.searchRequest, self.queryUrl + "/SalesByProductGroup")
                .then(successCallback, errorCallback);
        };
        SalesByProductGroupReportController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", "LocalStorageService", "Excel"
        ];
        return SalesByProductGroupReportController;
    }(App.BaseController));
    App.SalesByProductGroupReportController = SalesByProductGroupReportController;
    angular.module("app").controller("SalesByProductGroupReportController", SalesByProductGroupReportController);
    var ChannelWiseSalesReportController = /** @class */ (function (_super) {
        __extends(ChannelWiseSalesReportController, _super);
        function ChannelWiseSalesReportController(location, state, stateParams, url, search, save, authService, localStorageService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.sale, url.saleQuery, excel) || this;
            _this.productAmountTotal = 0;
            _this.costAmountTotal = 0;
            _this.payableAmountTotal = 0;
            _this.paidAmountTotal = 0;
            _this.dueAmountTotal = 0;
            _this.orderCountTotal = 0;
            _this.averageOrderAmountTotal = 0;
            _this.newCustomersCountTotal = 0;
            var self = _this;
            self.localStorageService = localStorageService;
            _this.searchRequest.startDate = _this.startDate.toJSON();
            _this.searchRequest.endDate = _this.endDate.toJSON();
            _this.loadWarehouses().then(function (result) {
                if (self.warehouses.length === 1) {
                    self.searchRequest.warehouseId = self.warehouses[0].id;
                }
                else {
                    var whId = self.localStorageService.get(App.LocalStorageKeys.WarehouseId);
                    if (whId != null) {
                        self.searchRequest.warehouseId = whId;
                    }
                }
                return self.search();
            });
            return _this;
        }
        ChannelWiseSalesReportController.prototype.loadData = function () {
            if (this.startDate != null) {
                this.searchRequest.startDate = this.startDate.toDateString();
            }
            if (this.endDate != null) {
                this.searchRequest.endDate = this.endDate.toDateString();
            }
            this.search();
        };
        ChannelWiseSalesReportController.prototype.search = function () {
            var self = this;
            self.productAmountTotal = 0;
            self.costAmountTotal = 0;
            self.payableAmountTotal = 0;
            self.paidAmountTotal = 0;
            self.dueAmountTotal = 0;
            self.orderCountTotal = 0;
            self.averageOrderAmountTotal = 0;
            self.newCustomersCountTotal = 0;
            var successCallback = function (response) {
                console.log(response);
                self.models = response.data;
                self.chartLabels = [];
                self.chartData = [];
                if (self.models.length === 0) {
                    console.log('No search result found');
                }
                else {
                    //vm.searchRequest.keyword                   
                    self.generateCsvModels();
                    for (var i = 0; i < self.models.length; i++) {
                        var m = self.models[i];
                        self.productAmountTotal += m.productAmount;
                        self.costAmountTotal += m.costAmount;
                        self.payableAmountTotal += m.payableAmount;
                        self.paidAmountTotal += m.paidAmount;
                        self.dueAmountTotal += m.dueAmount;
                        self.orderCountTotal += m.orderCount;
                        self.newCustomersCountTotal += m.newCustomersCount;
                        var d = new Date(self.models[i].date);
                        self.chartLabels.push(d.toDateString());
                        self.chartData.push(self.models[i].productAmount);
                    }
                    self.averageOrderAmountTotal = self.payableAmountTotal / self.orderCountTotal;
                }
                self.totalCount = response.Count;
                self.searchRequest.totalPage = Math.ceil(response.Count / 10);
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.searchService
                .search(self.searchRequest, self.queryUrl + "/DailySalesOverview")
                .then(successCallback, errorCallback);
        };
        ChannelWiseSalesReportController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", "LocalStorageService", 'Excel'
        ];
        return ChannelWiseSalesReportController;
    }(App.BaseController));
    App.ChannelWiseSalesReportController = ChannelWiseSalesReportController;
    angular.module("app").controller("ChannelWiseSalesReportController", ChannelWiseSalesReportController);
})(App || (App = {}));

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var App;
(function (App) {
    var SalesReportController = /** @class */ (function (_super) {
        __extends(SalesReportController, _super);
        function SalesReportController(scope, url, search) {
            var _this = _super.call(this, scope, url, search, "SalesReport-") || this;
            var self = _this;
            self.loadData();
            return _this;
        }
        SalesReportController.prototype.$onInit = function () { };
        SalesReportController.prototype.loadData = function () {
            var _this = this;
            var successCallback = function (response) {
                console.log(response.data);
                _this.gridOptions["data"] = response.data;
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            var request = new App.SearchRequest("", "Date", "False");
            request["ReportType"] = "Daily";
            request.shopId = "1";
            request.page = -1;
            request.startDate = this.startDate.toJSON();
            request.endDate = this.endDate.toJSON();
            request["SaleReportType"] = "SaleByAmount";
            this.searchService.search(request, this.urlService.saleQueryReport).then(successCallback, errorCallback);
        };
        SalesReportController.$inject = ["$scope", "UrlService", "SearchService"];
        return SalesReportController;
    }(App.BaseReportController));
    App.SalesReportController = SalesReportController;
    angular.module('app').controller("SalesReportController", SalesReportController);
    var SaleByChannelReportController = /** @class */ (function (_super) {
        __extends(SaleByChannelReportController, _super);
        function SaleByChannelReportController(scope, url, search) {
            var _this = _super.call(this, scope, url, search, 'SaleByChannelReport-report-') || this;
            var self = _this;
            self.title = "SaleByChannelReport";
            self.loadData();
            return _this;
        }
        SaleByChannelReportController.prototype.$onInit = function () { };
        SaleByChannelReportController.prototype.loadData = function () {
            var _this = this;
            var successCallback = function (response) {
                console.log(response.data);
                _this.gridOptions["data"] = response.data;
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            var request = new App.SearchRequest("", "Date", "False");
            request["ReportType"] = "Daily";
            request.shopId = "1";
            request.page = -1;
            request.startDate = this.startDate.toJSON();
            request["SaleReportType"] = "SaleByChannel";
            this.searchService.search(request, this.urlService.saleQueryReport).then(successCallback, errorCallback);
        };
        SaleByChannelReportController.prototype.loadDropdown = function () {
            //todo later
        };
        SaleByChannelReportController.$inject = ["$scope", "UrlService", "SearchService"];
        return SaleByChannelReportController;
    }(App.BaseReportController));
    App.SaleByChannelReportController = SaleByChannelReportController;
    angular.module('app').controller("SaleByChannelReportController", SaleByChannelReportController);
    var SaleByOrderFromController = /** @class */ (function (_super) {
        __extends(SaleByOrderFromController, _super);
        function SaleByOrderFromController(scope, url, search) {
            var _this = _super.call(this, scope, url, search, 'SaleByOrderFrom-report-') || this;
            var self = _this;
            self.title = "SaleByOrderFrom";
            self.loadData();
            return _this;
        }
        SaleByOrderFromController.prototype.$onInit = function () { };
        SaleByOrderFromController.prototype.loadData = function () {
            var _this = this;
            var successCallback = function (response) {
                console.log(response.data);
                _this.gridOptions["data"] = response.data;
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            var request = new App.SearchRequest("", "Date", "False");
            request["ReportType"] = "Daily";
            request.shopId = "1";
            request.page = -1;
            request.startDate = this.startDate.toJSON();
            request["SaleReportType"] = "SaleByOrderFrom";
            this.searchService.search(request, this.urlService.saleQueryReport).then(successCallback, errorCallback);
        };
        SaleByOrderFromController.$inject = ["$scope", "UrlService", "SearchService"];
        return SaleByOrderFromController;
    }(App.BaseReportController));
    App.SaleByOrderFromController = SaleByOrderFromController;
    angular.module('app').controller("SaleByOrderFromController", SaleByOrderFromController);
    var SaleDetailsHistoryReportController = /** @class */ (function (_super) {
        __extends(SaleDetailsHistoryReportController, _super);
        function SaleDetailsHistoryReportController(location, state, stateParams, url, search, save, authService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.saleDetailQuery, url.saleQueryReport, excel) || this;
            _this.selectedItem = "";
            _this.headers = ["date", "amountProduct", "amountTotal", "amountDiscount", "amountPayable", "amountPaid", "amountDue"];
            _this.totalProductAmount = 0;
            _this.totalAmount = 0;
            _this.totalAmountDiscount = 0;
            _this.totalAmountPayable = 0;
            _this.totalAmountPaid = 0;
            _this.totalAmountDue = 0;
            _this.totalCost = 0;
            _this.totalProfit = 0;
            var self = _this;
            self.configureHeaderAndFooter();
            self.loadDropdown();
            self.loadData();
            return _this;
        }
        SaleDetailsHistoryReportController.prototype.$onInit = function () { };
        SaleDetailsHistoryReportController.prototype.configureHeaderAndFooter = function () {
            var self = this;
            self.showManageColumnsButton = false;
        };
        SaleDetailsHistoryReportController.prototype.loadData = function () {
            var self = this;
            self.totalProductAmount = 0;
            self.totalAmount = 0;
            self.totalAmountDiscount = 0;
            self.totalAmountPayable = 0;
            self.totalAmountPaid = 0;
            self.totalAmountDue = 0;
            self.totalCost = 0;
            self.totalProfit = 0;
            var successCallback = function (response) {
                console.log(response.data);
                self.models = response.data;
                self.csvModels = [];
                self.chartLabels = [];
                self.chartData = [];
                for (var i = 0; i < self.models.length; i++) {
                    self.csvModels.push(self.generateCsvModel(self.models[i]));
                }
                for (var i = 0; i < response.data.length; i++) {
                    self.totalProductAmount += response.data[i].amountProduct;
                    self.totalAmount += response.data[i].amountTotal;
                    self.totalAmountDiscount += response.data[i].amountDiscount;
                    self.totalAmountPayable += response.data[i].amountPayable;
                    self.totalAmountPaid += response.data[i].amountPaid;
                    self.totalAmountDue += response.data[i].amountDue;
                    self.totalCost += response.data[i].amountCost;
                    self.totalProfit += response.data[i].amountProfit;
                    self.chartLabels.push(self.models[i].modified);
                    self.chartData.push(self.models[i].amountProduct);
                }
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            var request = new App.SearchRequest();
            request["startDate"] = self.startDate.toLocaleString();
            request["endDate"] = self.endDate.toLocaleString();
            request.shopId = "1";
            request.page = -1;
            request['SaleType'] = self.selectedItem;
            this.searchService.search(request, self.url.saleQueryReport).then(successCallback, errorCallback);
        };
        SaleDetailsHistoryReportController.prototype.loadDropdown = function () {
            var self = this;
            self.saleTypes = ["All", "DealerSale", "CustomerSale"];
            self.selectedItem = "All";
        };
        //loadDropdown(): void {
        //    var self = this;
        //    var successCallback = (response: SearchResponse): void => {
        //        self.saleTypes = <any>response.Models;
        //        self.selectedItem = self.saleTypes[0];
        //        self.loadData();
        //    };
        //    var errorCallback = (error: any): void => {
        //        console.log(error);
        //    };
        //    var request = new SearchRequest();
        //    self.searchService
        //        .search(request, self.url.saleQuery + "/Dropdown")
        //        .then(<any>successCallback, errorCallback);
        //}
        SaleDetailsHistoryReportController.prototype.dropdownChanged = function () {
            var self = this;
            self.loadData();
        };
        SaleDetailsHistoryReportController.prototype.selectedTypeAhead = function (a, b, c, d) {
            App.Display.log(this.selectedItem);
        };
        SaleDetailsHistoryReportController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", 'Excel'
        ];
        return SaleDetailsHistoryReportController;
    }(App.BaseController));
    App.SaleDetailsHistoryReportController = SaleDetailsHistoryReportController;
    angular.module("app").controller("SaleDetailsHistoryReportController", SaleDetailsHistoryReportController);
})(App || (App = {}));

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var App;
(function (App) {
    var TransactionByAmountReportController = /** @class */ (function (_super) {
        __extends(TransactionByAmountReportController, _super);
        function TransactionByAmountReportController(scope, url, search) {
            var _this = _super.call(this, scope, url, search, 'Transaction-By-Amount-Report-') || this;
            var self = _this;
            self.title = "Transaction By Amount";
            self.loadData();
            return _this;
        }
        TransactionByAmountReportController.prototype.$onInit = function () { };
        TransactionByAmountReportController.prototype.loadData = function () {
            var _this = this;
            var successCallback = function (response) {
                console.log(response.data);
                _this.gridOptions["data"] = response.data;
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            var request = new App.SearchRequest("", "Date", "True");
            request["ReportType"] = "Daily";
            request.shopId = "1";
            request.page = -1;
            request.startDate = this.startDate.toJSON();
            request["TransactionReportType"] = "TransactionByAmount";
            this.searchService.search(request, this.urlService.transactionQueryReport).then(successCallback, errorCallback);
        };
        TransactionByAmountReportController.$inject = ["$scope", "UrlService", "SearchService"];
        return TransactionByAmountReportController;
    }(App.BaseReportController));
    App.TransactionByAmountReportController = TransactionByAmountReportController;
    angular.module('app').controller("TransactionByAmountReportController", TransactionByAmountReportController);
    var TransactionByAccountHeadReportController = /** @class */ (function (_super) {
        __extends(TransactionByAccountHeadReportController, _super);
        function TransactionByAccountHeadReportController(scope, url, search) {
            var _this = _super.call(this, scope, url, search, 'Transaction-By-Account-Report-') || this;
            var self = _this;
            self.hideDropdown = false;
            self.title = "Transaction By Account Head";
            self.loadDropdown();
            return _this;
        }
        TransactionByAccountHeadReportController.prototype.$onInit = function () { };
        TransactionByAccountHeadReportController.prototype.loadData = function () {
            var _this = this;
            var successCallback = function (response) {
                console.log(response.data);
                _this.gridOptions["data"] = response.data;
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            var request = new App.SearchRequest("", "Date", "False");
            request["ReportType"] = "Daily";
            request.shopId = "1";
            request.page = -1;
            request.startDate = this.startDate.toJSON();
            request.parentId = this.selectedItem.id;
            request["TransactionReportType"] = "TransactionByAccountHead";
            this.searchService.search(request, this.urlService.transactionQueryReport).then(successCallback, errorCallback);
        };
        TransactionByAccountHeadReportController.prototype.loadDropdown = function () {
            var self = this;
            var successCallback = function (response) {
                console.log('items ', response);
                self.items = response.Models;
                var all = { id: '00000000-0000-0000-0000-000000000000', text: 'All' };
                self.items.splice(0, 0, all);
                self.selectedItem = self.items[0];
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            var request = new App.SearchRequest("", "Name", "True", "");
            self.searchService
                .search(request, self.urlService.accountHeadQuery + "/Dropdown")
                .then(successCallback, errorCallback);
        };
        TransactionByAccountHeadReportController.prototype.dropdownChanged = function () {
            this.loadData();
        };
        TransactionByAccountHeadReportController.$inject = ["$scope", "UrlService", "SearchService"];
        return TransactionByAccountHeadReportController;
    }(App.BaseReportController));
    App.TransactionByAccountHeadReportController = TransactionByAccountHeadReportController;
    angular.module('app').controller("TransactionByAccountHeadReportController", TransactionByAccountHeadReportController);
    var TransactionDetailsHistoryReportController = /** @class */ (function (_super) {
        __extends(TransactionDetailsHistoryReportController, _super);
        function TransactionDetailsHistoryReportController(location, state, stateParams, url, search, save, authService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.transactionQuery, url.transactionQueryReport, excel) || this;
            _this.selectedItem = "";
            _this.totaAmountStating = 0;
            _this.totalAmountIn = 0;
            _this.totalAmountOut = 0;
            _this.totalCountTrx = 0;
            _this.totaAmountEndIn = 0;
            _this.headers = ["date", "accountHeadName", "amountTotalStarting", "amountTotalIn", "amountTotalOut", "amountTotalEnding", "countTotalTrx"];
            var self = _this;
            self.loadDropdown();
            return _this;
        }
        TransactionDetailsHistoryReportController.prototype.$onInit = function () { };
        TransactionDetailsHistoryReportController.prototype.loadData = function () {
            var self = this;
            self.totalAmountIn = 0;
            self.totalAmountOut = 0;
            self.totalCountTrx = 0;
            var successCallback = function (response) {
                console.log(response.data);
                self.models = response.data;
                self.chartLabels = [];
                self.chartData = [];
                self.csvModels = [];
                for (var i = 0; i < self.models.length; i++) {
                    self.csvModels.push(self.generateCsvModel(self.models[i]));
                }
                for (var i_1 = 0; i_1 < response.data.length; i_1++) {
                    self.totaAmountStating += response.data[i_1].amountTotalStarting;
                    self.totalAmountIn += response.data[i_1].amountTotalIn;
                    self.totalAmountOut += response.data[i_1].amountTotalOut;
                    self.totaAmountEndIn += response.data[i_1].amountTotalEnding;
                    self.totalCountTrx += response.data[i_1].countTotalTrx;
                    self.chartLabels.push(self.models[i_1].modified);
                    self.chartData.push(self.models[i_1].amount);
                }
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            var request = new App.SearchRequest();
            request["startDate"] = self.startDate.toLocaleString();
            request["endDate"] = self.endDate.toLocaleString();
            request.shopId = "1";
            request.page = -1;
            request["AccountReportType"] = "TransactionHistory";
            request['accountHeadId'] = self.selectedItem.id;
            this.searchService.search(request, self.url.accountHeadQueryReport).then(successCallback, errorCallback);
        };
        TransactionDetailsHistoryReportController.prototype.loadDropdown = function () {
            var self = this;
            var successCallback = function (response) {
                self.accountHeads = response.Models;
                self.selectedItem = self.accountHeads[0];
                self.loadData();
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            var request = new App.SearchRequest();
            self.searchService
                .search(request, self.url.accountHeadQuery + "/Dropdown")
                .then(successCallback, errorCallback);
        };
        TransactionDetailsHistoryReportController.prototype.dropdownChanged = function () {
            var self = this;
            self.loadData();
        };
        TransactionDetailsHistoryReportController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", 'Excel'
        ];
        return TransactionDetailsHistoryReportController;
    }(App.BaseController));
    App.TransactionDetailsHistoryReportController = TransactionDetailsHistoryReportController;
    angular.module('app').controller("TransactionDetailsHistoryReportController", TransactionDetailsHistoryReportController);
    var TransactionDetailsReportController = /** @class */ (function (_super) {
        __extends(TransactionDetailsReportController, _super);
        function TransactionDetailsReportController(location, state, stateParams, url, search, save, authService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.transactionQuery, url.transactionQueryReport, excel) || this;
            _this.selectedItem = "";
            _this.totalAmountStating = 0;
            _this.totalAmountIn = 0;
            _this.totalAmountOut = 0;
            _this.totalAmountEnding = 0;
            _this.totalCountTrx = 0;
            _this.headers = ["date", "accountHeadName", "amountTotalStarting", "amountTotalIn", "amountTotalOut", "amountTotalEnding", "countTotalTrx"];
            var self = _this;
            self.hideEndDate = true;
            self.loadData();
            return _this;
        }
        TransactionDetailsReportController.prototype.$onInit = function () { };
        TransactionDetailsReportController.prototype.loadData = function () {
            var self = this;
            self.totalAmountIn = 0;
            self.totalAmountOut = 0;
            self.totalCountTrx = 0;
            var successCallback = function (response) {
                console.log(response.data);
                self.models = response.data;
                self.csvModels = [];
                self.chartLabels = [];
                self.chartData = [];
                for (var i = 0; i < self.models.length; i++) {
                    self.csvModels.push(self.generateCsvModel(self.models[i]));
                }
                for (var i_2 = 0; i_2 < response.data.length; i_2++) {
                    self.totalAmountStating += response.data[i_2].amountTotalStarting;
                    self.totalAmountIn += response.data[i_2].amountTotalIn;
                    self.totalAmountOut += response.data[i_2].amountTotalOut;
                    self.totalAmountEnding += response.data[i_2].amountTotalEnding;
                    self.totalCountTrx += response.data[i_2].countTotalTrx;
                    self.chartLabels.push(self.models[i_2].modified);
                    self.chartData.push(self.models[i_2].amount);
                }
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            var request = new App.SearchRequest();
            request["startDate"] = self.startDate.toLocaleString();
            // request["endDate"] = self.endDate.toLocaleString();
            request.shopId = "1";
            request.page = -1;
            request["AccountReportType"] = "TransactionDeatil";
            this.searchService.search(request, self.url.accountHeadQueryReport).then(successCallback, errorCallback);
        };
        TransactionDetailsReportController.prototype.loadDropdown = function () {
            var self = this;
            var successCallback = function (response) {
                self.transactionDetails = response.Models;
                self.selectedItem = self.transactionDetails[0];
                self.loadData();
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            var request = new App.SearchRequest();
            self.searchService
                .search(request, self.url.transactionQuery + "/Dropdown")
                .then(successCallback, errorCallback);
        };
        //accountHeads: any[];
        TransactionDetailsReportController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", 'Excel'
        ];
        return TransactionDetailsReportController;
    }(App.BaseController));
    App.TransactionDetailsReportController = TransactionDetailsReportController;
    angular.module('app').controller("TransactionDetailsReportController", TransactionDetailsReportController);
})(App || (App = {}));

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var App;
(function (App) {
    var ZoneWiseSalesReportsController = /** @class */ (function (_super) {
        __extends(ZoneWiseSalesReportsController, _super);
        function ZoneWiseSalesReportsController(location, sate, stateParams, url, search, save, authService, localStorageService, excel) {
            var _this = _super.call(this, location, sate, stateParams, url, search, save, authService, url.sale, url.saleQuery, excel) || this;
            _this.quantityTotal = 0;
            _this.amountTotal = 0;
            var self = _this;
            self.localStorageService = localStorageService;
            _this.searchRequest.startDate = _this.startDate.toJSON();
            _this.searchRequest.endDate = _this.endDate.toJSON();
            _this.loadWarehouses().then(function (result) {
                if (self.warehouses.length === 1) {
                    self.searchRequest.warehouseId = self.warehouses[0].id;
                }
                else {
                    var whId = self.localStorageService.get(App.LocalStorageKeys.WarehouseId);
                    if (whId != null) {
                        self.searchRequest.warehouseId = whId;
                    }
                }
                return self.search();
            });
            return _this;
        }
        ZoneWiseSalesReportsController.prototype.search = function () {
            var self = this;
            self.quantityTotal = 0;
            self.amountTotal = 0;
            var successCallback = function (response) {
                self.models = response.data;
                self.chartLabels = [];
                self.chartData = [];
                self.quantityTotal = 0;
                self.amountTotal = 0;
                if (self.models.length === 0) {
                    console.log('No search result found');
                }
                else {
                    self.generateCsvModels();
                    for (var i = 0; i < self.models.length; i++) {
                        var m = self.models[i];
                        self.quantityTotal += m.count;
                        self.amountTotal += m.amount;
                        self.chartLabels.push(self.models[i].key);
                        self.chartData.push(self.models[i].amount);
                    }
                }
                self.totalCount = response.Count;
                self.searchRequest.totalPage = Math.ceil(response.Count / 10);
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.searchService.search(self.searchRequest, self.queryUrl + "/SalesByZone")
                .then(successCallback, errorCallback);
        };
        ZoneWiseSalesReportsController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", "LocalStorageService", "Excel"
        ];
        return ZoneWiseSalesReportsController;
    }(App.BaseController));
    App.ZoneWiseSalesReportsController = ZoneWiseSalesReportsController;
    angular.module("app").controller("ZoneWiseSalesReportsController", ZoneWiseSalesReportsController);
})(App || (App = {}));

//module App {
//    "use strict";
//    export class ApplicationPermissionsController {
//        // angular ui params
//        stateService: angular.ui.IStateService;
//        stateParams: angular.ui.IStateParamsService;
//        searchService: SearchService;
//        saveService: SaveService;
//        url: UrlService;
//        searchRequest: SearchRequest;
//        isUpdateMode: boolean;
//        models: ApplicationPermission[];
//        
//        static $inject: string[] = ["$location", "$state", "$stateParams", "UrlService", "SearchService", "SaveService"];
//        constructor(private $location: angular.ILocationService, $state: angular.ui.IStateService,
//            $stateParams: angular.ui.IStateParamsService, url: UrlService, search: SearchService, save: SaveService, ) {
//            this.url = url;
//            this.searchService = search;
//            this.saveService = save;
//            this.stateService = $state;
//            this.stateParams = $stateParams;
//            this.isUpdateMode = false;
//            this.activate();
//        }
//        activate() {
//            console.log('i m in ApplicationPermissionsController');
//            this.models = [];
//            this.searchRequest = new SearchRequest("", "Modified", "False", "");
//            this.search();
//        }
//        search(): void {
//            var self = this;
//            var successCallback = (response: SearchResponse): void => {
//                console.log(response);
//                self.models = <any>response;
//            };
//            var errorCallback = (error: any): void => {
//                console.log(error);
//            };
//            self.searchService.get(self.url.applicationPermissionQueryData).then(<any>successCallback, errorCallback);
//        }
//    }
//    angular.module("app").controller("ApplicationPermissionsController", ApplicationPermissionsController);
//    export class ApplicationPermissionController {
//        // angular ui params
//        stateService: angular.ui.IStateService;
//        stateParams: angular.ui.IStateParamsService;
//        searchService: SearchService;
//        saveService: SaveService;
//        url: UrlService;
//        searchRequest: SearchRequest;
//        isUpdateMode: boolean;
//        model: ApplicationPermission;
//        
//        static $inject: string[] = ["$location", "$state", "$stateParams", "UrlService", "SearchService", "SaveService"];
//        constructor(private $location: angular.ILocationService, $state: angular.ui.IStateService,
//            $stateParams: angular.ui.IStateParamsService, url: UrlService, search: SearchService, save: SaveService, ) {
//            this.url = url;
//            this.searchService = search;
//            this.saveService = save;
//            this.stateService = $state;
//            this.stateParams = $stateParams;
//            this.isUpdateMode = false;
//            this.activate();
//            if (this.stateParams["id"]) {
//                this.isUpdateMode = true;
//                this.edit(this.stateParams["id"]);
//            }
//        }
//        activate() {
//            console.log('i m in ApplicationPermissionController');
//            this.model = new ApplicationPermission();
//            this.searchRequest = new SearchRequest("", "Modified", "False", "");
//        }
//        save(): void {
//            var self = this;
//            var successCallback = (response: BaseResponse): void => {
//                console.log(response);
//                self.model = new ApplicationPermission();
//            };
//            var errorCallback = (error: any): void => {
//                console.log(error);
//            };
//            self.saveService.save(<any>self.model, self.url.applicationPermissions + "/PostApplicationResource").then(<any>successCallback, errorCallback);
//        }
//        update(): void {
//            var self = this;
//            var successCallback = (response: BaseResponse): void => {
//                console.log(response);
//                self.isUpdateMode = false;
//                self.model = new ApplicationPermission();
//            };
//            var errorCallback = (error: any): void => {
//                console.log(error);
//            };
//            self.saveService.update(<any>self.model, self.url.applicationPermissions + "/PutApplicationResource").then(<any>successCallback, errorCallback);
//        }
//        //edit(p: ApplicationUser): void {
//        //    this.model = p;
//        //    this.isUpdateMode = true;
//        //}
//        edit(id: string): void {
//            ;
//            var self = this;
//            var url = self.url.applicationPermissions + '/GetApplicationResource/' + id;
//            var onSuccess = (data: any) => {
//                self.model = data;
//            }
//            var onError = (err: any) => {
//                alert('Error occurred');
//            }
//            self.searchService.get(url).then(onSuccess, onError);
//        }
//        delete(id: string): void {
//            var self = this;
//            var successCallback = (response: BaseResponse): void => {
//                console.log(response);
//                self.isUpdateMode = false;
//                self.model = new ApplicationPermission();
//            };
//            var errorCallback = (error: any): void => {
//                console.log(error);
//            };
//            self.saveService.delete(id, self.url.applicationPermissions).then(successCallback, errorCallback);
//        }
//    }
//    angular.module("app").controller("ApplicationPermissionController", ApplicationPermissionController);
//}
var App;
(function (App) {
    "use strict";
    var ApplicationPermissionsController = /** @class */ (function () {
        function ApplicationPermissionsController($location, url, search, save) {
            this.$location = $location;
            this.selectedResourcePermissionToUpdate = {};
            this.url = url;
            this.searchService = search;
            this.saveService = save;
            this.isUpdateMode = false;
            this.activate();
        }
        ApplicationPermissionsController.prototype.$onInit = function () { };
        ApplicationPermissionsController.prototype.activate = function () {
            console.log('i m in ApplicationPermissionsController');
            this.models = [];
            this.model = new App.ApplicationPermission();
            this.resources = [];
            this.resource = new App.ApplicationResource();
            this.roles = [];
            this.role = new App.ApplicationRole();
            this.searchRequest = new App.SearchRequest("", "Modified", "False", "");
            this.keyword = "";
            //this.search();
            //this.loadApplicationResourceDropDown();
            this.loadApplicationRoleDropDown();
            this.loadApplicationResources();
        };
        ApplicationPermissionsController.prototype.loadApplicationResourceDropDown = function () {
            var self = this;
            self.models = [];
            //var successCallback = (response: SearchResponse): void => {
            //    console.log(response);
            //    self.resources = <any>response;
            //    for (var i = 0; i < self.resources.length; i++) {
            //        var permissionModel = new ApplicationPermission();
            //        permissionModel.resource = self.resources[i].name;                    
            //        permissionModel.isAllowed = false;
            //        permissionModel.resourceId = self.resources[i].id;
            //        self.models.push(permissionModel);
            //    }
            //    console.log(self.models);
            //};
            //var errorCallback = (error: any): void => {
            //    console.log(error);
            //};
            //self.searchService.get(self.url.resourceDropdown).then(<any>successCallback, errorCallback);
            var successCallback = function (response) {
                self.resources = response;
                for (var i = 0; i < self.resources.length; i++) {
                    var permissionModel = new App.ApplicationPermission();
                    permissionModel.resource = self.resources[i].name;
                    permissionModel.isAllowed = false;
                    permissionModel.resourceId = self.resources[i].id;
                    self.models.push(permissionModel);
                }
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.searchService.get(self.url.applicationResourceQuery + '/Data').then(successCallback, errorCallback);
        };
        ApplicationPermissionsController.prototype.loadApplicationRoleDropDown = function () {
            var self = this;
            var successCallback = function (response) {
                console.log(response);
                self.roles = response;
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.searchService.get(self.url.roleDropdown).then(successCallback, errorCallback);
        };
        ApplicationPermissionsController.prototype.search = function () {
            var self = this;
            var successCallback = function (response) {
                console.log(response);
                self.models = response;
                console.log(self.models);
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.searchService.get(self.url.applicationPermissionQueryData + "?keyword=" + self.keyword).then(successCallback, errorCallback);
        };
        ApplicationPermissionsController.prototype.goto = function (page) {
            this.searchRequest.page = page;
            // this.Search();
        };
        ApplicationPermissionsController.prototype.save = function () {
            var _this = this;
            var self = this;
            var successCallback = function (response) {
                console.log(response);
                self.model = new App.ApplicationPermission();
                self.resources = [];
                self.roles = [];
                _this.loadApplicationResourceDropDown();
                _this.loadApplicationRoleDropDown();
                _this.search();
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            //self.Model.ResourceId = self.Resource.Id;
            //self.Model.RoleId = self.Role.Id;
            self.saveService.save(self.model, self.url.applicationPermissions + "/Post").then(successCallback, errorCallback);
        };
        ApplicationPermissionsController.prototype.update = function () {
            var _this = this;
            var self = this;
            var successCallback = function (response) {
                console.log(response);
                self.isUpdateMode = false;
                self.model = new App.ApplicationPermission();
                _this.search();
            };
            var errorCallback = function (error) {
                console.log(error);
                _this.search();
            };
            //self.Model.ResourceId = self.Resource.Id;
            //self.Model.RoleId = self.Role.Id;
            self.saveService.update(self.model, self.url.applicationPermissions).then(successCallback, errorCallback);
        };
        ApplicationPermissionsController.prototype.edit = function (p) {
            this.model = p;
            this.isUpdateMode = true;
        };
        ApplicationPermissionsController.prototype.delete = function (id) {
            var _this = this;
            var self = this;
            var successCallback = function (response) {
                console.log(response);
                self.isUpdateMode = false;
                self.model = new App.ApplicationPermission();
                _this.search();
            };
            var errorCallback = function (error) {
                console.log(error);
                _this.search();
            };
            self.saveService.delete(id, self.url.applicationPermissions).then(successCallback, errorCallback);
        };
        ApplicationPermissionsController.prototype.loadApplicationResources = function () {
            var self = this;
            self.models = [];
            var successCallback = function (response) {
                self.resources = response;
                for (var i = 0; i < self.resources.length; i++) {
                    var permissionModel = new App.ApplicationPermission();
                    permissionModel.resource = self.resources[i].name;
                    permissionModel.isAllowed = false;
                    permissionModel.resourceId = self.resources[i].id;
                    self.models.push(permissionModel);
                }
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.searchService.get(self.url.applicationResourceQuery + '/Data').then(successCallback, errorCallback);
        };
        ApplicationPermissionsController.prototype.updateResourcePermissionsForRole = function () {
            var _this = this;
            var self = this;
            var latestPermissionViewModels = [];
            console.log(self.selectedResourcePermissionToUpdate);
            for (var key in self.selectedResourcePermissionToUpdate) {
                if (self.selectedResourcePermissionToUpdate.hasOwnProperty(key)) {
                    var permissionEntity = new App.ApplicationPermission();
                    permissionEntity.resourceId = self.selectedResourcePermissionToUpdate[key]["resourceId"];
                    permissionEntity.roleId = self.selectedRoleId;
                    permissionEntity.isAllowed = self.selectedResourcePermissionToUpdate[key]["isAllowed"];
                    console.log(permissionEntity);
                    latestPermissionViewModels.push(permissionEntity);
                }
            }
            var successCallback = function (response) {
                console.log(response);
                if (response.isSuccess) {
                    alert("Permission updated");
                    _this.activate();
                }
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            //self.Model.ResourceId = self.Resource.Id;
            //self.Model.RoleId = self.Role.Id;
            if (self.selectedRoleId && latestPermissionViewModels.length > 0) {
                self.saveService.save(latestPermissionViewModels, self.url.applicationPermissions + "/UpdatePermissionsForRole").then(successCallback, errorCallback);
            }
            else {
                console.log("No Update Call To Server");
            }
        };
        ApplicationPermissionsController.prototype.selectRole = function (roleId) {
            var self = this;
            console.log(roleId);
            self.isRoleSelected = true;
            self.selectedRoleId = roleId;
            var url = self.url.applicationPermissionQuery + '/GetPermissions/' + roleId;
            var alreadySelectedResources = {};
            var onSuccess = function (data) {
                if (data.length === 0) {
                    self.loadApplicationResources();
                }
                else {
                    alreadySelectedResources = {};
                    for (var i = 0; i < data.length; i++) {
                        alreadySelectedResources[data[i].resourceId] = data[i];
                    }
                    for (var j = 0; j < self.models.length; j++) {
                        if (alreadySelectedResources[self.models[j].resourceId] !== undefined) {
                            self.models[j].isAllowed = alreadySelectedResources[self.models[j].resourceId].isAllowed;
                        }
                        else {
                            self.models[j].isAllowed = false;
                        }
                    }
                }
            };
            var onError = function (err) {
            };
            self.searchService.get(url).then(onSuccess, onError);
        };
        ApplicationPermissionsController.prototype.selectResourcePermission = function (selectedResourcePermission) {
            var self = this;
            self.selectedResourcePermissionToUpdate[selectedResourcePermission.resourceId] = selectedResourcePermission;
        };
        ApplicationPermissionsController.$inject = ["$location", "UrlService", "SearchService", "SaveService"];
        return ApplicationPermissionsController;
    }());
    App.ApplicationPermissionsController = ApplicationPermissionsController;
    angular.module("app").controller("ApplicationPermissionsController", ApplicationPermissionsController);
})(App || (App = {}));

var App;
(function (App) {
    "use strict";
    var ApplicationResourcesController = /** @class */ (function () {
        function ApplicationResourcesController($location, $state, $stateParams, url, search, save) {
            this.$location = $location;
            this.url = url;
            this.searchService = search;
            this.saveService = save;
            this.stateService = $state;
            this.stateParams = $stateParams;
            this.isUpdateMode = false;
            this.activate();
        }
        ApplicationResourcesController.prototype.$onInit = function () { };
        ApplicationResourcesController.prototype.activate = function () {
            console.log('i m in ApplicationResourcesController');
            this.models = [];
            this.searchRequest = new App.SearchRequest("", "Modified", "False", "");
            this.search();
        };
        ApplicationResourcesController.prototype.search = function () {
            var self = this;
            var successCallback = function (response) {
                console.log(response);
                self.models = response;
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.searchService.get(self.url.applicationResourceQueryData).then(successCallback, errorCallback);
        };
        ApplicationResourcesController.$inject = ["$location", "$state", "$stateParams", "UrlService", "SearchService", "SaveService"];
        return ApplicationResourcesController;
    }());
    App.ApplicationResourcesController = ApplicationResourcesController;
    angular.module("app").controller("ApplicationResourcesController", ApplicationResourcesController);
    var ApplicationResourceController = /** @class */ (function () {
        function ApplicationResourceController($location, $state, $stateParams, url, search, save) {
            this.$location = $location;
            this.url = url;
            this.searchService = search;
            this.saveService = save;
            this.stateService = $state;
            this.stateParams = $stateParams;
            this.isUpdateMode = false;
            this.activate();
            if (this.stateParams["id"]) {
                this.isUpdateMode = true;
                this.edit(this.stateParams["id"]);
            }
        }
        ApplicationResourceController.prototype.$onInit = function () { };
        ApplicationResourceController.prototype.activate = function () {
            console.log('i m in ApplicationUsersController');
            this.model = new App.ApplicationResource();
            this.searchRequest = new App.SearchRequest("", "Modified", "False", "");
        };
        ApplicationResourceController.prototype.save = function () {
            var self = this;
            var successCallback = function (response) {
                console.log(response);
                self.model = new App.ApplicationResource();
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.saveService.save(self.model, self.url.applicationResources + "/PostApplicationResource").then(successCallback, errorCallback);
        };
        ApplicationResourceController.prototype.update = function () {
            var self = this;
            var successCallback = function (response) {
                console.log(response);
                self.isUpdateMode = false;
                self.model = new App.ApplicationResource();
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.saveService.update(self.model, self.url.applicationResources + "/PutApplicationResource").then(successCallback, errorCallback);
        };
        //edit(p: ApplicationUser): void {
        //    this.model = p;
        //    this.isUpdateMode = true;
        //}
        ApplicationResourceController.prototype.edit = function (id) {
            ;
            var self = this;
            var url = self.url.applicationResources + '/GetApplicationResource/' + id;
            var onSuccess = function (data) {
                self.model = data;
            };
            var onError = function (err) {
                alert('Error occurred');
            };
            self.searchService.get(url).then(onSuccess, onError);
        };
        ApplicationResourceController.prototype.delete = function (id) {
            var self = this;
            var successCallback = function (response) {
                console.log(response);
                self.isUpdateMode = false;
                self.model = new App.ApplicationResource();
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.saveService.delete(id, self.url.applicationResources).then(successCallback, errorCallback);
        };
        ApplicationResourceController.$inject = ["$location", "$state", "$stateParams", "UrlService", "SearchService", "SaveService"];
        return ApplicationResourceController;
    }());
    App.ApplicationResourceController = ApplicationResourceController;
    angular.module("app").controller("ApplicationResourceController", ApplicationResourceController);
})(App || (App = {}));
//module App {
//    "use strict";
//    export class ApplicationResourcesController {
//        searchService: SearchService;
//        saveService: SaveService;
//        url: UrlService;
//        searchRequest: SearchRequest;
//        isUpdateMode: boolean;
//        models: ApplicationResource[];
//        model: ApplicationResource;
//        static $inject: string[] = ["$location", "UrlService", "SearchService", "SaveService"];
//        constructor(private $location: angular.ILocationService, url: UrlService, search: SearchService, save: SaveService, ) {
//            this.url = url;
//            this.searchService = search;
//            this.saveService = save;
//            this.isUpdateMode = false;
//            this.activate();
//        }
//        activate() {
//            console.log('i m in ApplicationResourcesController');
//            this.models = [];
//            this.model = new ApplicationResource();
//            this.searchRequest = new SearchRequest("", "Modified", "False", "");
//            this.search();
//        }
//        search(): void {
//            var self = this;
//            var successCallback = (response: SearchResponse): void => {
//                console.log(response);
//                self.models = <any>response;
//                console.log(self.models);
//            };
//            var errorCallback = (error: any): void => {
//                console.log(error);
//            };
//            self.searchService.get(self.url.applicationResourceQueryData).then(<any>successCallback, errorCallback);
//        }
//        goto(page: number): void {
//            this.searchRequest.page = page;
//            this.search();
//        }
//        save(): void {
//            var self = this;
//            var successCallback = (response: BaseResponse): void => {
//                console.log(response);
//                self.model = new ApplicationResource();
//                this.search();
//            };
//            var errorCallback = (error: any): void => {
//                console.log(error);
//            };
//            // self.Model.Id = "4d524ba7-e4b4-485b-931b-6a298542a530";
//            self.saveService.save(<any>self.model, self.url.applicationResources + "/PostApplicationResource").then(<any>successCallback, errorCallback);
//        }
//        update(): void {
//            var self = this;
//            var successCallback = (response: BaseResponse): void => {
//                console.log(response);
//                self.isUpdateMode = false;
//                self.model = new ApplicationResource();
//                this.search();
//            };
//            var errorCallback = (error: any): void => {
//                console.log(error);
//                this.search();
//            };
//            self.saveService.update(<any>self.model, self.url.applicationResources).then(<any>successCallback, errorCallback);
//        }
//        edit(p: ApplicationResource): void {
//            this.model = p;
//            this.isUpdateMode = true;
//        }
//        delete(id: string): void {
//            var self = this;
//            var successCallback = (response: BaseResponse): void => {
//                console.log(response);
//                self.isUpdateMode = false;
//                self.model = new ApplicationResource();
//                this.search();
//            };
//            var errorCallback = (error: any): void => {
//                console.log(error);
//                this.search();
//            };
//            self.saveService.delete(id, self.url.applicationResources).then(successCallback, errorCallback);
//        }
//    }
//    angular.module("app").controller("ApplicationResourcesController", ApplicationResourcesController);
//}

var App;
(function (App) {
    "use strict";
    var ApplicationRoleController = /** @class */ (function () {
        function ApplicationRoleController($location, $state, $stateParams, url, search, save) {
            this.$location = $location;
            this.url = url;
            this.searchService = search;
            this.saveService = save;
            this.stateService = $state;
            this.stateParams = $stateParams;
            this.isUpdateMode = false;
            this.activate();
            if (this.stateParams["id"]) {
                this.isUpdateMode = true;
                this.edit(this.stateParams["id"]);
            }
        }
        ApplicationRoleController.prototype.$onInit = function () { };
        ApplicationRoleController.prototype.activate = function () {
            console.log('i m in ApplicationRoleController');
            this.models = [];
            this.model = new App.ApplicationRole();
            this.searchRequest = new App.SearchRequest("", "Modified", "False", "");
            this.search();
        };
        ApplicationRoleController.prototype.search = function () {
            var self = this;
            var successCallback = function (response) {
                console.log(response);
                self.models = response;
                console.log(self.models);
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.searchService.get(self.url.applicationRoleQueryData).then(successCallback, errorCallback);
        };
        ApplicationRoleController.prototype.goto = function (page) {
            this.searchRequest.page = page;
            this.search();
        };
        ApplicationRoleController.prototype.save = function () {
            var _this = this;
            var self = this;
            var successCallback = function (response) {
                console.log(response);
                self.model = new App.ApplicationRole();
                _this.search();
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            // self.Model.Id = "4d524ba7-e4b4-485b-931b-6a298542a530";
            self.saveService.save(self.model, self.url.applicationRoles + "/PostApplicationRole")
                .then(successCallback, errorCallback);
        };
        ApplicationRoleController.prototype.update = function () {
            var _this = this;
            var self = this;
            var successCallback = function (response) {
                console.log(response);
                self.isUpdateMode = false;
                self.model = new App.ApplicationRole();
                _this.search();
            };
            var errorCallback = function (error) {
                console.log(error);
                _this.search();
            };
            self.saveService.update(self.model, self.url.applicationRoles + "/PutApplicationRole").then(successCallback, errorCallback);
        };
        //edit(p: ApplicationRole): void {
        //    this.model = p;
        //    this.isUpdateMode = true;
        //}
        ApplicationRoleController.prototype.edit = function (id) {
            ;
            var self = this;
            var url = self.url.applicationRoles + '/GetApplicationRole/' + id;
            var onSuccess = function (data) {
                self.model = data;
            };
            var onError = function (err) {
                alert('Error occurred');
            };
            self.searchService.get(url).then(onSuccess, onError);
        };
        ApplicationRoleController.prototype.delete = function (id) {
            var _this = this;
            var self = this;
            var successCallback = function (response) {
                console.log(response);
                self.isUpdateMode = false;
                self.model = new App.ApplicationRole();
                _this.search();
            };
            var errorCallback = function (error) {
                console.log(error);
                _this.search();
            };
            self.saveService.delete(id, self.url.applicationRoles).then(successCallback, errorCallback);
        };
        ApplicationRoleController.$inject = ["$location", "$state", "$stateParams", "UrlService", "SearchService", "SaveService"];
        return ApplicationRoleController;
    }());
    App.ApplicationRoleController = ApplicationRoleController;
    angular.module("app").controller("ApplicationRoleController", ApplicationRoleController);
})(App || (App = {}));

var App;
(function (App) {
    "use strict";
    var ApplicationUserRolesController = /** @class */ (function () {
        function ApplicationUserRolesController($location, url, search, save) {
            this.$location = $location;
            this.url = url;
            this.searchService = search;
            this.saveService = save;
            this.isUpdateMode = false;
            this.activate();
        }
        ApplicationUserRolesController.prototype.$onInit = function () { };
        ApplicationUserRolesController.prototype.activate = function () {
            console.log('i m in ApplicationUserRolesController');
            this.models = [];
            this.model = new App.ApplicationUserRole();
            this.users = [];
            this.user = new App.ApplicationUser();
            this.roles = [];
            this.role = new App.ApplicationRole();
            this.searchRequest = new App.SearchRequest("", "Modified", "False", "");
            this.search();
            this.loadApplicationUserDropDown();
            this.loadApplicationRoleDropDown();
        };
        ApplicationUserRolesController.prototype.loadApplicationUserDropDown = function () {
            var self = this;
            var successCallback = function (response) {
                console.log(response);
                self.users = response;
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.searchService.get(self.url.applicationUserQueryData).then(successCallback, errorCallback);
        };
        ApplicationUserRolesController.prototype.loadApplicationRoleDropDown = function () {
            var self = this;
            var successCallback = function (response) {
                console.log(response);
                self.roles = response;
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.searchService.get(self.url.roleDropdown).then(successCallback, errorCallback);
        };
        ApplicationUserRolesController.prototype.search = function () {
            var self = this;
            var successCallback = function (response) {
                console.log(response);
                self.models = response;
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.searchService.get(self.url.applicationUserRoleQueryData).then(successCallback, errorCallback);
        };
        ApplicationUserRolesController.prototype.goto = function (page) {
            this.searchRequest.page = page;
            this.search();
        };
        ApplicationUserRolesController.prototype.save = function () {
            var _this = this;
            var self = this;
            var successCallback = function (response) {
                console.log(response);
                self.model = new App.ApplicationUserRole();
                _this.search();
                _this.loadApplicationUserDropDown();
                _this.loadApplicationRoleDropDown();
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            //self.Model.UserId = self.User.Id;
            //self.Model.RoleId = self.Role.Id;
            self.saveService.save(self.model, self.url.applicationUserRoles).then(successCallback, errorCallback);
        };
        ApplicationUserRolesController.prototype.update = function () {
            var _this = this;
            var self = this;
            var successCallback = function (response) {
                console.log(response);
                self.isUpdateMode = false;
                self.model = new App.ApplicationUserRole();
                _this.search();
            };
            var errorCallback = function (error) {
                console.log(error);
                _this.search();
            };
            //self.Model.UserId = self.User.Id;
            //self.Model.RoleId = self.Role.Id;
            self.saveService.update(self.model, self.url.applicationUserRoles).then(successCallback, errorCallback);
        };
        ApplicationUserRolesController.prototype.edit = function (p) {
            //this.User.Id = p.UserId;
            //this.User.UserName = p.UserName;
            //this.Role.Id = p.RoleId;
            //this.Role.Name = p.RoleName;
            this.model = p;
            this.isUpdateMode = true;
        };
        ApplicationUserRolesController.prototype.delete = function (id) {
            var _this = this;
            var self = this;
            var successCallback = function (response) {
                console.log(response);
                self.isUpdateMode = false;
                self.model = new App.ApplicationUserRole();
                _this.search();
            };
            var errorCallback = function (error) {
                console.log(error);
                _this.search();
            };
            self.saveService.delete(id, self.url.applicationUserRoles).then(successCallback, errorCallback);
        };
        ApplicationUserRolesController.$inject = ["$location", "UrlService", "SearchService", "SaveService"];
        return ApplicationUserRolesController;
    }());
    App.ApplicationUserRolesController = ApplicationUserRolesController;
    angular.module("app").controller("ApplicationUserRolesController", ApplicationUserRolesController);
})(App || (App = {}));

var App;
(function (App) {
    "use strict";
    var ApplicationUsersController = /** @class */ (function () {
        function ApplicationUsersController($location, $state, $stateParams, url, search, save) {
            this.$location = $location;
            this.url = url;
            this.searchService = search;
            this.saveService = save;
            this.stateService = $state;
            this.stateParams = $stateParams;
            this.isUpdateMode = false;
            this.activate();
        }
        ApplicationUsersController.prototype.$onInit = function () { };
        ApplicationUsersController.prototype.activate = function () {
            console.log('i m in ApplicationUsersController');
            this.models = [];
            this.searchRequest = new App.SearchRequest("", "Modified", "False", "");
            this.search();
        };
        ApplicationUsersController.prototype.search = function () {
            var self = this;
            var successCallback = function (response) {
                console.log(response);
                self.models = response;
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.searchService.get(self.url.applicationUserQueryData).then(successCallback, errorCallback);
        };
        ApplicationUsersController.$inject = ["$location", "$state", "$stateParams", "UrlService", "SearchService", "SaveService"];
        return ApplicationUsersController;
    }());
    App.ApplicationUsersController = ApplicationUsersController;
    angular.module("app").controller("ApplicationUsersController", ApplicationUsersController);
    var ApplicationUserController = /** @class */ (function () {
        function ApplicationUserController($location, $state, $stateParams, url, search, save) {
            this.$location = $location;
            this.url = url;
            this.searchService = search;
            this.saveService = save;
            this.stateService = $state;
            this.stateParams = $stateParams;
            this.isUpdateMode = false;
            this.activate();
            if (this.stateParams["id"]) {
                this.isUpdateMode = true;
                this.edit(this.stateParams["id"]);
            }
        }
        ApplicationUserController.prototype.$onInit = function () { };
        ApplicationUserController.prototype.activate = function () {
            console.log('i m in ApplicationUsersController');
            this.models = [];
            this.model = new App.ApplicationUser();
            this.roles = [];
            this.shops = [];
            this.role = new App.ApplicationRole();
            this.searchRequest = new App.SearchRequest("", "Modified", "False", "");
            // this.search();
            this.setupDropdowns();
            this.loadShopDropdown();
        };
        //loadApplicationRoleDropDown(): void {
        //    var self = this;
        //    var successCallback = (response: SearchResponse): void => {
        //        console.log(response);
        //        self.roles = <any>response;
        //    };
        //    var errorCallback = (error: any): void => {
        //        console.log(error);
        //    };
        //    self.searchService.get(self.url.roleDropdown +"/GetApplicationRoleDropdown").then(<any>successCallback, errorCallback);
        //}
        ApplicationUserController.prototype.setupDropdowns = function () {
            var _this = this;
            var self = this;
            var success = function (response) {
                _this.roles = response;
                console.log(response);
            };
            var error = function (error) {
                console.log(error);
                alert('Error occurred');
            };
            self.searchService.get(self.url.roleDropdown).then(success, error);
        };
        ApplicationUserController.prototype.loadShopDropdown = function () {
            var self = this;
            var successCallback = function (response) {
                console.log('shops ', response);
                self.shops = response.Models;
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            var shopRequest = new App.SearchRequest("", "Modified", "False", "");
            self.searchService
                .search(shopRequest, self.url.shopQuery + "/Dropdown")
                .then(successCallback, errorCallback);
        };
        ApplicationUserController.prototype.goto = function (page) {
            this.searchRequest.page = page;
            //this.search();
        };
        ApplicationUserController.prototype.save = function () {
            var self = this;
            var successCallback = function (response) {
                console.log(response);
                self.model = new App.ApplicationUser();
                //this.search();
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.saveService.save(self.model, self.url.applicationUsers + "/PostApplicationUser").then(successCallback, errorCallback);
        };
        ApplicationUserController.prototype.update = function () {
            var self = this;
            var successCallback = function (response) {
                console.log(response);
                self.isUpdateMode = false;
                self.model = new App.ApplicationUser();
                //this.search();
            };
            var errorCallback = function (error) {
                console.log(error);
                // this.search();
            };
            self.saveService.update(self.model, self.url.applicationUsers + "/PutApplicationUser").then(successCallback, errorCallback);
        };
        //edit(p: ApplicationUser): void {
        //    this.model = p;
        //    this.isUpdateMode = true;
        //}
        ApplicationUserController.prototype.edit = function (id) {
            ;
            var self = this;
            var url = self.url.applicationUsers + '/GetApplicationUser/' + id;
            var onSuccess = function (data) {
                self.model = data;
                self.model.roleId = self.model["roles"][0]["roleId"];
            };
            var onError = function (err) {
                alert('Error occurred');
            };
            self.searchService.get(url).then(onSuccess, onError);
        };
        ApplicationUserController.prototype.delete = function (id) {
            var self = this;
            var successCallback = function (response) {
                console.log(response);
                self.isUpdateMode = false;
                self.model = new App.ApplicationUser();
                // this.search();
            };
            var errorCallback = function (error) {
                console.log(error);
                // this.search();
            };
            self.saveService.delete(id, self.url.applicationUsers + "/DeleteApplicationUser").then(successCallback, errorCallback);
        };
        ApplicationUserController.$inject = ["$location", "$state", "$stateParams", "UrlService", "SearchService", "SaveService"];
        return ApplicationUserController;
    }());
    App.ApplicationUserController = ApplicationUserController;
    angular.module("app").controller("ApplicationUserController", ApplicationUserController);
})(App || (App = {}));

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var App;
(function (App) {
    "use strict";
    var AccountHeadsController = /** @class */ (function (_super) {
        __extends(AccountHeadsController, _super);
        function AccountHeadsController(location, state, stateParams, url, search, save, authService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.accountHead, url.accountHeadQuery, excel) || this;
            _this.headers = ["id", "name", "accountHeadType", "modified"];
            _this.search();
            return _this;
        }
        AccountHeadsController.prototype.report = function () {
            var self = this;
            window.open(self.url.accountHeadQueryReport, "_blank", "");
        };
        AccountHeadsController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", 'Excel'
        ];
        return AccountHeadsController;
    }(App.BaseController));
    App.AccountHeadsController = AccountHeadsController;
    angular.module("app").controller("AccountHeadsController", AccountHeadsController);
    var AccountHeadController = /** @class */ (function (_super) {
        __extends(AccountHeadController, _super);
        function AccountHeadController(location, state, stateParams, url, search, save, authService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.accountHead, url.accountHeadQuery, excel) || this;
            _this.isUpdateMode = false;
            var self = _this;
            var success = function (response) {
                console.log('reasult---' + response);
                self.accountTypes = response.accountTypes;
            };
            var error = function (error) {
                console.log(error);
            };
            self.searchService.get(url.transaction + "Query" + "/Dropdowns").then(success, error);
            if (_this.stateParams["id"]) {
                _this.isUpdateMode = true;
                _this.edit(_this.stateParams["id"]);
            }
            return _this;
        }
        AccountHeadController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", 'Excel'
        ];
        return AccountHeadController;
    }(App.BaseController));
    App.AccountHeadController = AccountHeadController;
    angular.module("app").controller("AccountHeadController", AccountHeadController);
})(App || (App = {}));

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var App;
(function (App) {
    "use strict";
    var AccountInfoController = /** @class */ (function (_super) {
        __extends(AccountInfoController, _super);
        function AccountInfoController(location, state, stateParams, url, search, save, authService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.accountInfo, url.accountInfoQuery, excel) || this;
            _this.accountInfoTypes = ["Cash", "Bank", "Mobile", "Other"];
            _this.isUpdateMode = false;
            if (_this.stateParams["id"]) {
                _this.isUpdateMode = true;
                _this.edit2(_this.stateParams["id"]);
            }
            return _this;
        }
        AccountInfoController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", 'Excel'
        ];
        return AccountInfoController;
    }(App.BaseController));
    App.AccountInfoController = AccountInfoController;
    angular.module("app").controller("AccountInfoController", AccountInfoController);
    var AccountInfosController = /** @class */ (function (_super) {
        __extends(AccountInfosController, _super);
        function AccountInfosController(location, state, stateParams, url, search, save, authService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.accountInfo, url.accountInfoQuery, excel) || this;
            _this.headers = ["accounTitle", "accountNumber", "bankName", "accountInfoType"];
            _this.search();
            return _this;
        }
        AccountInfosController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", 'Excel'
        ];
        return AccountInfosController;
    }(App.BaseController));
    App.AccountInfosController = AccountInfosController;
    angular.module("app").controller("AccountInfosController", AccountInfosController);
})(App || (App = {}));

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var App;
(function (App) {
    "use strict";
    var TransactionController = /** @class */ (function (_super) {
        __extends(TransactionController, _super);
        function TransactionController(location, state, stateParams, url, search, save, authService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.transaction, url.transaction + "Query", excel) || this;
            _this.startDate = new Date();
            _this.isUpdateMode = false;
            if (_this.stateParams["id"]) {
                _this.isUpdateMode = true;
                _this.edit(_this.stateParams["id"]);
            }
            return _this;
        }
        TransactionController.prototype.activate = function () {
            this.model = new App.Transaction();
            this.isUpdateMode = false;
            this.setupDropdowns();
            this.selectedAccountHead = new App.AccountHead();
            this.selectedAccountInfo = new App.AccountInfo();
            this.loadAccountInfos();
        };
        TransactionController.prototype.setupDropdowns = function () {
            var self = this;
            var success = function (response) {
                console.log(response);
                self.transactionMediums = response.transactionMediums;
                self.paymentGatewayServices = response.paymentGatewayServices;
                self.transactionFors = response.transactionFors;
                self.transactionFors = self.removeElement(self.transactionFors, "Sale");
                self.transactionFors = self.removeElement(self.transactionFors, "Purchase");
                self.transactionWiths = response.transactionWiths;
                self.transactionFlowTypes = response.transactionFlowTypes;
                self.accountTypes = response.accountTypes;
                self.accountInfoTypes = response.accountInfoTypes;
                self.accountInfoType = "Cash";
                self.model = new App.Transaction();
                self.model.transactionMedium = "Cash";
                self.model.paymentGatewayService = "Cash";
                self.model.transactionMediumName = "Cash";
                self.model.paymentGatewayServiceName = "Cash";
                self.model.transactionFlowType = "Income";
                self.model.transactionFor = "Office";
            };
            var error = function (error) {
                console.log(error);
            };
            self.searchService.get(self.queryUrl + "/Dropdowns").then(success, error);
            var accountSuccess = function (response) {
                console.log('account - ', response);
                self.accountHeads = response.Models;
            };
            var accountRequest = new App.SearchRequest();
            self.searchService.search(accountRequest, self.url.accountHeadQuery + "/Dropdown")
                .then(accountSuccess, error);
        };
        TransactionController.prototype.loadParents = function () {
            var _this = this;
            var self = this;
            var success = function (response) {
                _this.parents = response.Models;
                for (var i = 0; i < _this.parents.length; i++) {
                    var data = _this.parents[i].data;
                    _this.parents[i].text = _this.parents[i].text + " Due: " + data.totalDue;
                }
            };
            var error = function (error) {
                console.log(error);
            };
            //var request = new SearchRequest();
            //var url = self.url.inventoryBaseApi + "/" + self.model.transactionWith + "Query/Dropdown";
            //self.searchService.search(request, url).then(success, error);
        };
        TransactionController.prototype.accountHeadChanged = function () {
            this.model.accountHeadName = this.selectedAccountHead["text"];
            this.model.accountHeadId = this.selectedAccountHead.id;
        };
        TransactionController.prototype.loadOrders = function () {
            var self = this;
            var url = "";
            var request = new App.SearchRequest();
            if (this.model.transactionWith === 'Supplier') {
                url = self.url.purchaseQuery + "/Dropdown";
                request["supplierId"] = self.model.parentId;
            }
            if (this.model.transactionWith === 'Customer') {
                url = self.url.saleQuery + "/Dropdown";
                request["customerId"] = self.model.parentId;
            }
            if (url.length > 0) {
                var parent_1 = self.parents.filter(function (x) { return x.id === self.model.parentId; })[0];
                console.info('parent', parent_1);
                self.model.parentName = parent_1["text"];
                var success = function (response) {
                    console.log(response);
                    self.orders = response.Models;
                };
                var error = function (error) {
                    console.log(error);
                };
                self.searchService.search(request, url).then(success, error);
                console.log(this.model);
            }
        };
        TransactionController.prototype.orderSelected = function () {
            var order = this.model['order'];
            this.model.orderId = order.id;
            this.model.orderNumber = order.data.orderNumber;
            console.log(order);
        };
        TransactionController.prototype.edit = function (id) {
            var self = this;
            var onSuccess = function (data) {
                self.model = data.data;
                if (self.isUpdateMode && self.model.transactionWith) {
                    self.loadParents();
                }
            };
            var onError = function (err) {
                alert('Error occurred');
            };
            var url = self.url.transaction + "Query" + '/Detail?id=' + id;
            self.searchService.search(null, url).then(onSuccess, onError);
        };
        TransactionController.prototype.print = function () {
            var printContents = document.getElementById("receipt").innerHTML;
            var baseUrl = document.location.host + this.url.clientSubFolder;
            var popupWin = window.open('', '_blank', 'scrollbars=no,menubar=no,toolbar=no,location=no,status=no,titlebar=no');
            popupWin.window.focus();
            popupWin.document.write('<!DOCTYPE html><html><head>' +
                '<link rel="stylesheet" href="http://' +
                baseUrl +
                '/Content/bootstrap.min.css">' +
                '</head><body style="width: auto; height:auto;background:white"><div class="container">' +
                printContents +
                '</div></body></html>');
            popupWin.onbeforeunload = function (event) {
                popupWin.close();
            };
            popupWin.onabort = function (event) {
                popupWin.document.close();
                popupWin.close();
            };
            setTimeout(function () {
                popupWin.print();
            }, 1000);
        };
        TransactionController.prototype.loadAccountInfos = function () {
            var self = this;
            var success = function (response) {
                App.Display.log('loadAccountInfos result : ', response);
                self.accountInfos = response.Models;
                if (self.accountInfos.length > 0) {
                    for (var i = 0; i < self.accountInfos.length; i++) {
                        if (self.accountInfos[i].text == "Cash") {
                            self.selectedAccountInfo = self.accountInfos[i];
                            console.log(self.selectedAccountInfo);
                            self.transaction.accountInfoId = self.selectedAccountInfo.id;
                            break;
                        }
                    }
                }
            };
            var error = function (error) {
                App.Display.log(error);
            };
            var accountInfoQueryRequest = new App.SearchRequest();
            self.searchService.search(accountInfoQueryRequest, self.url.accountInfoQuery + "/Dropdown")
                .then(success, error);
        };
        TransactionController.prototype.accountInfoChanged = function () {
            var self = this;
            self.model.accountInfoTitle = self.selectedAccountInfo["text"];
            self.model.accountInfoId = self.selectedAccountInfo.id;
        };
        TransactionController.prototype.dateChanged = function () {
            var self = this;
            console.log(self.transactionDate);
            self.model.transactionDate = self.transactionDate.toDateString();
        };
        TransactionController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService",
            'Excel'
        ];
        return TransactionController;
    }(App.BaseController));
    App.TransactionController = TransactionController;
    angular.module("app").controller("TransactionController", TransactionController);
})(App || (App = {}));

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var App;
(function (App) {
    "use strict";
    var TransactionsController = /** @class */ (function (_super) {
        __extends(TransactionsController, _super);
        function TransactionsController(location, state, stateParams, url, search, save, authService, localStorageService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.transaction, url.transaction + "Query", excel) || this;
            _this.totalIncome = 0;
            _this.totalExpense = 0;
            _this.headers = ["id", "accountHeadName", "amount", "orderNumber", "transactionFor", "transactionWith", "modified"];
            var self = _this;
            _this.localStorageService = localStorageService;
            _this.setupDropdowns();
            _this.startDate = new Date();
            _this.endDate = new Date();
            var accountSuccess = function (response) {
                console.log('account - ', response);
                self.accountHeads = response.Models;
                self.accountHeads.splice(0, 0, { id: '', text: 'All' });
                self.searchRequest['accountHeadId'] = self.accountHeads[0].id;
            };
            var error = function (error) {
                console.log(error);
            };
            var accountRequest = new App.SearchRequest();
            accountRequest.page = -1;
            self.searchService.search(accountRequest, self.url.accountHeadQuery + "/Dropdown")
                .then(accountSuccess, error);
            var accountInfoSuccess = function (response) {
                self.accountInfos = response.Models;
                self.accountInfos.splice(0, 0, { id: '', text: 'All' });
                self.searchRequest['accountInfoId'] = self.accountInfos[0].id;
            };
            var accountInfoRequest = new App.SearchRequest();
            accountInfoRequest.page = -1;
            self.searchService.search(accountInfoRequest, self.url.accountInfoQuery + "/Dropdown")
                .then(accountInfoSuccess, error);
            self.search();
            return _this;
        }
        TransactionsController.prototype.setupDropdowns = function () {
            var self = this;
            var success = function (response) {
                console.log(response);
                self.transactionMediums = response.transactionMediums;
                self.transaction = new App.Transaction();
                self.searchRequest = new App.SearchRequest();
                self.transaction.transactionMedium = "Cash";
                self.searchRequest['transactionMediumName'] = self.transaction.transactionMedium;
            };
            var error = function (error) {
                console.log(error);
            };
            self.searchService.get(self.url.transactionQuery + "/Dropdowns").then(success, error);
            self.search();
        };
        TransactionsController.prototype.search = function () {
            var self = this;
            self.totalIncome = 0;
            self.totalExpense = 0;
            var successCallback = function (response) {
                console.log('i am in transactions controller ', response);
                self.totalCount = response.Count;
                self.models = response.Models;
                if (self.models.length === 0) {
                    console.log('No search result found');
                    // alert('No search result found');
                }
                else {
                    self.csvModels = [];
                    for (var i = 0; i < self.models.length; i++) {
                        self.csvModels.push(self.generateCsvModel(self.models[i]));
                        if (self.models[i].transactionFlowType == 'Income' || self.models[i].transactionFor == 'Sale') {
                            self.totalIncome += self.models[i].amount;
                        }
                        else {
                            self.totalExpense += self.models[i].amount;
                        }
                    }
                    console.info(self.totalIncome, self.totalExpense);
                }
                self.searchRequest.totalPage = Math.ceil(response.Count / 10);
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.searchRequest.startDate = self.startDate.toDateString();
            self.searchRequest.endDate = self.endDate.toDateString();
            self.searchService
                .search(self.searchRequest, self.queryUrl + "/Search")
                .then(successCallback, errorCallback);
        };
        TransactionsController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", 'Excel'
        ];
        return TransactionsController;
    }(App.BaseController));
    App.TransactionsController = TransactionsController;
    angular.module("app").controller("TransactionsController", TransactionsController);
    var IncomeStatementController = /** @class */ (function (_super) {
        __extends(IncomeStatementController, _super);
        function IncomeStatementController(location, state, stateParams, url, search, save, authService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.transaction, url.transaction + "Query", excel) || this;
            var self = _this;
            return _this;
        }
        //printModel: Transaction;
        //print(id: string) {
        //    var self = this;
        //    self.printModel = new Transaction();
        //    var successCallback = (response: SearchResponse): void => {
        //        self.printModel = response.data;
        //        setTimeout(function (p) {
        //            var printContents = document.getElementById("receipt").innerHTML;
        //            let baseUrl = document.location.host + self.url.clientSubFolder;
        //            let popupWin = window.open('',
        //                '_blank',
        //                'scrollbars=no,menubar=no,toolbar=no,location=no,status=no,titlebar=no');
        //            popupWin.window.focus();
        //            popupWin.document.write('<!DOCTYPE html><html><head>' +
        //                '<link rel="stylesheet" href="http://' +
        //                baseUrl +
        //                '/Content/bootstrap.min.css">' +
        //                '</head><body style="width: auto; height:auto;background:white"><div class="container">' +
        //                printContents +
        //                '</div></body></html>');
        //            popupWin.onbeforeunload = function (event) {
        //                popupWin.close();
        //                //return '';
        //            };
        //            popupWin.onabort = function (event) {
        //                popupWin.document.close();
        //                popupWin.close();
        //            }
        //            setTimeout(function () {
        //                popupWin.print();
        //            }, 1000);
        //        },
        //            1000);
        //        self.activate();
        //    };
        //    var errorCallback = (error: any): void => {
        //        console.log(error);
        //    };
        //    var searchRequest = new SearchRequest();
        //    searchRequest.id = this.stateParams["id"];
        //    searchRequest.page = -1;
        //    var httpUrl = self.url.transactionQuery + "/Receipt?id=" + id;
        //    self.searchService.search(null, httpUrl).then(<any>successCallback, errorCallback);
        //}
        IncomeStatementController.prototype.print = function (id) {
            if (id == null) {
                id = "incomestatement";
            }
            var printContents = document.getElementById(id).innerHTML;
            var popupWin;
            var baseUrl = 'http://' + document.location.host + this.url.clientSubFolder;
            console.log(baseUrl);
            var cssUrl = '';
            cssUrl = baseUrl + '/dist/css/all.css?t=074002082011';
            popupWin = window.open('', '_blank', 'scrollbars=no,menubar=no,toolbar=no,location=no,status=no,titlebar=no');
            popupWin.window.focus();
            popupWin.document.write('<!DOCTYPE html><html><head>' +
                '<link rel="stylesheet" ' +
                'href="' + cssUrl + '">' +
                '</head><body style="font-size:10px !important; line-height: 1.0 !important;">' +
                printContents +
                '</body></html>');
            popupWin.onbeforeunload = function (event) {
                popupWin.close();
            };
            popupWin.onabort = function (event) {
                popupWin.document.close();
                popupWin.close();
            };
            setTimeout(function () {
                popupWin.print();
            }, 1000);
        };
        IncomeStatementController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", 'Excel'
        ];
        return IncomeStatementController;
    }(App.BaseController));
    App.IncomeStatementController = IncomeStatementController;
    angular.module("app").controller("IncomeStatementController", IncomeStatementController);
    var MoneyTransferConroller = /** @class */ (function (_super) {
        __extends(MoneyTransferConroller, _super);
        function MoneyTransferConroller(location, state, stateParams, url, search, save, authService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.transaction, url.transaction + "Query", excel) || this;
            _this.isUpdateMode = false;
            if (_this.stateParams["id"]) {
                _this.isUpdateMode = true;
                _this.edit(_this.stateParams["id"]);
            }
            return _this;
        }
        MoneyTransferConroller.prototype.activate = function () {
            this.model = new App.Transaction();
            this.isUpdateMode = true;
            this.setupDropdowns();
            this.selectedAccountInfo = new App.AccountInfo();
            this.loadAccountInfos();
        };
        MoneyTransferConroller.prototype.setupDropdowns = function () {
            var self = this;
            var success = function (response) {
                console.log(response);
                self.paymentGatewayServices = response.paymentGatewayServices;
                self.accountTypes = response.accountTypes;
                self.accountInfoTypes = response.accountInfoTypes;
                self.model = new App.Transaction();
                self.accountInfoType = "Cash";
            };
            var error = function (error) {
                console.log(error);
            };
            self.searchService.get(self.queryUrl + "/Dropdowns").then(success, error);
        };
        MoneyTransferConroller.prototype.loadAccountInfos = function () {
            var self = this;
            var success = function (response) {
                App.Display.log('loadAccountInfos result : ', response);
                self.accountInfos = response.Models;
                if (self.accountInfos.length > 0) {
                    for (var i = 0; i < self.accountInfos.length; i++) {
                        if (self.accountInfos[i].text == "Cash") {
                            self.selectedAccountInfo = self.accountInfos[i];
                            console.log(self.selectedAccountInfo);
                            self.transaction.accountInfoId = self.selectedAccountInfo.id;
                            break;
                        }
                    }
                }
            };
            var error = function (error) {
                App.Display.log(error);
            };
            var accountInfoQueryRequest = new App.SearchRequest();
            self.searchService.search(accountInfoQueryRequest, self.url.accountInfoQuery + "/Dropdown")
                .then(success, error);
        };
        MoneyTransferConroller.prototype.accountInfoChanged = function () {
            var self = this;
            self.model.accountInfoTitle = self.selectedAccountInfo["text"];
            self.model.accountInfoId = self.selectedAccountInfo.id;
        };
        MoneyTransferConroller.prototype.dateChanged = function () {
            var self = this;
            console.log(self.transactionDate);
            self.model.transactionDate = self.transactionDate.toDateString();
        };
        MoneyTransferConroller.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService",
            'Excel'
        ];
        return MoneyTransferConroller;
    }(App.BaseController));
    App.MoneyTransferConroller = MoneyTransferConroller;
    angular.module("app").controller("MoneyTransferConroller", MoneyTransferConroller);
})(App || (App = {}));

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var App;
(function (App) {
    "use strict";
    var WarehouseController = /** @class */ (function (_super) {
        __extends(WarehouseController, _super);
        function WarehouseController(location, state, stateParams, url, search, save, authService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.warehouse, url.warehouseQuery, excel) || this;
            _this.selectedRow = null;
            _this.isUpdateMode = false;
            if (_this.stateParams["id"]) {
                _this.isUpdateMode = true;
                _this.edit(_this.stateParams["id"]);
            }
            return _this;
        }
        WarehouseController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", 'Excel'
        ];
        return WarehouseController;
    }(App.BaseController));
    App.WarehouseController = WarehouseController;
    angular.module("app").controller("WarehouseController", WarehouseController);
    var WarehousesController = /** @class */ (function (_super) {
        __extends(WarehousesController, _super);
        function WarehousesController(location, state, stateParams, url, search, save, authService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.warehouse, url.warehouseQuery, excel) || this;
            if (_this.stateParams["myId"]) {
                _this.searchRequest["warehouseId"] = _this.user.warehouseId;
            }
            _this.search();
            return _this;
        }
        WarehousesController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", 'Excel'
        ];
        return WarehousesController;
    }(App.BaseController));
    App.WarehousesController = WarehousesController;
    angular.module("app").controller("WarehousesController", WarehousesController);
    var WarehouseHistoryController = /** @class */ (function (_super) {
        __extends(WarehouseHistoryController, _super);
        function WarehouseHistoryController(location, $state, $stateParams, url, searchService, saveService, auth, excel) {
            var _this = _super.call(this, location, $state, $stateParams, url, searchService, saveService, auth, url.warehouse, url.warehouseQuery, excel) || this;
            if (_this.stateParams["id"]) {
                _this.loadWarehouseHistory();
            }
            else {
                _this.back();
            }
            return _this;
        }
        WarehouseHistoryController.prototype.loadWarehouseHistory = function () {
            var self = this;
            var successCallback = function (response) {
                console.log(response);
                //self.warehouseViewModel = response.data["result"];
                self.models = response.data;
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            var searchRequest = new App.SearchRequest();
            searchRequest.parentId = this.stateParams["id"];
            //            searchRequest.page = 1;
            self.searchService
                .search(searchRequest, self.url.warehouseQuery + "/History")
                .then(successCallback, errorCallback);
        };
        WarehouseHistoryController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", 'Excel'
        ];
        return WarehouseHistoryController;
    }(App.BaseController));
    App.WarehouseHistoryController = WarehouseHistoryController;
    angular.module("app").controller("WarehouseHistoryController", WarehouseHistoryController);
    var WarehouseProductHistoryController = /** @class */ (function (_super) {
        __extends(WarehouseProductHistoryController, _super);
        function WarehouseProductHistoryController(http, location, state, stateParams, url, search, save, authService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.warehouse, url.warehouseQuery, excel) || this;
            _this.isProductActive = true;
            _this.http = http;
            _this.getWarehouseHistory();
            return _this;
        }
        WarehouseProductHistoryController.prototype.getWarehouseHistory = function () {
            var self = this;
            var data = {
                warehouseId: self.stateParams['warehouseId'],
                isProductActive: self.isProductActive
            };
            self.http.post(self.url.warehouseQuery + '/ProductHistory', data).then(function (res) {
                self.models = res['data'];
            });
        };
        WarehouseProductHistoryController.$inject = [
            "$http", "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", 'Excel'
        ];
        return WarehouseProductHistoryController;
    }(App.BaseController));
    App.WarehouseProductHistoryController = WarehouseProductHistoryController;
    angular.module("app").controller("WarehouseProductHistoryController", WarehouseProductHistoryController);
    var StockTransferController = /** @class */ (function (_super) {
        __extends(StockTransferController, _super);
        function StockTransferController(scope, filter, location, state, stateParams, url, search, save, authService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.stocktransfer, url.stocktransferQuery, excel) || this;
            _this.estimatedDeliveyDate = new Date();
            _this.estimatedDeliveyDate.setDate(_this.estimatedDeliveyDate.getDate());
            var self = _this;
            scope.$watch('vm.estimatedDeliveyDate', function (newValue) {
                var dateValue = filter('date')((newValue), 'dd-MMMM-yyyy');
                self.model.estimatedDeliveryDate = dateValue;
                console.log(dateValue);
            });
            return _this;
        }
        StockTransferController.prototype.activate = function () {
            this.searchRequest = new App.SearchRequest("", "Modified", "False", "");
            this.productDetailSearchRequest = new App.SearchRequest("", "Modified", "False", "");
            this.model = new App.StockTransferViewModel();
            this.model.orderNumber = "ST-" + this.generateOrderNumber();
            this.stockTransferDetail = new App.StockTransferDetailViewModel();
            this.selectedRow = null;
            this.models = [];
            this.isUpdateMode = false;
            this.totalCount = 0;
            var self = this;
            this.loadWarehouses().then(function (warehouses) {
                self.model.sourceWarehouseId = warehouses[0].id;
                self.loadOtherWarehouses();
            });
            this.loadProductDetails();
        };
        StockTransferController.prototype.loadProductDetails = function () {
            var self = this;
            if (self.productDetailSearchRequest.keyword.length < 3) {
                return;
            }
            var successCallback = function (response) {
                console.log('products ', response);
                self.productDetails = response.Models;
                self.productDetailsCount = response.Count;
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.productDetailSearchRequest["isProductActive"] = true;
            self.productDetailSearchRequest.warehouseId = self.model.sourceWarehouseId;
            self.searchService
                .search(self.productDetailSearchRequest, self.url.productDetailQuery + "/SearchByWarehouse")
                .then(successCallback, errorCallback);
        };
        StockTransferController.prototype.getPriceAndName = function () {
            this.stockTransferDetail.priceTotal = this.stockTransferDetail.quantity * this.stockTransferDetail.salePricePerUnit;
        };
        StockTransferController.prototype.decreaseFromCart = function (index) {
            var quantity = this.model.stockTransferDetails[index].quantity - 1;
            if (quantity === 0) {
                this.removeFromCart(index);
            }
            else {
                var salePrice = this.model.stockTransferDetails[index].salePricePerUnit;
                this.model.stockTransferDetails[index].quantity = quantity;
                this.model.stockTransferDetails[index].priceTotal = salePrice * quantity;
            }
            this.updateCartTotal();
        };
        StockTransferController.prototype.removeFromCart = function (index) {
            this.model.stockTransferDetails.splice(index, 1);
            this.updateCartTotal();
        };
        StockTransferController.prototype.increaseToCart = function (index) {
            var quantity = this.model.stockTransferDetails[index].quantity + 1;
            var salePrice = this.model.stockTransferDetails[index].salePricePerUnit;
            this.model.stockTransferDetails[index].quantity = quantity;
            this.model.stockTransferDetails[index].priceTotal = salePrice * quantity;
            this.updateCartTotal();
        };
        StockTransferController.prototype.updateCartTotal = function () {
            var _this = this;
            var self = this;
            self.model.productAmount = 0;
            self.model.stockTransferDetails.forEach(function (p) { return _this.model.productAmount += p.priceTotal; });
            self.model.totalAmount = self.model.productAmount;
        };
        StockTransferController.prototype.addToCart2 = function (detail) {
            this.setProductDetail(detail);
            this.addToCart();
        };
        StockTransferController.prototype.setProductDetail = function (detail) {
            this.stockTransferDetail.salePricePerUnit = detail.salePrice;
            this.stockTransferDetail.productDetailId = detail.id;
            this.stockTransferDetail.productDetailName = detail.name;
            this.stockTransferDetail.productDetail = detail;
            this.stockTransferDetail.quantity = 1;
            this.getPriceAndName();
        };
        StockTransferController.prototype.addToCart = function () {
            this.model.stockTransferDetails.push(this.stockTransferDetail);
            this.updateCartTotal();
            this.stockTransferDetail = new App.StockTransferDetailViewModel();
        };
        StockTransferController.prototype.editCart = function (p) {
            this.stockTransferDetail = p;
            this.removeByAttr(this.model.stockTransferDetails, 'productDetailId', p.productDetailId);
        };
        StockTransferController.prototype.removeByAttr = function (arr, attr, value) {
            var i = arr.length;
            while (i--) {
                if (arr[i]
                    && arr[i].hasOwnProperty(attr)
                    && (arguments.length > 2 && arr[i][attr] === value)) {
                    arr.splice(i, 1);
                }
            }
            return arr;
        };
        StockTransferController.prototype.updateQuantityAll = function () {
            for (var i = 0; i < this.model.stockTransferDetails.length; i++) {
                this.updateQuantity(i);
            }
        };
        StockTransferController.prototype.updateQuantity = function (index) {
            var salePrice = this.model.stockTransferDetails[index].salePricePerUnit;
            var quantity = this.model.stockTransferDetails[index].quantity;
            this.model.stockTransferDetails[index].quantity = quantity;
            this.model.stockTransferDetails[index].priceTotal = salePrice * quantity;
            this.updateCartTotal();
        };
        StockTransferController.prototype.save = function () {
            var self = this;
            var successCallback = function (response) {
                self.activate();
            };
            var errorCallback = function (error) {
                console.log(error);
                alert("Error occurred during save. Check your data or please contact with administrator.");
            };
            if (self.model.destinationWarehouseId == null || self.model.destinationWarehouseId == "") {
                alert('Destination warehouse can not be empty');
                return;
            }
            for (var i = 0; i < self.model.stockTransferDetails.length; i++) {
                self.model.stockTransferDetails[i].productDetail = null;
                self.model.stockTransferDetails[i].created = new Date().toDateString();
                self.model.stockTransferDetails[i].modified = new Date().toDateString();
                self.model.stockTransferDetails[i].createdBy = self.authService.accountInfo.userName;
                self.model.stockTransferDetails[i].createdFrom = "Browser";
                self.model.stockTransferDetails[i].modifiedBy = self.authService.accountInfo.userName;
                self.model.stockTransferDetails[i].id = "1";
                self.model.stockTransferDetails[i].shopId = self.model.stockTransferDetails[i].shopId != null ? self.model.stockTransferDetails[i].shopId : "1";
            }
            self.saveService.save(self.model, self.commandUrl + "/Add").then(successCallback, errorCallback);
        };
        StockTransferController.prototype.loadOtherWarehouses = function () {
            var self = this;
            var successCallback = function (response) {
                self.destinationWarehouses = response.Models;
                if (self.destinationWarehouses.length > 0) {
                    var warehouseId_1 = self.user.warehouseId;
                    if (warehouseId_1 && self.user.role.indexOf("Warehouse") !== -1) {
                        self.destinationWarehouses = self.destinationWarehouses.filter(function (x) { return x.id !== warehouseId_1; });
                    }
                }
                return self.destinationWarehouses;
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            var reqeust = new App.SearchRequest();
            return self.searchService
                .search(reqeust, self.url.warehouseQuery + "/Dropdown")
                .then(successCallback, errorCallback);
        };
        StockTransferController.$inject = [
            "$scope", "$filter", "$location", "$state", "$stateParams", "UrlService", "SearchService",
            "SaveService", "AuthService", 'Excel'
        ];
        return StockTransferController;
    }(App.BaseController));
    App.StockTransferController = StockTransferController;
    angular.module("app").controller("StockTransferController", StockTransferController);
    var StockTransfersController = /** @class */ (function (_super) {
        __extends(StockTransfersController, _super);
        function StockTransfersController(scope, filter, location, state, stateParams, url, search, save, authService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.stocktransfer, url.stocktransferQuery, excel) || this;
            _this.searchRequest.isIncludeParents = true;
            _this.search();
            return _this;
        }
        StockTransfersController.$inject = [
            "$scope", "$filter", "$location", "$state", "$stateParams", "UrlService", "SearchService",
            "SaveService", "AuthService", 'Excel'
        ];
        return StockTransfersController;
    }(App.BaseController));
    App.StockTransfersController = StockTransfersController;
    angular.module("app").controller("StockTransfersController", StockTransfersController);
    var StockTransferDetailController = /** @class */ (function (_super) {
        __extends(StockTransferDetailController, _super);
        function StockTransferDetailController(location, state, stateParams, url, search, save, authService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.stocktransfer, url.stocktransferQuery, excel) || this;
            console.log('StockTransferDetailController');
            if (_this.stateParams["id"]) {
                _this.loadDetail();
            }
            else {
                _this.back();
            }
            return _this;
        }
        StockTransferDetailController.prototype.loadDetail = function () {
            console.log(this.stateParams);
            var self = this;
            var successCallback = function (response) {
                self.model = response.data;
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            var searchRequest = new App.SearchRequest();
            searchRequest.id = this.stateParams["id"];
            searchRequest.page = -1;
            var id = this.stateParams["id"];
            var httpUrl = self.url.stocktransferQuery + "/SearchDetail?id=" + id;
            self.searchService
                .search(searchRequest, httpUrl)
                .then(successCallback, errorCallback);
        };
        StockTransferDetailController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", 'Excel'
        ];
        return StockTransferDetailController;
    }(App.BaseController));
    App.StockTransferDetailController = StockTransferDetailController;
    angular.module('app').controller("StockTransferDetailController", StockTransferDetailController);
    var DamageController = /** @class */ (function (_super) {
        __extends(DamageController, _super);
        function DamageController(location, state, stateParams, url, search, save, authService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.damage, url.damageQuery, excel) || this;
            _this.loadProductDetails();
            _this.selectedRow = null;
            _this.isUpdateMode = false;
            _this.loadWarehouses().then(function (warehouses) {
                _this.model.warehouseId = warehouses[0].id;
            });
            if (_this.stateParams["id"]) {
                _this.isUpdateMode = true;
                _this.edit2(_this.stateParams["id"]);
            }
            return _this;
        }
        DamageController.prototype.loadProductDetails = function () {
            var self = this;
            var successCallback = function (response) {
                console.log(response);
                self.productDteails = response.Models;
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.searchService
                .search(self.searchRequest, self.url.productDetailQuery + "/Dropdown")
                .then(successCallback, errorCallback);
        };
        DamageController.prototype.groupChanged = function () {
            console.log(this.model.productDetailId);
        };
        DamageController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", 'Excel'
        ];
        return DamageController;
    }(App.BaseController));
    App.DamageController = DamageController;
    angular.module("app").controller("DamageController", DamageController);
    var DamagesController = /** @class */ (function (_super) {
        __extends(DamagesController, _super);
        function DamagesController(location, state, stateParams, url, search, save, authService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.damage, url.damageQuery, excel) || this;
            _this.loadProductDetails();
            _this.selectedRow = null;
            _this.isUpdateMode = false;
            _this.loadWarehouses().then(function (warehouses) {
                _this.model.warehouseId = warehouses[0].id;
            });
            _this.searchRequest.isIncludeParents = true;
            _this.search();
            return _this;
        }
        DamagesController.prototype.loadProductDetails = function () {
            var self = this;
            var successCallback = function (response) {
                console.log(response);
                self.productDteails = response.Models;
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.searchService
                .search(self.searchRequest, self.url.productDetailQuery + "/Dropdown")
                .then(successCallback, errorCallback);
        };
        DamagesController.$inject = [
            "$location", "$state", "$stateParams",
            "UrlService", "SearchService", "SaveService", "AuthService", 'Excel'
        ];
        return DamagesController;
    }(App.BaseController));
    App.DamagesController = DamagesController;
    angular.module("app").controller("DamagesController", DamagesController);
    var StockTransferReturnController = /** @class */ (function (_super) {
        __extends(StockTransferReturnController, _super);
        function StockTransferReturnController(location, state, stateParams, url, search, save, authService, localStorageService, excel) {
            var _this = _super.call(this, location, state, stateParams, url, search, save, authService, url.stocktransfer, url.stocktransferQuery, excel) || this;
            var self = _this;
            self.localStorageService = localStorageService;
            _this.loadWarehouses().then(function (warehouses) {
                self.model.sourceWarehouseId = warehouses[0].id;
                self.loadOtherWarehouses();
            });
            if (_this.stateParams["id"]) {
                _this.stockTransferDetail = new App.StockTransferDetailViewModel();
                _this.productDetailSearchRequest = new App.SearchRequest();
                _this.loadDetail();
                _this.loadProductDetails();
            }
            else {
                _this.back();
            }
            var acc = _this.authService.accountInfo;
            self.isApproveProduct = false;
            if (acc.role == 'ShopAdmin' || acc.role == 'WarehouseAdmin') {
                self.isApproveProduct = true;
                console.log(acc.role);
            }
            return _this;
        }
        StockTransferReturnController.prototype.loadDetail = function () {
            console.log(this.stateParams);
            var self = this;
            var successCallback = function (response) {
                self.model = response.data;
                console.log(self.model);
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            var searchRequest = new App.SearchRequest();
            searchRequest.id = this.stateParams["id"];
            searchRequest.page = -1;
            var id = this.stateParams["id"];
            var httpUrl = self.url.stocktransferQuery + "/SearchDetail?id=" + id;
            self.searchService
                .search(searchRequest, httpUrl)
                .then(successCallback, errorCallback);
        };
        StockTransferReturnController.prototype.loadProductDetails = function () {
            var self = this;
            if (self.productDetailSearchRequest.keyword.length < 3) {
                return;
            }
            var successCallback = function (response) {
                console.log('products ', response);
                self.productDetails = response.Models;
                self.productDetailsCount = response.Count;
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.productDetailSearchRequest["isProductActive"] = true;
            self.productDetailSearchRequest.warehouseId = self.model.sourceWarehouseId;
            self.searchService
                .search(self.productDetailSearchRequest, self.url.productDetailQuery + "/SearchByWarehouse")
                .then(successCallback, errorCallback);
        };
        StockTransferReturnController.prototype.getPriceAndName = function () {
            this.stockTransferDetail.priceTotal = this.stockTransferDetail.quantity * this.stockTransferDetail.salePricePerUnit;
        };
        StockTransferReturnController.prototype.decreaseFromCart = function (index) {
            var quantity = this.model.stockTransferDetails[index].quantity - 1;
            if (quantity === 0) {
                this.removeFromCart(index);
            }
            else {
                var salePrice = this.model.stockTransferDetails[index].salePricePerUnit;
                this.model.stockTransferDetails[index].quantity = quantity;
                this.model.stockTransferDetails[index].priceTotal = salePrice * quantity;
            }
            this.updateCartTotal();
        };
        StockTransferReturnController.prototype.removeFromCart = function (index) {
            this.model.stockTransferDetails.splice(index, 1);
            this.updateCartTotal();
        };
        StockTransferReturnController.prototype.increaseToCart = function (index) {
            var quantity = this.model.stockTransferDetails[index].quantity + 1;
            var salePrice = this.model.stockTransferDetails[index].salePricePerUnit;
            this.model.stockTransferDetails[index].quantity = quantity;
            this.model.stockTransferDetails[index].priceTotal = salePrice * quantity;
            this.updateCartTotal();
        };
        StockTransferReturnController.prototype.removeByAttr = function (arr, attr, value) {
            var i = arr.length;
            while (i--) {
                if (arr[i]
                    && arr[i].hasOwnProperty(attr)
                    && (arguments.length > 2 && arr[i][attr] === value)) {
                    arr.splice(i, 1);
                }
            }
            return arr;
        };
        StockTransferReturnController.prototype.addToCart = function () {
            this.model.stockTransferDetails.push(this.stockTransferDetail);
            console.log('stockTransferDetails result--', this.model.stockTransferDetails);
            this.updateCartTotal();
            this.stockTransferDetail = new App.StockTransferDetailViewModel();
        };
        StockTransferReturnController.prototype.addToCart2 = function (detail) {
            this.setProductDetail(detail);
            this.addToCart();
        };
        StockTransferReturnController.prototype.editCart = function (p) {
            this.stockTransferDetail = p;
            this.removeByAttr(this.model.stockTransferDetails, 'productDetailId', p.productDetailId);
        };
        StockTransferReturnController.prototype.updateCartTotal = function () {
            var _this = this;
            var self = this;
            self.model.productAmount = 0;
            self.model.stockTransferDetails.forEach(function (p) { return _this.model.productAmount += p.priceTotal; });
            self.model.totalAmount = self.model.productAmount;
        };
        StockTransferReturnController.prototype.setProductDetail = function (detail) {
            this.stockTransferDetail.salePricePerUnit = detail.salePrice;
            this.stockTransferDetail.productDetailId = detail.id;
            this.stockTransferDetail.productDetailName = detail.name;
            this.stockTransferDetail.productDetail = detail;
            this.stockTransferDetail.quantity = 1;
            this.getPriceAndName();
        };
        StockTransferReturnController.prototype.updateQuantityAll = function () {
            for (var i = 0; i < this.model.stockTransferDetails.length; i++) {
                this.updateQuantity(i);
            }
        };
        StockTransferReturnController.prototype.updateQuantity = function (index) {
            var salePrice = this.model.stockTransferDetails[index].salePricePerUnit;
            var quantity = this.model.stockTransferDetails[index].quantity;
            this.model.stockTransferDetails[index].quantity = quantity;
            this.model.stockTransferDetails[index].priceTotal = salePrice * quantity;
            this.updateCartTotal();
        };
        StockTransferReturnController.prototype.save = function () {
            var self = this;
            var successCallback = function (response) {
                self.back();
            };
            var errorCallback = function (error) {
                console.log(error);
                alert("Error occurred during save. Check your data or please contact with administrator.");
            };
            for (var i = 0; i < self.model.stockTransferDetails.length; i++) {
                self.model.stockTransferDetails[i].productDetail = null;
                // self.model.stockTransferDetails[i].created = new Date().toDateString();
                self.model.stockTransferDetails[i].modified = new Date().toDateString();
                self.model.stockTransferDetails[i].createdBy = self.authService.accountInfo.userName;
                self.model.stockTransferDetails[i].createdFrom = "Browser";
                self.model.stockTransferDetails[i].modifiedBy = self.authService.accountInfo.userName;
                self.model.stockTransferDetails[i].destinationWarehouseId = self.model.destinationWarehouseId;
                self.model.stockTransferDetails[i].sourceWarehouseId = self.model.sourceWarehouseId;
                if (self.model.stockTransferDetails[i].id == null) {
                    self.model.stockTransferDetails[i].id = "1";
                }
                self.model.stockTransferDetails[i].shopId = self.model.stockTransferDetails[i].shopId != null ? self.model.stockTransferDetails[i].shopId : "1";
            }
            self.saveService.update(self.model, self.commandUrl + "/Edit").then(successCallback, errorCallback);
        };
        StockTransferReturnController.prototype.loadOtherWarehouses = function () {
            var self = this;
            var successCallback = function (response) {
                self.destinationWarehouses = response.Models;
                if (self.destinationWarehouses.length > 0) {
                    var warehouseId_2 = self.user.warehouseId;
                    if (warehouseId_2 && self.user.role.indexOf("Warehouse") !== -1) {
                        self.destinationWarehouses = self.destinationWarehouses.filter(function (x) { return x.id !== warehouseId_2; });
                    }
                }
                return self.destinationWarehouses;
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            var reqeust = new App.SearchRequest();
            return self.searchService
                .search(reqeust, self.url.warehouseQuery + "/Dropdown")
                .then(successCallback, errorCallback);
        };
        StockTransferReturnController.prototype.updateState = function () {
            var self = this;
            var successCallback = function (params) {
                self.back();
            };
            var errorCallback = function (error) {
                console.log(error);
            };
            self.saveService.update(self.model, self.commandUrl + "/UpdateState").then(successCallback, errorCallback);
        };
        StockTransferReturnController.$inject = [
            "$location", "$state", "$stateParams", "UrlService", "SearchService",
            "SaveService", "AuthService", 'Excel'
        ];
        return StockTransferReturnController;
    }(App.BaseController));
    App.StockTransferReturnController = StockTransferReturnController;
    angular.module('app').controller("StockTransferReturnController", StockTransferReturnController);
})(App || (App = {}));

var App;
(function (App) {
    var LocalConfigController = /** @class */ (function () {
        function LocalConfigController(storageService) {
            console.log('I am in storage Controller');
            this.storageService = storageService;
            this.showOrderNumberAfterSave = this.storageService.get(App.LocalStorageKeys.ShowOrderNumberAfterSave);
            this.addToCartIfResultIsOne = this.storageService.get(App.LocalStorageKeys.AddToCartIfResultIsOne);
            this.deliveryChargeAmount = this.storageService.get(App.LocalStorageKeys.DeliveryChargeAmount);
            this.receiptName = this.storageService.get2(App.LocalStorageKeys.ReceiptName);
            this.chalanName = this.storageService.get2(App.LocalStorageKeys.ChalanName);
            this.defaultWarehouse = this.storageService.get2(App.LocalStorageKeys.DefaultWarehouse);
            this.dealerPriceChange = this.storageService.get2(App.LocalStorageKeys.DealerPriceChange);
        }
        LocalConfigController.prototype.$onInit = function () { console.log('on init LocalConfigController'); };
        LocalConfigController.prototype.valueChanged = function (key, value) {
            console.log(key, value);
            this.storageService.save2(key, value);
        };
        LocalConfigController.$inject = ["LocalStorageService"];
        return LocalConfigController;
    }());
    App.LocalConfigController = LocalConfigController;
    angular.module('app').controller('LocalConfigController', LocalConfigController);
})(App || (App = {}));

var App;
(function (App) {
    var SigninController = /** @class */ (function () {
        function SigninController(authService, $state, $rootScope) {
            console.log('i m in signincontroller');
            this.user = new App.SigninRequest("admin@demo1.com", "123456");
            this.authService = authService;
            this.stateService = $state;
            this.rootScopeService = $rootScope;
            var acc = this.authService.accountInfo;
            if (acc && acc.isAuth) {
                if (acc.defaultRoute) {
                    this.stateService.go(acc.defaultRoute);
                }
                else {
                    this.stateService.go("root.home");
                }
            }
        }
        SigninController.prototype.$onInit = function () { console.log('on init signin controller'); };
        SigninController.prototype.signin = function () {
            var _this = this;
            var self = this;
            var signinSuccess = function (response) {
                self.authService.accountInfo = response;
                var acc = response;
                if (acc && acc.isAuth) {
                    if (acc.defaultRoute) {
                        _this.stateService.go(acc.defaultRoute);
                    }
                    else {
                        _this.stateService.go("root.home");
                    }
                }
                self.rootScopeService.$broadcast("SignedIn");
            };
            var signinError = function (error) {
                console.log(error);
                if (error.data.error_description) {
                    alert(error.data.error_description);
                }
                else {
                    alert('Unknown error occurred. Please contact support. Thanks.');
                }
                self.showErrorMessage = true;
            };
            self.authService.signin(new App.SigninRequest(self.user.email, self.user.password)).then(signinSuccess, signinError);
        };
        SigninController.$inject = ["AuthService", "$state", "$rootScope"];
        return SigninController;
    }());
    App.SigninController = SigninController;
    angular.module("app").controller("SigninController", SigninController);
    var NavController = /** @class */ (function () {
        function NavController(authService, $state, $rootScope, url) {
            var self = this;
            self.authService = authService;
            self.stateService = $state;
            self.rootScopeService = $rootScope;
            self.urlService = url;
            var acc = self.authService.accountInfo;
            if (acc && acc.isAuth) {
                self.loadUser();
            }
            else {
                self.isSignedIn = false;
            }
            self.rootScopeService.$on("SignedIn", function (event, args) {
                self.loadUser();
            });
        }
        NavController.prototype.$onInit = function () { };
        NavController.prototype.loadUser = function () {
            var self = this;
            self.user = this.authService.accountInfo;
            self.isSignedIn = this.authService.isSignedIn();
        };
        NavController.prototype.signout = function () {
            var self = this;
            self.authService.signout();
            self.loadUser();
            self.stateService.go("root.signin");
            self.rootScopeService.$broadcast("SignedOut");
        };
        NavController.$inject = ["AuthService", "$state", "$rootScope", "UrlService"];
        return NavController;
    }());
    App.NavController = NavController;
    angular.module("app").controller("NavController", NavController);
    //export class RegisterController {
    //    private authService: AuthService;
    //    user: RegisterRequest;
    //    private stateService: angular.ui.IStateService;
    //    notification: Notification;
    //    isDisabled: boolean;
    //    static $inject = ["AuthService", "$state"];
    //    constructor(
    //        authService: AuthService, $state: angular.ui.IStateService) {
    //        this.authService = authService;
    //        this.stateService = $state;
    //        var acc = this.authService.accountInfo;
    //        if (acc && acc.isAuth) {
    //            this.stateService.go("root.home");
    //        }
    //        this.notification = new Notification();
    //        this.notification.isError = false;
    //        this.notification.isInfo = false;
    //        this.isDisabled = false;
    //    }
    //    register(): void {
    //        var self = this;
    //        self.isDisabled = true;
    //        var successCallback = (response: RegisterResponse): any => {
    //            self.stateService.go("root.signin");
    //            // console.log(response);
    //            self.isDisabled = false;
    //            return response;
    //        };
    //        var errorCallback = (errorResponse: any): any => {
    //            self.isDisabled = false;
    //            console.log(errorResponse);
    //            self.notification.isError = true;
    //            if (errorResponse.status === 500) {
    //                self.notification.message = errorResponse.data.ExceptionMessage;
    //            } else {
    //                if (errorResponse.status === 400 && errorResponse.data.ModelState["model.Password"]) {
    //                    self.notification.message = errorResponse.data.ModelState["model.Password"][0];
    //                } else {
    //                    if (errorResponse.status === 400 && errorResponse.data.ModelState["model.Phone"]) {
    //                        self.notification.message = errorResponse.data.ModelState["model.Phone"][0];
    //                    } else {
    //                        if (errorResponse.status === 400 && errorResponse.data.ModelState[""]) {
    //                            if (errorResponse.data.ModelState[""].length > 1) {
    //                                self.notification.message = errorResponse.data.ModelState[""][1];
    //                            } else
    //                                self.notification.message = errorResponse.data.ModelState[""][0];
    //                        }
    //                        else self.notification.message = errorResponse.data.Message;
    //                    }
    //                }
    //            }
    //        };
    //        self.authService.register(self.user).then(successCallback, errorCallback);
    //    }
    //}
    //angular.module("app").controller("RegisterController", RegisterController);
})(App || (App = {}));
